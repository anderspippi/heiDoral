fun main() {
    iterateManually();
    iterateWithForIn();
}

fun iterateManually() {
    let it = Vec[String]("a", "b", "c").enumerate();
    assert(it.hasNext());
    let (idx, value) = it.next();
    assert(idx == 0L && value == "a");
    assert(it.hasNext());
    let (idx, value) = it.next();
    assert(idx == 1L && value == "b");
    assert(it.hasNext());
    let (idx, value) = it.next();
    assert(idx == 2L && value == "c");
    assert(!it.hasNext());
}

fun iterateWithForIn() {
    for idx_and_value in Vec[String]("a", "b", "c").enumerate() {
        let (idx, value) = idx_and_value;

        if idx == 0L { assert(value == "a"); }
        else if idx == 1L { assert(value == "b"); }
        else if idx == 2L { assert(value == "c"); }
        else {
            unreachable[()]();
        }

    }
}

fun iterateWithForInPattern() {
    for (idx, value) in Vec[String]("a", "b", "c").enumerate() {
        if idx == 0L { assert(value == "a"); }
        else if idx == 1L { assert(value == "b"); }
        else if idx == 2L { assert(value == "c"); }
        else {
            unreachable[()]();
        }

    }
}
