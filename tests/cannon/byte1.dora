fn main() {    
    assert(!eq(20Y, 5Y));
    assert(eq(5Y, 5Y));
    assert(!eq(5Y, 20Y));

    assert(ne(20Y, 5Y));
    assert(!ne(5Y, 5Y));
    assert(ne(5Y, 20Y));


    assert(!lt(20Y, 5Y));
    assert(!lt(5Y, 5Y));
    assert(lt(5Y, 20Y));

    assert(!le(20Y, 5Y));
    assert(le(5Y, 5Y));
    assert(le(5Y, 20Y));

    assert(ge(20Y, 5Y));
    assert(ge(5Y, 5Y));
    assert(!ge(5Y, 20Y));

    assert(gt(20Y, 5Y));
    assert(!gt(5Y, 5Y));
    assert(!gt(5Y, 20Y));
}

fn eq(x: UInt8, y: UInt8): Bool {
    return x == y;
}

fn ne(x: UInt8, y: UInt8): Bool {
    return x != y;
}

fn lt(x: UInt8, y: UInt8): Bool {
    return x < y;
}

fn le(x: UInt8, y: UInt8): Bool {
    return x <= y;
}

fn ge(x: UInt8, y: UInt8): Bool {
    return x >= y;
}

fn gt(x: UInt8, y: UInt8): Bool {
    return x > y;
}