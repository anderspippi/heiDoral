fun main() {
    assert(abi_1(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 1I);
    assert(abi_2(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 2I);
    assert(abi_3(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 3I);
    assert(abi_4(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 4I);
    assert(abi_5(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 5I);
    assert(abi_6(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 6I);
    assert(abi_7(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 7I);
    assert(abi_8(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 8I);
    assert(abi_9(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 9I);
}

@cannon fun abi_1(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32) -> Int32 {
    return x;
}

@cannon fun abi_2(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32) -> Int32 {
    return y;
}

@cannon fun abi_3(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32) -> Int32 {
    return z;
}

@cannon fun abi_4(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32) -> Int32 {
    return a;
}

@cannon fun abi_5(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32) -> Int32 {
    return b;
}

@cannon fun abi_6(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32) -> Int32 {
    return c;
}

@cannon fun abi_7(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32) -> Int32 {
    return i;
}

@cannon fun abi_8(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32) -> Int32 {
    return j;
}

@cannon fun abi_9(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32) -> Int32 {
    return k;
}