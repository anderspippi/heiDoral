fn main() {
  assert(foo_bool() == false);
  assert(foo_byte() == 6Y);
  assert(foo_char() == '6');
  assert(foo_int32() == 6I);
  assert(foo_long() == 6L);
  assert(foo_float() == 6F);
  assert(foo_double() == 6D);
  assert(foo_string() == "33");
}

fn foo_bool(): Bool {
  return bar_bool(true);
}

fn bar_bool(a: Bool): Bool {
  assert(a == true);
  return !a;
}

fn foo_byte(): UInt8 {
  return bar_byte(3Y);
}

fn bar_byte(a: UInt8): UInt8 {
  assert(a == 3Y);
  return (3I+a.toInt32()).toUInt8();
}

fn foo_char(): Char {
  return bar_char('3');
}

fn bar_char(a: Char): Char {
  assert(a == '3');
  return (3I+a.toInt32()).toChar().getOrPanic();
}

fn foo_int32(): Int32 {
  return bar_int32(3I);
}

fn bar_int32(a: Int32): Int32 {
  assert(a == 3I);
  return 3I+a;
}

fn foo_long(): Int64 {
  return bar_long(3L);
}

fn bar_long(a: Int64): Int64 {
  assert(a == 3L);
  return 3L+a;
}

fn foo_float(): Float32 {
  return bar_float(3F);
}

fn bar_float(a: Float32): Float32 {
  assert(a == 3F);
  return 3F+a;
}

fn foo_double(): Float64 {
  return bar_double(3D);
}

fn bar_double(a: Float64): Float64 {
  assert(a == 3D);
  return 3D+a;
}

fn foo_string(): String {
  return bar_string("3");
}

fn bar_string(a: String): String {
  assert(a == "3");
  return "3"+a;
}
