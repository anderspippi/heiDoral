//= stdout file

fun main() {
    let primes = sieve(100I);
    var i = 0;

    while i < primes.length().toInt() {
        println(primes(i.toInt64()).toString());
        i = i + 1;
    }
}

fun sieve(limit: Int32) -> Vec[Int32] {
    let primes = Vec[Int32]();

    if limit >= 2I {
        let numbers = arrayFill[Bool](limit.toInt64()+1L, true);
        let sqrtLimit = limit.toDouble().sqrt().toInt32();

        var factor = 2I;

        while factor <= sqrtLimit {
            if numbers(factor.toInt()) {
                var multiple = factor * factor;

                while multiple <= limit {
                    numbers(multiple.toInt()) = false;
                    multiple = multiple + factor;
                }
            }

            factor = factor + 1I;
        }

        var i = 0I;

        while i <= limit {
            if i >= 2I && numbers(i.toInt()) {
                primes.push(i);
            }

            i = i + 1I;
        }
    }

    return primes;
}