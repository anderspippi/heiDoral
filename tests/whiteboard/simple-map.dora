fun main() {
    let m = SlowMap[Int32, String]();
    assert(m.insert(1I, "hello"));
    assert(m.insert(2I, "world"));

    assert(m.get(1I) == "hello");
    assert(m.get(2I) == "world");
    assert(m.get(3I) === nil);

    assert(!m.insert(2I, "test"));
    assert(m.get(2I) == "test");
}

class SlowMap[K: Equals, V] {
    var entries: Vec[SlowMapEntry[K, V]] = Vec[SlowMapEntry[K, V]]();

    fun insert(key: K, val: V) -> Bool {
        var i = 0L;
        var len = self.entries.length();

        while i < len {
            let entry = self.entries.get(i);

            if entry.key.equals(key) {
                entry.value = val;
                return false;
            }

            i = i + 1L;
        }

        self.entries.push(SlowMapEntry[K, V](key, val));
        true
    }

    fun get(key: K) -> V {
        var i = 0L;
        var len = self.entries.length();

        while i < len {
            let entry = self.entries.get(i);

            if entry.key.equals(key) {
                return entry.value;
            }

            i = i + 1L;
        }

        return defaultValue[V]();
    }
}

class SlowMapEntry[K, V](let key: K, var value: V)