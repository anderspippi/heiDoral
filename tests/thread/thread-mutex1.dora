//= vm-args "--gc=copy"

const THREADS: Int32 = 20i32;
const ITERATIONS: Int32 = 10_000i32;

class MyThread(let mtx: std::Mutex, let value: SharedInt): std::Thread {
    @override fn run() {
        var i = 0i32;
        var last: Object = Object();

        while i < ITERATIONS {
            Object();

            self.mtx.lock();
            let value = self.value.increment();

            last = Object();

            if value % 100i32 == 0i32 {
                std::forceCollect();
            }

            self.mtx.unlock();
            i = i + 1i32;
        }
    }
}

class SharedInt(var value: Int32) {
    fn increment(): Int32 {
        let old = self.value;
        self.value = self.value + 1i32;
        old
    }
}

fn main() {
    var i = 0i32;
    var threads = Vec[MyThread]();
    var mtx = std::Mutex();
    var shared = SharedInt(0i32);

    while i < THREADS {
        let thread = MyThread(mtx, shared);
        thread.start();
        threads.push(thread);
        i = i + 1i32;
    }

    for thread in threads {
        thread.join();
    }

    assert(shared.value == THREADS * ITERATIONS);
}
