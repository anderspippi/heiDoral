fun main() {
  let x = None[Int32];
  assert(x.isNone());
  assert(!x.isSome());
  assert(!x.has(0));
  assert(!std::optionContains[Int32](x, 0));
  assert(std::optionEquals[Int32](x, None[Int32]));
  assert(!std::optionEquals[Int32](x, Some[Int32](0)));
  assert(x.toString() == "None");

  let x = Some[Int32](42);
  assert(x.isSome());
  assert(!x.isNone());
  assert(x.unwrap() == 42);
  assert(x.has(42));
  assert(std::optionContains[Int32](x, 42));
  assert(std::optionEquals[Int32](x, Some[Int32](42)));
  assert(!std::optionEquals[Int32](x, Some[Int32](2)));
  assert(!std::optionEquals[Int32](x, None[Int32]));
  assert(x.toString() == "Some(42)");
}
