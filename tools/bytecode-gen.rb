#!/usr/bin/ruby

def read_bytecodes
    bytecodes = []
    parse_bytecode = false

    File.open('dora/src/bytecode/data.rs').each_line do |line|
        unless parse_bytecode
            parse_bytecode = true if line == "pub enum BytecodeOpcode {\n"
            next
        end

        next if line.strip.empty?
        next if line.match(/^\s*\/\//)

        return bytecodes if line == "}\n"

        m = line.match(/^\s*([a-zA-Z]+),$/)

        unless m
            raise "illegal bytecode: #{line.inspect}"
        end

        name = m[1]
        bytecodes.push(name)
    end
end

def read_types
    types = []
    parse_type = false

    File.open('dora/src/bytecode/data.rs').each_line do |line|
        unless parse_type
            parse_type = true if line == "pub enum BytecodeType {\n"
            next
        end

        next if line.strip.empty?
        next if line.match(/^\s*\/\//)

        return types if line == "}\n"

        m = line.match(/^\s*([a-zA-Z]+),$/)

        unless m
            raise "illegal bytecode: #{line.inspect}"
        end

        name = m[1]
        types.push(name)
    end
end

def output(bytecodes, types)
    File.open('dora-boots/bytecode_opcode.dora', 'w') do |f|
        f.puts "// generated by tools/bytecode-gen.rb"
        f.puts

        opcode = 0

        for bytecode in bytecodes
            f.puts "const BC_#{snake_case(bytecode)}: Int = #{opcode};"
            opcode += 1
        end

        f.puts
        type_code = 0

        for type in types
            f.puts "const BC_TYPE_#{snake_case(type)}: Int = #{type_code};"
            type_code += 1
        end

        f.puts
        f.puts "fun bytecodeName(opcode: Int) -> String {"

        for bytecode in bytecodes
            f.puts "  if opcode == BC_#{snake_case(bytecode)} { return #{bytecode.inspect}; }"
        end

        f.puts "  \"UNKNOWN(${opcode})\""
        f.puts "}"
        f.puts

        f.puts "fun bytecodeTypeName(code: Int) -> String {"

        for type in types
            f.puts "  if code == BC_TYPE_#{snake_case(type)} { return #{type.inspect}; }"
        end

        f.puts "  \"UNKNOWN(${code})\""
        f.puts "}"
    end
end

def snake_case(name)
    result = name.gsub(/(.)([A-Z])/, '\1_\2')
    result.upcase
end

bytecodes = read_bytecodes
types = read_types
output(bytecodes, types)
