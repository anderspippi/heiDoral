fun compile(info: EncodedCompilationInfo): Array[UInt8] {
    let info = decodeCompilationInfo(info);
    // bytecodeDump(info.bc);
    CodeGen(info).generate()
}

@internal fun encodedBytecode(fct: String): EncodedCompilationInfo;

fun bytecode(fct: String): BytecodeFunction {
    let encoded = encodedBytecode(fct);
    let constpool = decodeConstPool(ByteReader(encoded.constpool));
    let registers = decodeRegisters(ByteReader(encoded.registers));
    BytecodeFunction(encoded.code, constpool, registers, encoded.arguments)
}

class CompilationInfo(let bc: BytecodeFunction, let typeParams: Array[SourceType], let arch: Architecture)

class EncodedCompilationInfo {
    let code: Array[UInt8] = Array[UInt8]::empty();
    let constpool: Array[UInt8] = Array[UInt8]::empty();
    let registers: Array[UInt8] = Array[UInt8]::empty();
    let typeParams: Array[UInt8] = Array[UInt8]::empty();
    let full: Array[UInt8] = Array[UInt8]::empty();
    let arguments: Int32 = 0;
    let arch: Int32 = 0;
}

enum Architecture {
    X64,
    Arm64,
}
