fn compile(encoded: Array[UInt8]): Array[UInt8] {
    let reader = ByteReader(encoded);
    let ci = decodeCompilationInfo(reader);
    assert(!reader.moreBytes());
    // bytecodeDump(info.bc);

    match ci.arch {
        Architecture::X64 => x64::CodeGenX64(ci).generate(),
        Architecture::Arm64 => arm64::CodeGenArm64(ci).generate(),
    }
}

@internal fn getEncodedBytecodeFunctionByName(fct: String): Array[UInt8];

fn getBytecodeFunctionByName(fct: String): BytecodeFunction {
    let encoded = getEncodedBytecodeFunctionByName(fct);
    let reader = ByteReader(encoded);
    let bc = decodeBytecodeFunction(reader);
    assert(!reader.moreBytes());

    bc
}

class CompilationInfo(let bc: BytecodeFunction, let typeParams: Array[SourceType], let arch: Architecture)

enum Architecture {
    X64,
    Arm64,
}
