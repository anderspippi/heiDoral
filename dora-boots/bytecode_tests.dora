@Test
fn testBytecodeRetVoid() {
    let writer = BytecodeBuilder();
    writer.emitRetVoid();
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 1);

    match instructions(0).inst {
        BytecodeInstruction::RetVoid => {},
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeRetInt() {
    let writer = BytecodeBuilder();
    writer.emitRet(BytecodeRegister(17i32));
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 2);

    match instructions(0).inst {
        BytecodeInstruction::Ret(opnd) => {
            assert(opnd.value == 17i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeRetWide() {
    let writer = BytecodeBuilder();
    writer.emitRet(BytecodeRegister(256i32));
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 6);

    match instructions(0).inst {
        BytecodeInstruction::Ret(opnd) => {
            assert(opnd.value == 256i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeMov() {
    let writer = BytecodeBuilder();
    writer.emitMov(BytecodeRegister(0i32), BytecodeRegister(1i32));
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 3);

    match instructions(0).inst {
        BytecodeInstruction::Mov(dest, src) => {
            assert(dest.value == 0i32 && src.value == 1i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeMovWide() {
    let writer = BytecodeBuilder();
    writer.emitMov(BytecodeRegister(256i32), BytecodeRegister(255i32));
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 10);

    match instructions(0).inst {
        BytecodeInstruction::Mov(dest, src) => {
            assert(dest.value == 256i32 && src.value == 255i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeConstByte() {
    let writer = BytecodeBuilder();
    writer.emitConstByte(BytecodeRegister(255i32), 255u8);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 3);

    match instructions(0).inst {
        BytecodeInstruction::ConstUInt8(dest, value) => {
            assert(dest.value == 255i32 && value == 255u8);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeConstByteWide() {
    let writer = BytecodeBuilder();
    writer.emitConstByte(BytecodeRegister(256i32), 255u8);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 7);

    match instructions(0).inst {
        BytecodeInstruction::ConstUInt8(dest, value) => {
            assert(dest.value == 256i32 && value == 255u8);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeConstString() {
    let writer = BytecodeBuilder();
    writer.emitConstString(BytecodeRegister(7i32), ConstPoolId(0i32));
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 3);

    match instructions(0).inst {
        BytecodeInstruction::ConstString(dest, idx) => {
            assert(dest.value == 7i32 && idx.value == 0i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeSubFloat32() {
    let writer = BytecodeBuilder();
    writer.emitSub(BytecodeRegister(2i32), BytecodeRegister(9i32), BytecodeRegister(255i32));
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 4);

    match instructions(0).inst {
        BytecodeInstruction::Sub(dest, lhs, rhs) => {
            assert(dest.value == 2i32 && lhs.value == 9i32 && rhs.value == 255i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeJumpBack() {
    let writer = BytecodeBuilder();
    let lbl = writer.defineLabel();
    writer.emitJumpLoop(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 2);

    match instructions(0).inst {
        BytecodeInstruction::JumpLoop(distance) => {
            assert(distance == 0i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeJumpBackWide() {
    let writer = BytecodeBuilder();
    let lbl = writer.defineLabel();
    var i = 0i32;
    while i < 256i32 {
        writer.emitRetVoid();
        i = i + 1i32;
    }
    writer.emitJumpLoop(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 257);
    assert(instructions(256).size == 6);

    match instructions(256).inst {
        BytecodeInstruction::JumpLoop(distance) => {
            assert(distance == 256i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeJump() {
    let writer = BytecodeBuilder();
    let lbl = writer.createLabel();
    writer.emitJump(lbl);
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 2);

    match instructions(0).inst {
        BytecodeInstruction::Jump(distance) => {
            assert(distance == 2i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeJumpFar() {
    let writer = BytecodeBuilder();
    let lbl = writer.createLabel();
    writer.emitJump(lbl);
    var i = 0i32;
    while i < 256i32 {
        writer.emitRetVoid();
        i = i + 1i32;
    }
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 257);
    assert(instructions(0).size == 2);

    match instructions(0).inst {
        BytecodeInstruction::JumpConst(idx) => {
            assert(idx == ConstPoolId(0i32));
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeCondJump() {
    let writer = BytecodeBuilder();
    let lbl = writer.createLabel();
    writer.emitJumpIfTrue(BytecodeRegister(9i32), lbl);
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 3);

    match instructions(0).inst {
        BytecodeInstruction::JumpIfTrue(opnd, distance) => {
            assert(opnd == BytecodeRegister(9i32) && distance == 3i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeCondJumpFar() {
    let writer = BytecodeBuilder();
    let lbl = writer.createLabel();
    writer.emitJumpIfFalse(BytecodeRegister(9i32), lbl);
    var i = 0i32;
    while i < 256i32 {
        writer.emitRetVoid();
        i = i + 1i32;
    }
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 257);
    assert(instructions(0).size == 3);

    match instructions(0).inst {
        BytecodeInstruction::JumpIfFalseConst(opnd, idx) => {
            assert(opnd == BytecodeRegister(9i32) && idx == ConstPoolId(0i32));
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeCondJumpWide() {
    let writer = BytecodeBuilder();
    let lbl = writer.createLabel();
    writer.emitJumpIfTrue(BytecodeRegister(256i32), lbl);
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 10);

    match instructions(0).inst {
        BytecodeInstruction::JumpIfTrue(opnd, distance) => {
            assert(opnd == BytecodeRegister(256i32) && distance == 10i32);
        },
        _ => unreachable[()]()
    }
}
