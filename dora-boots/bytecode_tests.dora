class TestRetVoidVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fn visitRetVoid() {
        self.found = true;
    }
}

@test fn testBytecodeRetVoid(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitRetVoid();
    let fct = writer.generate();
    let visitor = TestRetVoidVisitor();
    assert(fct.codeAt(0I) == BC_RET_VOID);
    assert(fct.code.size() == 1L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestRetIntVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fn visitRet(opnd: BytecodeRegister) {
        assert(opnd == BytecodeRegister(17I));
        self.found = true;
    }
}

@test fn testBytecodeRetInt(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitRet(BytecodeRegister(17I));
    let fct = writer.generate();
    let visitor = TestRetIntVisitor();
    assert(fct.codeAt(0I) == BC_RET);
    assert(fct.codeAt(1I) == 17I);
    assert(fct.code.size() == 2L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestRetWideVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fn visitRet(opnd: BytecodeRegister) {
        assert(opnd == BytecodeRegister(256I));
        self.found = true;
    }
}

@test fn testBytecodeRetWide(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitRet(BytecodeRegister(256I));
    let fct = writer.generate();
    let visitor = TestRetWideVisitor();
    assert(fct.codeAt(0I) == BC_WIDE);
    assert(fct.codeAt(1I) == BC_RET);
    assert(fct.codeInt32At(2I) == 256I);
    assert(fct.code.size() == 6L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestMovVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fn visitMov(dest: BytecodeRegister, src: BytecodeRegister) {
        assert(dest == BytecodeRegister(0I));
        assert(src == BytecodeRegister(1I));
        self.found = true;
    }
}

@test fn testBytecodeMov(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitMov(BytecodeRegister(0I), BytecodeRegister(1I));
    let fct = writer.generate();
    let visitor = TestMovVisitor();
    assert(fct.codeAt(0I) == BC_MOV);
    assert(fct.codeAt(1I) == 0I);
    assert(fct.codeAt(2I) == 1I);
    assert(fct.code.size() == 3L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestMovWideVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fn visitMov(dest: BytecodeRegister, src: BytecodeRegister) {
        assert(dest == BytecodeRegister(256I));
        assert(src == BytecodeRegister(255I));
        self.found = true;
    }
}

@test fn testBytecodeMovWide(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitMov(BytecodeRegister(256I), BytecodeRegister(255I));
    let fct = writer.generate();
    let visitor = TestMovWideVisitor();
    assert(fct.codeAt(0I) == BC_WIDE);
    assert(fct.codeAt(1I) == BC_MOV);
    assert(fct.codeInt32At(2I) == 256I);
    assert(fct.codeInt32At(6I) == 255I);
    assert(fct.code.size() == 10L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestConstByteVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fn visitConstUInt8(dest: BytecodeRegister, value: UInt8) {
        assert(dest == BytecodeRegister(255I));
        assert(value == 255Y);
        self.found = true;
    }
}

@test fn testBytecodeConstByte(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitConstByte(BytecodeRegister(255I), 255Y);
    let fct = writer.generate();
    let visitor = TestConstByteVisitor();
    assert(fct.codeAt(0I) == BC_CONST_UINT8);
    assert(fct.codeAt(1I) == 255I);
    assert(fct.codeAt(2I) == 255I);
    assert(fct.code.size() == 3L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestConstByteWideVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fn visitConstUInt8(dest: BytecodeRegister, value: UInt8) {
        assert(dest == BytecodeRegister(256I));
        assert(value == 255Y);
        self.found = true;
    }
}

@test fn testBytecodeConstByteWide(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitConstByte(BytecodeRegister(256I), 255Y);
    let fct = writer.generate();
    let visitor = TestConstByteWideVisitor();
    assert(fct.codeAt(0I) == BC_WIDE);
    assert(fct.codeAt(1I) == BC_CONST_UINT8);
    assert(fct.codeInt32At(2I) == 256I);
    assert(fct.codeAt(6I) == 255I);
    assert(fct.code.size() == 7L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestConstStringVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fn visitConstString(dest: BytecodeRegister, idx: ConstPoolId) {
        assert(dest == BytecodeRegister(7I));
        assert(idx == ConstPoolId(0I));
        self.found = true;
    }
}

@test fn testBytecodeConstString(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitConstString(BytecodeRegister(7I), "foo");
    let fct = writer.generate();
    let visitor = TestConstStringVisitor();
    assert(fct.codeAt(0I) == BC_CONST_STRING);
    assert(fct.codeAt(1I) == 7I);
    assert(fct.codeAt(2I) == 0I);
    assert(fct.code.size() == 3L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestSubFloat32Visitor: BytecodeVisitor {
    var found: Bool = false;

    @override fn visitSubFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        assert(dest == BytecodeRegister(2I));
        assert(lhs == BytecodeRegister(9I));
        assert(rhs == BytecodeRegister(255I));
        self.found = true;
    }
}

@test fn testBytecodeSubFloat32(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitSubFloat32(BytecodeRegister(2I), BytecodeRegister(9I), BytecodeRegister(255I));
    let fct = writer.generate();
    let visitor = TestSubFloat32Visitor();
    assert(fct.codeAt(0I) == BC_SUB_FLOAT32);
    assert(fct.codeAt(1I) == 2I);
    assert(fct.codeAt(2I) == 9I);
    assert(fct.codeAt(3I) == 255I);
    assert(fct.code.size() == 4L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestJumpBackVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fn visitJumpLoop(offset: Int32) {
        assert(offset == 0I);
        self.found = true;
    }
}

@test fn testBytecodeJumpBack(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.defineLabel();
    writer.emitJumpLoop(lbl);
    let fct = writer.generate();
    let visitor = TestJumpBackVisitor();
    assert(fct.codeAt(0I) == BC_JUMP_LOOP);
    assert(fct.codeAt(1I) == 0I);
    assert(fct.code.size() == 2L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestJumpBackWideVisitor: BytecodeVisitor {
    var found: Int32 = 0I;

    @override fn visitJumpLoop(offset: Int32) {
        assert(offset == 256I);
        self.found = self.found + 1I;
    }

    @override fn visitRetVoid() {
        self.found = self.found + 1I;
    }
}

@test fn testBytecodeJumpBackWide(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.defineLabel();
    var i = 0I;
    while i < 256I {
        writer.emitRetVoid();
        i = i + 1I;
    }
    writer.emitJumpLoop(lbl);
    let fct = writer.generate();
    let visitor = TestJumpBackWideVisitor();
    assert(fct.codeAt(0I) == BC_RET_VOID);
    assert(fct.codeAt(255I) == BC_RET_VOID);
    assert(fct.codeAt(256I) == BC_WIDE);
    assert(fct.codeAt(257I) == BC_JUMP_LOOP);
    assert(fct.codeInt32At(258I) == 256I);
    assert(fct.code.size() == 262L);
    readBytecode(fct.code, visitor);
    assert(visitor.found == 257I);
}

class TestJumpVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fn visitJump(offset: Int32) {
        assert(offset == 2I);
        self.found = true;
    }
}

@test fn testBytecodeJump(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.createLabel();
    writer.emitJump(lbl);
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let visitor = TestJumpVisitor();
    assert(fct.codeAt(0I) == BC_JUMP);
    assert(fct.codeAt(1I) == 2I);
    assert(fct.code.size() == 2L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestJumpFarVisitor: BytecodeVisitor {
    var found: Int32 = 0I;

    @override fn visitJumpConst(idx: ConstPoolId) {
        assert(idx == ConstPoolId(0I));
        self.found = self.found + 1I;
    }

    @override fn visitRetVoid() {
        self.found = self.found + 1I;
    }
}

@test fn testBytecodeJumpFar(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.createLabel();
    writer.emitJump(lbl);
    var i = 0I;
    while i < 256I {
        writer.emitRetVoid();
        i = i + 1I;
    }
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let visitor = TestJumpFarVisitor();
    assert(fct.codeAt(0I) == BC_JUMP_CONST);
    assert(fct.codeAt(1I) == 0I);
    assert(fct.code.size() == 258L);
    assert(fct.constPool(ConstPoolId(0I)).toInt32().getOrPanic() == 258I);
    readBytecode(fct.code, visitor);
    assert(visitor.found == 257I);
}

class TestCondJumpVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fn visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) {
        assert(opnd == BytecodeRegister(9I));
        assert(offset == 3I);
        self.found = true;
    }
}

@test fn testBytecodeCondJump(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.createLabel();
    writer.emitJumpIfTrue(BytecodeRegister(9I), lbl);
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let visitor = TestCondJumpVisitor();
    assert(fct.codeAt(0I) == BC_JUMP_IF_TRUE);
    assert(fct.codeAt(1I) == 9I);
    assert(fct.codeAt(2I) == 3I);
    assert(fct.code.size() == 3L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestCondJumpFarVisitor: BytecodeVisitor {
    var found: Int32 = 0I;

    @override fn visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        assert(opnd == BytecodeRegister(9I));
        assert(idx == ConstPoolId(0I));
        self.found = self.found + 1I;
    }

    @override fn visitRetVoid() {
        self.found = self.found + 1I;
    }
}

@test fn testBytecodeCondJumpFar(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.createLabel();
    writer.emitJumpIfFalse(BytecodeRegister(9I), lbl);
    var i = 0I;
    while i < 256I {
        writer.emitRetVoid();
        i = i + 1I;
    }
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let visitor = TestCondJumpFarVisitor();
    assert(fct.codeAt(0I) == BC_JUMP_IF_FALSE_CONST);
    assert(fct.codeAt(1I) == 9I);
    assert(fct.codeAt(2I) == 0I);
    assert(fct.codeAt(3I) == BC_RET_VOID);
    assert(fct.code.size() == 259L);
    assert(fct.constPool(ConstPoolId(0I)).toInt32().getOrPanic() == 259I);
    readBytecode(fct.code, visitor);
    assert(visitor.found == 257I);
}

class TestCondJumpWideVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fn visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) {
        assert(opnd == BytecodeRegister(256I));
        assert(offset == 10I);
        self.found = true;
    }
}

@test fn testBytecodeCondJumpWide(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.createLabel();
    writer.emitJumpIfTrue(BytecodeRegister(256I), lbl);
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let visitor = TestCondJumpWideVisitor();
    assert(fct.codeAt(0I) == BC_WIDE);
    assert(fct.codeAt(1I) == BC_JUMP_IF_TRUE);
    assert(fct.codeInt32At(2I) == 256I);
    assert(fct.codeInt32At(6I) == 10I);
    assert(fct.code.size() == 10L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}
