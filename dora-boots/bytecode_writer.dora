class BytecodeWriter {
    let code: Vec[UInt8] = Vec[UInt8]();
    let constPool: Vec[ConstPoolEntry] = Vec[ConstPoolEntry]();
    let registers: Vec[BytecodeType] = Vec[BytecodeType]();
    let unresolvedJumps: Vec[UnresolvedJump] = Vec[UnresolvedJump]();
    var arguments: Int = 0;

    fun addRegister(ty: BytecodeType) -> BytecodeRegister {
        self.registers.push(ty);
        BytecodeRegister(self.registers.length() - 1)
    }

    fun createLabel() -> BytecodeLabel {
        BytecodeLabel()
    }

    fun defineLabel() -> BytecodeLabel {
        BytecodeLabel().bindTo(self.code.length())
    }

    fun bindLabel(lbl: BytecodeLabel) {
        lbl.bindTo(self.code.length());
    }

    fun setArguments(arguments: Int) {
        self.arguments = arguments;
    }

    fun emitAddInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ADD_INT, dest, lhs, rhs);
    }

    fun emitAddInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ADD_INT64, dest, lhs, rhs);
    }

    fun emitAddFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ADD_FLOAT, dest, lhs, rhs);
    }

    fun emitAddDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ADD_DOUBLE, dest, lhs, rhs);
    }

    fun emitSubInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SUB_INT, dest, lhs, rhs);
    }

    fun emitSubInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SUB_INT64, dest, lhs, rhs);
    }

    fun emitSubFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SUB_FLOAT, dest, lhs, rhs);
    }

    fun emitSubDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SUB_DOUBLE, dest, lhs, rhs);
    }

    fun emitNegInt(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NEG_INT, dest, src);
    }

    fun emitNegInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NEG_INT64, dest, src);
    }

    fun emitNegFloat(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NEG_FLOAT, dest, src);
    }

    fun emitNegDouble(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NEG_DOUBLE, dest, src);
    }

    fun emitMulInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SUB_INT, dest, lhs, rhs);
    }

    fun emitMulInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SUB_INT64, dest, lhs, rhs);
    }

    fun emitMulFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SUB_FLOAT, dest, lhs, rhs);
    }

    fun emitMulDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SUB_DOUBLE, dest, lhs, rhs);
    }

    fun emitDivInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_DIV_INT, dest, lhs, rhs);
    }

    fun emitDivInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_DIV_INT64, dest, lhs, rhs);
    }

    fun emitDivFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_DIV_FLOAT, dest, lhs, rhs);
    }

    fun emitDivDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_DIV_DOUBLE, dest, lhs, rhs);
    }

    fun emitModInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_MOD_INT, dest, lhs, rhs);
    }

    fun emitModInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_MOD_INT64, dest, lhs, rhs);
    }

    fun emitAndInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_AND_INT, dest, lhs, rhs);
    }

    fun emitAndInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_AND_INT64, dest, lhs, rhs);
    }

    fun emitOrInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_OR_INT, dest, lhs, rhs);
    }

    fun emitOrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_OR_INT64, dest, lhs, rhs);
    }

    fun emitXorInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_XOR_INT, dest, lhs, rhs);
    }

    fun emitXorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_XOR_INT64, dest, lhs, rhs);
    }

    fun emitNotBool(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NOT_BOOL, dest, src);
    }

    fun emitNotInt(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NOT_INT, dest, src);
    }

    fun emitNotInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NOT_INT64, dest, src);
    }

    fun emitShlInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SHL_INT, dest, lhs, rhs);
    }

    fun emitShrInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SHR_INT, dest, lhs, rhs);
    }

    fun emitSarInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SAR_INT, dest, lhs, rhs);
    }

    fun emitShlInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SHL_INT64, dest, lhs, rhs);
    }

    fun emitShrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SHR_INT64, dest, lhs, rhs);
    }

    fun emitSarInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SAR_INT64, dest, lhs, rhs);
    }

    fun emitRolInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ROL_INT, dest, lhs, rhs);
    }

    fun emitRorInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ROR_INT, dest, lhs, rhs);
    }

    fun emitRolInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ROL_INT64, dest, lhs, rhs);
    }

    fun emitRorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ROR_INT64, dest, lhs, rhs);
    }

    fun emitReinterpretFloatAsInt(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_REINTERPRET_FLOAT_AS_INT, dest, src);
    }

    fun emitReinterpretIntAsFloat(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_REINTERPRET_INT_AS_FLOAT, dest, src);
    }

    fun emitReinterpretDoubleAsInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_REINTERPRET_DOUBLE_AS_INT64, dest, src);
    }

    fun emitReinterpretInt64AsDouble(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_REINTERPRET_INT64_AS_DOUBLE, dest, src);
    }

    fun emitExtendByteToChar(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_EXTEND_UINT8_TO_CHAR, dest, src);
    }

    fun emitExtendByteToInt(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_EXTEND_UINT8_TO_INT, dest, src);
    }

    fun emitExtendByteToInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_EXTEND_UINT8_TO_INT64, dest, src);
    }

    fun emitExtendIntToInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_EXTEND_INT_TO_INT64, dest, src);
    }

    fun emitExtendCharToInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_EXTEND_CHAR_TO_INT64, dest, src);
    }

    fun emitCastCharToInt(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CAST_CHAR_TO_INT, dest, src);
    }

    fun emitCastInttoUInt8(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CAST_INT_TO_UINT8, dest, src);
    }

    fun emitCastIntToChar(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CAST_INT_TO_CHAR, dest, src);
    }

    fun emitCastInt64toUInt8(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CAST_INT64_TO_UINT8, dest, src);
    }

    fun emitCastInt64ToChar(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CAST_INT64_TO_CHAR, dest, src);
    }

    fun emitCastInt64ToInt(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CAST_INT64_TO_INT, dest, src);
    }

    fun emitConvertIntToFloat(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CONVERT_INT_TO_FLOAT, dest, src);
    }

    fun emitConvertIntToDouble(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CONVERT_INT_TO_DOUBLE, dest, src);
    }

    fun emitConvertInt64ToFloat(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CONVERT_INT64_TO_FLOAT, dest, src);
    }

    fun emitConvertInt64ToDouble(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CONVERT_INT64_TO_DOUBLE, dest, src);
    }

    fun emitTruncateFloatToInt(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_TRUNCATE_FLOAT_TO_INT, dest, src);
    }

    fun emitTruncateFloatToInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_TRUNCATE_FLOAT_TO_INT64, dest, src);
    }

    fun emitTruncateDoubleToInt(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_TRUNCATE_DOUBLE_TO_INT, dest, src);
    }

    fun emitTruncateDoubleToInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_TRUNCATE_DOUBLE_TO_INT64, dest, src);
    }

    fun emitInstanceOf(dest: BytecodeRegister, src: BytecodeRegister, cls: ClassDefId) {
        self.emitReg2AndCls(BC_INSTANCE_OF, dest, src, cls);
    }

    fun emitCheckedCast(src: BytecodeRegister, cls: ClassDefId) {
        self.emitReg1AndCls(BC_CHECKED_CAST, src, cls);
    }

    fun emitMovBool(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_BOOL, dest, src);
    }

    fun emitMovByte(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_UINT8, dest, src);
    }

    fun emitMovChar(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_CHAR, dest, src);
    }

    fun emitMovInt(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_INT, dest, src);
    }

    fun emitMovInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_INT64, dest, src);
    }

    fun emitMovFloat(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_FLOAT, dest, src);
    }

    fun emitMovDouble(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_DOUBLE, dest, src);
    }

    fun emitMovPtr(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_PTR, dest, src);
    }

    fun emitLoadFieldBool(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_BOOL, dest, obj, cls, field);
    }

    fun emitLoadFieldByte(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_UINT8, dest, obj, cls, field);
    }

    fun emitLoadFieldChar(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_CHAR, dest, obj, cls, field);
    }

    fun emitLoadFieldInt(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_INT, dest, obj, cls, field);
    }

    fun emitLoadFieldInt64(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_INT64, dest, obj, cls, field);
    }

    fun emitLoadFieldFloat(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_FLOAT, dest, obj, cls, field);
    }

    fun emitLoadFieldDouble(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_DOUBLE, dest, obj, cls, field);
    }

    fun emitLoadFieldPtr(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_PTR, dest, obj, cls, field);
    }

    fun emitStoreFieldBool(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_BOOL, src, obj, cls, field);
    }

    fun emitStoreFieldByte(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_UINT8, src, obj, cls, field);
    }

    fun emitStoreFieldChar(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_CHAR, src, obj, cls, field);
    }

    fun emitStoreFieldInt(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_INT, src, obj, cls, field);
    }

    fun emitStoreFieldInt64(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_INT64, src, obj, cls, field);
    }

    fun emitStoreFieldFloat(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_FLOAT, src, obj, cls, field);
    }

    fun emitStoreFieldDouble(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_DOUBLE, src, obj, cls, field);
    }

    fun emitStoreFieldPtr(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_PTR, src, obj, cls, field);
    }

    fun emitLoadGlobalBool(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_BOOL, dest, glob);
    }

    fun emitLoadGlobalByte(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_UINT8, dest, glob);
    }

    fun emitLoadGlobalChar(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_CHAR, dest, glob);
    }

    fun emitLoadGlobalInt(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_INT, dest, glob);
    }

    fun emitLoadGlobalInt64(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_INT64, dest, glob);
    }

    fun emitLoadGlobalFloat(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_FLOAT, dest, glob);
    }

    fun emitLoadGlobalDouble(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_DOUBLE, dest, glob);
    }

    fun emitLoadGlobalPtr(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_PTR, dest, glob);
    }

    fun emitStoreGlobalBool(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_BOOL, src, glob);
    }

    fun emitStoreGlobalByte(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_UINT8, src, glob);
    }

    fun emitStoreGlobalChar(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_CHAR, src, glob);
    }

    fun emitStoreGlobalInt(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_INT, src, glob);
    }

    fun emitStoreGlobalInt64(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_INT64, src, glob);
    }

    fun emitStoreGlobalFloat(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_FLOAT, src, glob);
    }

    fun emitStoreGlobalDouble(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_DOUBLE, src, glob);
    }

    fun emitStoreGlobalPtr(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_PTR, src, glob);
    }

    fun emitPushRegister(src: BytecodeRegister) {
        self.emitReg1(BC_PUSH_REGISTER, src);
    }

    fun emitConstNil(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_NIL, dest);
    }

    fun emitConstTrue(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_TRUE, dest);
    }

    fun emitConstFalse(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_FALSE, dest);
    }

    fun emitConstZeroByte(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_ZERO_UINT8, dest);
    }

    fun emitConstZeroChar(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_ZERO_CHAR, dest);
    }

    fun emitConstZeroInt(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_ZERO_INT, dest);
    }

    fun emitConstZeroInt64(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_ZERO_INT64, dest);
    }

    fun emitConstZeroFloat(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_ZERO_FLOAT, dest);
    }

    fun emitConstZeroDouble(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_ZERO_DOUBLE, dest);
    }

    fun emitConstByte(dest: BytecodeRegister, value: UInt8) {
        self.emitReg1AndByte(BC_CONST_UINT8, dest, value);
    }

    fun emitConstChar(dest: BytecodeRegister, value: Char) {
        let idx = self.addConst(ConstPoolChar(value));
        self.emitReg1AndIdx(BC_CONST_CHAR, dest, idx);
    }

    fun emitConstInt(dest: BytecodeRegister, value: Int) {
        let idx = self.addConst(ConstPoolInt(value));
        self.emitReg1AndIdx(BC_CONST_INT, dest, idx);
    }

    fun emitConstInt64(dest: BytecodeRegister, value: Int64) {
        let idx = self.addConst(ConstPoolInt64(value));
        self.emitReg1AndIdx(BC_CONST_INT64, dest, idx);
    }

    fun emitConstFloat(dest: BytecodeRegister, value: Float) {
        let idx = self.addConst(ConstPoolFloat(value));
        self.emitReg1AndIdx(BC_CONST_FLOAT, dest, idx);
    }

    fun emitConstDouble(dest: BytecodeRegister, value: Double) {
        let idx = self.addConst(ConstPoolDouble(value));
        self.emitReg1AndIdx(BC_CONST_DOUBLE, dest, idx);
    }

    fun emitConstString(dest: BytecodeRegister, value: String) {
        let idx = self.addConst(ConstPoolString(value));
        self.emitReg1AndIdx(BC_CONST_STRING, dest, idx);
    }

    fun emitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_PTR, dest, lhs, rhs);
    }

    fun emitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_PTR, dest, lhs, rhs);
    }

    fun emitTestEqBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_BOOL, dest, lhs, rhs);
    }

    fun emitTestNeBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_BOOL, dest, lhs, rhs);
    }

    fun emitTestEqByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_UINT8, dest, lhs, rhs);
    }

    fun emitTestNeByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_UINT8, dest, lhs, rhs);
    }

    fun emitTestGtByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GT_UINT8, dest, lhs, rhs);
    }

    fun emitTestGeByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GE_UINT8, dest, lhs, rhs);
    }

    fun emitTestLtByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LT_UINT8, dest, lhs, rhs);
    }

    fun emitTestLeByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LE_UINT8, dest, lhs, rhs);
    }

    fun emitTestEqChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_CHAR, dest, lhs, rhs);
    }

    fun emitTestNeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_CHAR, dest, lhs, rhs);
    }

    fun emitTestGtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GT_CHAR, dest, lhs, rhs);
    }

    fun emitTestGeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GE_CHAR, dest, lhs, rhs);
    }

    fun emitTestLtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LT_CHAR, dest, lhs, rhs);
    }

    fun emitTestLeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LE_CHAR, dest, lhs, rhs);
    }

    fun emitTestEqEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_ENUM, dest, lhs, rhs);
    }

    fun emitTestNeEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_ENUM, dest, lhs, rhs);
    }

    fun emitTestEqInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_INT, dest, lhs, rhs);
    }

    fun emitTestNeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_INT, dest, lhs, rhs);
    }

    fun emitTestGtInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GT_INT, dest, lhs, rhs);
    }

    fun emitTestGeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GE_INT, dest, lhs, rhs);
    }

    fun emitTestLtInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LT_INT, dest, lhs, rhs);
    }

    fun emitTestLeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LE_INT, dest, lhs, rhs);
    }

    fun emitTestEqInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_INT64, dest, lhs, rhs);
    }

    fun emitTestNeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_INT64, dest, lhs, rhs);
    }

    fun emitTestGtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GT_INT64, dest, lhs, rhs);
    }

    fun emitTestGeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GE_INT64, dest, lhs, rhs);
    }

    fun emitTestLtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LT_INT64, dest, lhs, rhs);
    }

    fun emitTestLeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LE_INT64, dest, lhs, rhs);
    }

    fun emitTestEqFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_FLOAT, dest, lhs, rhs);
    }

    fun emitTestNeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_FLOAT, dest, lhs, rhs);
    }

    fun emitTestGtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GT_FLOAT, dest, lhs, rhs);
    }

    fun emitTestGeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GE_FLOAT, dest, lhs, rhs);
    }

    fun emitTestLtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LT_FLOAT, dest, lhs, rhs);
    }

    fun emitTestLeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LE_FLOAT, dest, lhs, rhs);
    }

    fun emitTestEqDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_DOUBLE, dest, lhs, rhs);
    }

    fun emitTestNeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_DOUBLE, dest, lhs, rhs);
    }

    fun emitTestGtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GT_DOUBLE, dest, lhs, rhs);
    }

    fun emitTestGeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GE_DOUBLE, dest, lhs, rhs);
    }

    fun emitTestLtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LT_DOUBLE, dest, lhs, rhs);
    }

    fun emitTestLeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LE_DOUBLE, dest, lhs, rhs);
    }

    fun emitAssert(value: BytecodeRegister) {
        self.emitReg1(BC_ASSERT, value);
    }

    fun emitJumpLoop(lbl: BytecodeLabel) {
        assert(lbl.isBound());
        let offset = self.code.length() - lbl.offset();
        self.emitJmp(BC_JUMP_LOOP, offset);
    }

    fun emitJumpIfFalse(opnd: BytecodeRegister, lbl: BytecodeLabel) {
        assert(!lbl.isBound());
        self.emitJmpForward(BC_JUMP_IF_FALSE, BC_JUMP_IF_FALSE_CONST, some[BytecodeRegister](opnd), lbl);
    }

    fun emitJumpIfTrue(opnd: BytecodeRegister, lbl: BytecodeLabel) {
        assert(!lbl.isBound());
        self.emitJmpForward(BC_JUMP_IF_TRUE, BC_JUMP_IF_TRUE_CONST, some[BytecodeRegister](opnd), lbl);
    }

    fun emitJump(lbl: BytecodeLabel) {
        assert(!lbl.isBound());
        self.emitJmpForward(BC_JUMP, BC_JUMP_CONST, none[BytecodeRegister](), lbl);
    }

    fun emitInvokeDirectVoid(fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFctVoid(BC_INVOKE_DIRECT_VOID, fct, start, count);
    }

    fun emitInvokeDirectBool(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_DIRECT_BOOL, dest, fct, start, count);
    }

    fun emitInvokeDirectByte(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_DIRECT_UINT8, dest, fct, start, count);
    }

    fun emitInvokeDirectChar(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_DIRECT_CHAR, dest, fct, start, count);
    }

    fun emitInvokeDirectInt(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_DIRECT_INT, dest, fct, start, count);
    }

    fun emitInvokeDirectInt64(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_DIRECT_INT64, dest, fct, start, count);
    }

    fun emitInvokeDirectFloat(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_DIRECT_FLOAT, dest, fct, start, count);
    }

    fun emitInvokeDirectDouble(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_DIRECT_DOUBLE, dest, fct, start, count);
    }

    fun emitInvokeDirectPtr(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_DIRECT_PTR, dest, fct, start, count);
    }

    fun emitInvokeVirtualVoid(fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFctVoid(BC_INVOKE_VIRTUAL_VOID, fct, start, count);
    }

    fun emitInvokeVirtualBool(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_VIRTUAL_BOOL, dest, fct, start, count);
    }

    fun emitInvokeVirtualByte(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_VIRTUAL_UINT8, dest, fct, start, count);
    }

    fun emitInvokeVirtualChar(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_VIRTUAL_CHAR, dest, fct, start, count);
    }

    fun emitInvokeVirtualInt(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_VIRTUAL_INT, dest, fct, start, count);
    }

    fun emitInvokeVirtualInt64(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_VIRTUAL_INT64, dest, fct, start, count);
    }

    fun emitInvokeVirtualFloat(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_VIRTUAL_FLOAT, dest, fct, start, count);
    }

    fun emitInvokeVirtualDouble(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_VIRTUAL_DOUBLE, dest, fct, start, count);
    }

    fun emitInvokeVirtualPtr(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_VIRTUAL_PTR, dest, fct, start, count);
    }

    fun emitInvokeStaticVoid(fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFctVoid(BC_INVOKE_STATIC_VOID, fct, start, count);
    }

    fun emitInvokeStaticBool(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_STATIC_BOOL, dest, fct, start, count);
    }

    fun emitInvokeStaticByte(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_STATIC_UINT8, dest, fct, start, count);
    }

    fun emitInvokeStaticChar(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_STATIC_CHAR, dest, fct, start, count);
    }

    fun emitInvokeStaticInt(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_STATIC_INT, dest, fct, start, count);
    }

    fun emitInvokeStaticInt64(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_STATIC_INT64, dest, fct, start, count);
    }

    fun emitInvokeStaticFloat(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_STATIC_FLOAT, dest, fct, start, count);
    }

    fun emitInvokeStaticDouble(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_STATIC_DOUBLE, dest, fct, start, count);
    }

    fun emitInvokeStaticPtr(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitFct(BC_INVOKE_STATIC_PTR, dest, fct, start, count);
    }

    fun emitNewObject(dest: BytecodeRegister, cls: ClassDefId) {
        self.emitVal3(BC_NEW_OBJECT, dest.value, cls.value);
    }

    fun emitRetVoid() {
        self.emitInst(BC_RET_VOID);
    }

    fun emitRetBool(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_BOOL, opnd);
    }

    fun emitRetByte(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_UINT8, opnd);
    }

    fun emitRetChar(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_CHAR, opnd);
    }

    fun emitRetInt(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_INT, opnd);
    }

    fun emitRetInt64(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_INT64, opnd);
    }

    fun emitRetFloat(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_FLOAT, opnd);
    }

    fun emitRetDouble(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_DOUBLE, opnd);
    }

    fun emitRetPtr(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_PTR, opnd);
    }

    fun generate() -> BytecodeFunction {
        self.resolveJumps();
        let code = self.code.toArray();
        let constPool = self.constPool.toArray();
        let registers = self.registers.toArray();
        let arguments = self.arguments;
        assert(arguments <= registers.length());
        BytecodeFunction(code, constPool, registers, arguments)
    }

    fun resolveJumps() {
        var i = 0;

        while i < self.unresolvedJumps.length() {
            let jump = self.unresolvedJumps.get(i);
            assert(jump.label.isBound());

            assert(jump.label.offset() > jump.inst);
            let offset = jump.label.offset() - jump.inst;

            let opcode = self.code.get(jump.inst).toInt();

            if opcode == BC_WIDE {
                // wide is guaranteed to not use constant pool
                self.patchInt(jump.target, offset);
            } else if isWide(offset) {
                // Need to update const pool entry
                let idx = self.code.get(jump.target).toInt();
                self.constPool.set(idx, ConstPoolInt(offset));
            } else {
                // Offset fits into byte, replace instruction with jump+immediate
                let opcode = if opcode == BC_JUMP_CONST {
                    BC_JUMP
                } else if opcode == BC_JUMP_IF_FALSE_CONST {
                    BC_JUMP_IF_FALSE
                } else if opcode == BC_JUMP_IF_TRUE_CONST {
                    BC_JUMP_IF_TRUE
                } else {
                    fatalError("unexpected opcode ${bytecodeName(opcode)} (${opcode})");
                    -1
                };

                self.code.set(jump.inst, opcode.toUInt8());
                self.code.set(jump.target, offset.toUInt8());
            }

            i = i + 1;
        }
    }

    fun emitFctVoid(inst: Int, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitVal4(inst, fct.value, start.value, count);
    }

    fun emitFct(inst: Int, dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int) {
        self.emitVal5(inst, dest.value, fct.value, start.value, count);
    }

    fun emitJmp(inst: Int, offset: Int) {
        self.emitVal2(inst, offset);
    }

    fun emitJmpForward(inst: Int, instConst: Int, opnd: Option[BytecodeRegister], lbl: BytecodeLabel) {
        assert(!isWide(inst));
        assert(!isWide(instConst));
        let start = self.code.length();
        var target: Int = 0;

        if (opnd.isSome() && isWide(opnd.unwrap().value)) || isWide(self.constPool.length()) {
            self.emitWide();
            self.emitOpcode(inst);
            if opnd.isSome() {
                self.emitInt(opnd.unwrap().value);
            }
            target = self.code.length();
            self.emitInt(0);
        } else {
            self.emitOpcode(instConst);
            if opnd.isSome() {
                self.emitByte(opnd.unwrap().value);
            }
            let idx = self.addConst(ConstPoolInt(0));
            target = self.code.length();
            self.emitByte(idx.value);
        }

        self.unresolvedJumps.push(UnresolvedJump(start, target, lbl));
    }

    fun emitInst(inst: Int) {
        self.emitVal1(inst);
    }

    fun addConst(entry: ConstPoolEntry) -> ConstPoolId {
        self.constPool.push(entry);
        ConstPoolId(self.constPool.length() - 1)
    }

    fun emitReg1(inst: Int, r1: BytecodeRegister) {
        self.emitVal2(inst, r1.value);
    }

    fun emitReg1AndIdx(inst: Int, r1: BytecodeRegister, idx: ConstPoolId) {
        self.emitVal3(inst, r1.value, idx.value);
    }

    fun emitReg1AndByte(inst: Int, r1: BytecodeRegister, offset: UInt8) {
        self.emitVal2(inst, r1.value);
        self.emitByte(offset.toInt());
    }

    fun emitReg1AndCls(inst: Int, r1: BytecodeRegister, cls: ClassDefId) {
        self.emitVal3(inst, r1.value, cls.value);
    }

    fun emitReg2(inst: Int, r1: BytecodeRegister, r2: BytecodeRegister) {
        self.emitVal3(inst, r1.value, r2.value);
    }

    fun emitReg2AndCls(inst: Int, r1: BytecodeRegister, r2: BytecodeRegister, cls: ClassDefId) {
        self.emitVal4(inst, r1.value, r2.value, cls.value);
    }

    fun emitReg3(inst: Int, r1: BytecodeRegister, r2: BytecodeRegister, r3: BytecodeRegister) {
        self.emitVal4(inst, r1.value, r2.value, r3.value);
    }

    fun emitGlobal(inst: Int, r1: BytecodeRegister, glob: GlobalId) {
        self.emitVal3(inst, r1.value, glob.value);
    }

    fun emitField(
        inst: Int,
        r1: BytecodeRegister,
        r2: BytecodeRegister,
        cls: ClassDefId,
        field: FieldId,
    ) {
        self.emitVal5(inst, r1.value, r2.value, cls.value, field.value);
    }

    fun emitVal1(opcode: Int) {
        self.emitOpcode(opcode);
    }

    fun emitVal2(opcode: Int, v1: Int) {
        if isWide(v1) {
            self.emitWide();
            self.emitOpcode(opcode);
            self.emitInt(v1);
        } else {
            self.emitOpcode(opcode);
            self.emitByte(v1);
        }
    }

    fun emitVal3(opcode: Int, v1: Int, v2: Int) {
        if isWide(v1) || isWide(v2) {
            self.emitWide();
            self.emitOpcode(opcode);
            self.emitInt(v1);
            self.emitInt(v2);
        } else {
            self.emitOpcode(opcode);
            self.emitByte(v1);
            self.emitByte(v2);
        }
    }

    fun emitVal4(opcode: Int, v1: Int, v2: Int, v3: Int) {
        if isWide(v1) || isWide(v2) || isWide(v3) {
            self.emitWide();
            self.emitOpcode(opcode);
            self.emitInt(v1);
            self.emitInt(v2);
            self.emitInt(v3);
        } else {
            self.emitOpcode(opcode);
            self.emitByte(v1);
            self.emitByte(v2);
            self.emitByte(v3);
        }
    }

    fun emitVal5(opcode: Int, v1: Int, v2: Int, v3: Int, v4: Int) {
        if isWide(v1) || isWide(v2) || isWide(v3) || isWide(v4) {
            self.emitWide();
            self.emitOpcode(opcode);
            self.emitInt(v1);
            self.emitInt(v2);
            self.emitInt(v3);
            self.emitInt(v4);
        } else {
            self.emitOpcode(opcode);
            self.emitByte(v1);
            self.emitByte(v2);
            self.emitByte(v3);
            self.emitByte(v4);
        }
    }

    fun emitWide() {
        self.emitByte(BC_WIDE);
    }

    fun emitOpcode(opcode: Int) {
        if opcode >= 255 {
            self.emitByte(255);
            assert(opcode < 512);
            self.emitByte(opcode - 255);
        } else {
            self.emitByte(opcode);
        }
    }

    fun emitByte(val: Int) {
        assert(val >= 0 && val <= 255);
        self.code.push(val.toUInt8());
    }

    fun emitInt(val: Int) {
        assert(val >= 0);
        self.emitByte(val & 0xFF);
        self.emitByte((val >>> 8) & 0xFF);
        self.emitByte((val >>> 16) & 0xFF);
        self.emitByte((val >>> 24) & 0xFF);
    }

    fun patchInt(idx: Int, val: Int) {
        assert(val >= 0);
        self.code.set(idx, (val & 0xFF).toUInt8());
        self.code.set(idx + 1, ((val >>> 8) & 0xFF).toUInt8());
        self.code.set(idx + 2 , ((val >>> 16) & 0xFF).toUInt8());
        self.code.set(idx + 3, ((val >>> 24) & 0xFF).toUInt8());
    }
}

fun isWide(val: Int) -> Bool {
    val > 255
}

class BytecodeLabel {
    var off: Int = -1;

    fun bindTo(offset: Int) -> BytecodeLabel {
        assert(offset >= 0);
        self.off = offset;
        self
    }

    fun isBound() -> Bool {
        self.off >= 0
    }

    fun offset() -> Int {
        assert(self.isBound());
        self.off
    }
}

class UnresolvedJump(let inst: Int, let target: Int, let label: BytecodeLabel)
