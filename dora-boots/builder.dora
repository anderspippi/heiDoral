class GraphBuilder {
    let graph: Graph = Graph();
    var current_block: Block = Block(self.graph);

    fun create_block() -> Block {
        return self.graph.create_block();
    }

    fun create_return(value: Inst) -> Inst {
        return self.create_inst(ReturnInst(value));
    }

    fun create_return_void() -> Inst {
        return self.create_inst(ReturnVoidInst());
    }

    fun create_goto(block: Block) -> Inst {
        return self.create_inst(GotoInst(block));
    }

    fun create_cond(cond: Inst, true_succ: Block, false_succ: Block) -> Inst {
        return self.create_inst(CondInst(cond, true_succ, false_succ));
    }

    fun create_bin(op: BinOp, lhs: Inst, rhs: Inst) -> Inst {
        return self.create_inst(BinaryInst(op, lhs, rhs));
    }

    fun create_un(op: UnOp, opnd: Inst) -> Inst {
        return self.create_inst(UnaryInst(op, opnd));
    }

    fun create_arg(idx: Int) -> Inst {
        return self.create_inst(ArgInst(idx));
    }

    fun create_inst(inst: Inst) -> Inst {
        return self.current_block.append_inst(inst);
    }

    fun select_block(block: Block) {
        self.current_block = block;
    }

    fun current_block() -> Block {
        return self.current_block;
    }

    fun append(inst: Inst) {
        self.current_block.append_inst(inst);
    }
}

@test fun simpleGraph(x: Testing) {
    let builder = GraphBuilder();
    builder.append(ReturnVoidInst());
}