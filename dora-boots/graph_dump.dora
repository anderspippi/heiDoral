fun dumpGraph(graph: Graph) -> String {
    GraphDumper(graph).dump()
}

class GraphDumper(let graph: Graph) {
    let buffer: StringBuffer = StringBuffer();

    fun dump() -> String {
        let iter = self.graph.blocks.makeIterator();

        while iter.hasNext() {
            let block = iter.next();
            self.dumpBlock(block);
        }

        self.buffer.toString()
    }

    fun dumpBlock(block: Block) {
        self.buffer.append("Block ${block.id}:");

        if !block.predecessors.isEmpty() {
            self.buffer.append(" pred = [");
            var first: Bool = true;

            let it = block.predecessors.makeIterator();
            while it.hasNext() {
                let pred = it.next();

                if first {
                    self.buffer.append("${pred.id}");
                } else {
                    self.buffer.append(", ${pred.id}");
                }

                first = false;
            }

            self.buffer.append("]");
        }

        if !block.successors.isEmpty() {
            self.buffer.append(" succ = [");
            var first: Bool = true;

            let it = block.successors.makeIterator();
            while it.hasNext() {
                let succ = it.next();

                if first {
                    self.buffer.append("${succ.id}");
                } else {
                    self.buffer.append(", ${succ.id}");
                }

                first = false;
            }

            self.buffer.append("]");
        }

        self.buffer.appendNewline();

        let iter = InstIterator(block);
        while iter.hasNext() {
            let inst = iter.next();
            self.dumpInst(inst);
        }
    }

    fun dumpInst(inst: Inst) {
        self.buffer.append("  ${inst.id}: ${inst.dumpName()}");

        if !inst.inputs.isEmpty() {
            let it = inst.inputs.makeIterator();
            var first = true;

            while it.hasNext() {
                let inp = it.next();

                if first {
                    self.buffer.append(" ${inp.value.id}");
                } else {
                    self.buffer.append(", ${inp.value.id}");
                }

                first = false;
            }
        }

        if inst.hasUses() {
            var current = inst.useListHead;

            self.buffer.append(" [");

            while current.isSome() {
                let c = current.unwrap();

                self.buffer.append("${c.usedBy.id}");
                current = c.nextUse;
            }

            self.buffer.append("]");
        }

        self.buffer.appendNewline();
    }
}

fun assertGraph(graph: Graph, output: String) {
    let graphOutput = dumpGraph(graph);

    if !compareStrings(graphOutput, output) {
        println("expected: \"${graphOutput}\"");
        println("expected: \"${output}\"");

        for idx in range(0, graphOutput.length()) {
            let value = graphOutput.getByte(idx);
            print("${value.toInt().toStringHex()} ");
        }

        println("");

        for idx in range(0, output.length()) {
            let value = output.getByte(idx);
            print("${value.toInt().toStringHex()} ");
        }

        println("");

        fatalError("output does not match");
    }
}

fun compareStrings(lhs: String, rhs: String) -> Bool {
    var lhsIdx = 0;
    var rhsIdx = 0;

    while true {
        if lhs.length() == lhsIdx && rhs.length() == rhsIdx {
            return true;
        } else if lhs.length() == lhsIdx || rhs.length() == rhsIdx {
            return false;
        }

        var lhsByte = lhs.getByte(lhsIdx);

        if lhsByte == 0xDY && lhsIdx + 1 < lhs.length() && lhs.getByte(lhsIdx + 1) == 0xAY {
            lhsByte = 0xAY;
            lhsIdx = lhsIdx + 1;
        }

        var rhsByte = rhs.getByte(rhsIdx);

        if rhsByte == 0xDY && rhsIdx + 1 < rhs.length() && rhs.getByte(rhsIdx + 1) == 0xAY {
            rhsByte = 0xAY;
            rhsIdx = rhsIdx + 1;
        }

        if lhsByte != rhsByte {
            return false;
        }

        lhsIdx = lhsIdx + 1;
        rhsIdx = rhsIdx + 1;
    }

    false
}
