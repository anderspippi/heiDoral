enum Type {
    Unit,
    Bool,
    UInt8,
    Char,
    Int32,
    Int64,
    Float32,
    Float64,
    Ptr,
}

impl Type {
    fun isUnit(): Bool {
        match self {
            Type::Unit => true,
            _ => false,
        }
    }

    fun isUInt8(): Bool {
        match self {
            Type::UInt8 => true,
            _ => false,
        }
    }

    fun isInt32(): Bool {
        match self {
            Type::Int32 => true,
            _ => false,
        }
    }

    fun isInt64(): Bool {
        match self {
            Type::Int64 => true,
            _ => false,
        }
    }

    fun isFloat32(): Bool {
        match self {
            Type::Float32 => true,
            _ => false,
        }
    }

    fun isFloat64(): Bool {
        match self {
            Type::Float64 => true,
            _ => false,
        }
    }

    fun isPtr(): Bool {
        match self {
            Type::Ptr => true,
            _ => false,
        }
    }

    @static fun unit(): Type { Type::Unit }
    @static fun bool(): Type { Type::Bool }
    @static fun uint8(): Type { Type::UInt8 }
    @static fun char(): Type { Type::Char }
    @static fun int32(): Type { Type::Int32 }
    @static fun int64(): Type { Type::Int64 }
    @static fun float32(): Type { Type::Float32 }
    @static fun float64(): Type { Type::Float64 }
    @static fun ptr(): Type { Type::Ptr }

    @static fun fromBytecodeType(ty: BytecodeType): Type {
        if ty.isBool() {
            Type::Bool
        } else if ty.isUInt8() {
            Type::UInt8
        } else if ty.isChar() {
            Type::Char
        } else if ty.isInt32() {
            Type::Int32
        } else if ty.isInt64() {
            Type::Int64
        } else if ty.isFloat32() {
            Type::Float32
        } else if ty.isFloat64() {
            Type::Float64
        } else if ty.isPtr() {
            Type::Ptr
        } else {
            unreachable[Type]()
        }
    }
}

impl Stringable for Type {
    fun toString(): String {
        match self {
            Type::Unit => "Unit",
            Type::Bool => "Bool",
            Type::UInt8 => "UInt8",
            Type::Char => "Char",
            Type::Int32 => "Int32",
            Type::Int64 => "Int64",
            Type::Float32 => "Float32",
            Type::Float64 => "Float64",
            Type::Ptr => "Ptr",
        }
    }
}
