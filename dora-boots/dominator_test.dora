fun assertDominatedBlocks(fct: BytecodeFunction, idoms: Int32...) {
    let graph = createGraph(fct);
    graph.buildDominatorTree();
    var idomsIdx = 0I;
    var idx = 1I; // Block with id 0 is entry block

    assert(graph.getEntryBlock().getDominator().isNone());

    while idomsIdx < idoms.length().toInt32() {
        let dominatorId = idoms(idomsIdx.toInt());
        let block = graph.getBlockWithId(idx);

        let dominator = block.getDominator();

        if dominator.isNone() {
            println("block ${idx}: missing dominator, expected ${dominatorId}");
        } else if dominator.unwrap().id != dominatorId {
            println("block ${idx}: idom is ${dominator.unwrap().id}, expected ${dominatorId}");
            println(dumpGraph(graph));
        }

        assert(dominator.unwrap().id == dominatorId);
        idx = idx + 1I;
        idomsIdx = idomsIdx + 1I;
    }
}

@test fun testDominatorRetVoid(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitRetVoid();
    let fct = writer.generate();

    assertDominatedBlocks(fct, 2I, 0I);
}

@test fun testDominatorEmptyBlocks(_x: Testing) {
    let writer = BytecodeWriter();
    let next = writer.createLabel();
    writer.emitJump(next);
    writer.bindLabel(next);
    let next = writer.createLabel();
    writer.emitJump(next);
    writer.bindLabel(next);
    writer.emitRetVoid();
    let fct = writer.generate();

    assertDominatedBlocks(fct, 4I, 0I, 2I, 3I);
}

@test fun testDominatorSimple(_x: Testing) {
    let writer = BytecodeWriter();
    let arg0 = writer.addRegister(BytecodeType::bool());
    writer.setArguments(1I);
    let elseBlock = writer.createLabel();
    writer.emitJumpIfFalse(arg0, elseBlock);
    let returnBlock = writer.createLabel();
    writer.emitJump(returnBlock);
    writer.bindLabel(elseBlock);
    writer.emitJump(returnBlock);
    writer.bindLabel(returnBlock);
    writer.emitRetVoid();
    let fct = writer.generate();

    assertDominatedBlocks(fct, 5I, 0I, 2I, 2I, 2I);
}

@test fun testDominatorIfReturnInBothBranches(_x: Testing) {
    let fct = bytecode("bcSsaGenIfReturnInBothBranches");
    let graph = createGraph(fct);
    graph.buildDominatorTree();

    let entry = graph.getEntryBlock();
    let condBlock = graph.getBlockWithId(2I);
    let thenBlock = graph.getBlockWithId(4I);
    let elseBlock = graph.getBlockWithId(3I);
    let exit = graph.getExitBlock();

    assert(entry.getDominatedBlocks().length() == 1L);
    assert(entry.getDominator().isNone());

    assert(condBlock.getDominator().unwrap() === entry);
    assert(condBlock.getDominatedBlocks().length() == 3L);

    assert(thenBlock.getDominator().unwrap() === condBlock);
    assert(thenBlock.getDominatedBlocks().length() == 0L);

    assert(elseBlock.getDominator().unwrap() === condBlock);
    assert(elseBlock.getDominatedBlocks().length() == 0L);

    assert(exit.getDominatedBlocks().length() == 0L);
    assert(exit.getDominator().unwrap() === condBlock);
}

@test fun testDominatorWhileCountDown(_x: Testing) {
    let fct = bytecode("bcSsaGenWhileCountDown");
    let graph = createGraph(fct);
    graph.buildDominatorTree();

    let entry = graph.getEntryBlock();
    let varBlock = graph.getBlockWithId(2I);
    let whileHeader = graph.getBlockWithId(5I);
    let whileBody = graph.getBlockWithId(4I);
    let returnBlock = graph.getBlockWithId(3I);
    let exit = graph.getExitBlock();

    assert(entry.getDominatedBlocks().length() == 1L);
    assert(entry.getDominator().isNone());

    assert(varBlock.getDominator().unwrap() == entry);

    assert(whileHeader.getDominator().unwrap() === varBlock);
    assert(whileHeader.getDominatedBlocks().length() == 2L);

    assert(whileBody.getDominator().unwrap() === whileHeader);
    assert(whileBody.getDominatedBlocks().length() == 0L);

    assert(returnBlock.getDominator().unwrap() === whileHeader);
    assert(returnBlock.getDominatedBlocks().length() == 1L);

    assert(exit.getDominatedBlocks().length() == 0L);
    assert(exit.getDominator().unwrap() === returnBlock);
}
