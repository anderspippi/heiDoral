fun compile(info: EncodedCompilationInfo) -> Array[UInt8] {
    let info = CompilationInfo(info);
    // bytecodeDump(info.bc);
    CodeGen(info).generate()
}

@internal fun encodedBytecode(fct: String) -> EncodedCompilationInfo;

fun bytecode(fct: String) -> BytecodeFunction {
    let encoded = encodedBytecode(fct);
    BytecodeFunction(encoded.code, decodeConstPool(encoded.constpool), decodeRegisters(encoded.registers), encoded.arguments)
}

class CompilationInfo(encoded: EncodedCompilationInfo) {
    let bc: BytecodeFunction = BytecodeFunction(encoded.code, decodeConstPool(encoded.constpool), decodeRegisters(encoded.registers), encoded.arguments);
}

class EncodedCompilationInfo {
    let code: Array[UInt8] = arrayEmpty[UInt8]();
    let constpool: Array[UInt8] = arrayEmpty[UInt8]();
    let registers: Array[Int] = arrayEmpty[Int]();
    let arguments: Int = 0;
}

fun decodeRegisters(registers: Array[Int]) -> Array[BytecodeType] {
    var i = 0;
    let result = arrayFill[BytecodeType](registers.length(), BytecodeType::bool());

    while i < registers.length() {
        let regtype = registers(i);

        let value = if regtype == BC_TYPE_BOOL {
            BytecodeType::bool()
        } else if regtype == BC_TYPE_BYTE {
            BytecodeType::byte()
        } else if regtype == BC_TYPE_CHAR {
            BytecodeType::char()
        } else if regtype == BC_TYPE_INT {
            BytecodeType::int()
        } else if regtype == BC_TYPE_LONG {
            BytecodeType::long()
        } else if regtype == BC_TYPE_FLOAT {
            BytecodeType::float()
        } else if regtype == BC_TYPE_DOUBLE {
            BytecodeType::double()
        } else if regtype == BC_TYPE_PTR {
            BytecodeType::ptr()
        } else {
            unreachable();
            BytecodeType::bool()
        };

        result(i) = value;
        i = i + 1;
    }

    result
}

fun decodeConstPool(constpool: Array[UInt8]) -> Array[ConstPoolEntry] {
    let constPool = Vec[ConstPoolEntry]();
    let reader = ByteReader(constpool);

    while reader.moreBytes() {
        let opcode = reader.readByte().toInt();

        if opcode == CONSTPOOL_OPCODE_INT {
            let value = reader.readInt();
            constPool.push(ConstPoolInt(value));
        } else if opcode == CONSTPOOL_OPCODE_LONG {
            let value = reader.readInt64();
            constPool.push(ConstPoolInt64(value));
        } else if opcode == CONSTPOOL_OPCODE_FLOAT {
            let value = reader.readInt().asFloat();
            constPool.push(ConstPoolFloat(value));
        } else if opcode == CONSTPOOL_OPCODE_DOUBLE {
            let value = reader.readInt64().asDouble();
            constPool.push(ConstPoolDouble(value));
        } else if opcode == CONSTPOOL_OPCODE_CHAR {
            let value = reader.readInt().toCharUnchecked();
            constPool.push(ConstPoolChar(value));
        } else if opcode == CONSTPOOL_OPCODE_STRING {
            let length = reader.readInt();
            let start = reader.offset();
            let value = String::fromBytesPart(constpool, start, length).unwrap();
            constPool.push(ConstPoolString(value));
            reader.skipBytes(length);
        } else {
            println("opcode = ${opcode}");
            unreachable();
        }
    }

    constPool.toArray()
}

class ByteReader(let array: Array[UInt8]) {
    var idx: Int = 0;

    fun moreBytes() -> Bool {
        self.idx < self.array.length()
    }

    fun readByte() -> UInt8 {
        let value = self.array.get(self.idx);
        self.idx = self.idx + 1;
        value
    }

    fun readInt() -> Int {
        let by1 = self.readByte().toInt();
        let by2 = self.readByte().toInt();
        let by3 = self.readByte().toInt();
        let by4 = self.readByte().toInt();

        (by4 << 24) | (by3 << 16) | (by2 << 8) | by1
    }

    fun readInt64() -> Int64 {
        let by1 = self.readByte().toInt64();
        let by2 = self.readByte().toInt64();
        let by3 = self.readByte().toInt64();
        let by4 = self.readByte().toInt64();
        let by5 = self.readByte().toInt64();
        let by6 = self.readByte().toInt64();
        let by7 = self.readByte().toInt64();
        let by8 = self.readByte().toInt64();

        (by8 << 56) | (by7 << 48) | (by6 << 40) | (by5 << 32) | (by4 << 24) | (by3 << 16) | (by2 << 8) | by1
    }

    fun offset() -> Int {
        self.idx
    }

    fun skipBytes(value: Int) {
        self.idx = self.idx + value;
    }
}