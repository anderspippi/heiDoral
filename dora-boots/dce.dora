fun deadCodeElimination(graph: Graph) {
    removeDeadInstructions(graph)
}

fun removeDeadInstructions(graph: Graph) {
    for block in graph.postOrderIterator() {
        for inst in block.reverseInstructionsIterator() {
            if inst.isDeadAndRemovable() {
                inst.remove();
            }
        }
    }
}

fun performDce(graph: Graph) {
    verifyGraph(graph);
    buildDominatorTree(graph);
    verifyGraph(graph);
    deadCodeElimination(graph);
    verifyGraph(graph);
}


@test fun testRemoveUnusedConstant(_x: Testing) {
    let builder = GraphBuilder();
    let block = builder.addBlock();
    let value = builder.createInt32Const(12);
    builder.createReturnVoid();
    let graph = builder.build();
    performDce(graph);
    assertGraph(graph, "
@0:
  %1: Ret.Void
");
}

@test fun testRemoveUnusedAdd(_x: Testing) {
    let builder = GraphBuilder();
    let block = builder.addBlock();
    let lhs = builder.createInt32Const(12);
    let rhs = builder.createInt32Const(17);
    builder.createAdd(lhs, rhs, Type::Int32);
    builder.createReturnVoid();
    let graph = builder.build();
    performDce(graph);
    assertGraph(graph, "
@0:
  %3: Ret.Void
");
}
