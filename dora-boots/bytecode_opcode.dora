// generated by tools/bytecode-gen.rb

const BC_WIDE: Int32 = 0i32;
const BC_ADD_INT32: Int32 = 1i32;
const BC_ADD_INT64: Int32 = 2i32;
const BC_ADD_FLOAT32: Int32 = 3i32;
const BC_ADD_FLOAT64: Int32 = 4i32;
const BC_SUB_INT32: Int32 = 5i32;
const BC_SUB_INT64: Int32 = 6i32;
const BC_SUB_FLOAT32: Int32 = 7i32;
const BC_SUB_FLOAT64: Int32 = 8i32;
const BC_NEG_INT32: Int32 = 9i32;
const BC_NEG_INT64: Int32 = 10i32;
const BC_NEG_FLOAT32: Int32 = 11i32;
const BC_NEG_FLOAT64: Int32 = 12i32;
const BC_MUL_INT32: Int32 = 13i32;
const BC_MUL_INT64: Int32 = 14i32;
const BC_MUL_FLOAT32: Int32 = 15i32;
const BC_MUL_FLOAT64: Int32 = 16i32;
const BC_DIV_INT32: Int32 = 17i32;
const BC_DIV_INT64: Int32 = 18i32;
const BC_DIV_FLOAT32: Int32 = 19i32;
const BC_DIV_FLOAT64: Int32 = 20i32;
const BC_MOD_INT32: Int32 = 21i32;
const BC_MOD_INT64: Int32 = 22i32;
const BC_AND_INT32: Int32 = 23i32;
const BC_AND_INT64: Int32 = 24i32;
const BC_OR_INT32: Int32 = 25i32;
const BC_OR_INT64: Int32 = 26i32;
const BC_XOR_INT32: Int32 = 27i32;
const BC_XOR_INT64: Int32 = 28i32;
const BC_NOT_BOOL: Int32 = 29i32;
const BC_NOT_INT32: Int32 = 30i32;
const BC_NOT_INT64: Int32 = 31i32;
const BC_SHL_INT32: Int32 = 32i32;
const BC_SHR_INT32: Int32 = 33i32;
const BC_SAR_INT32: Int32 = 34i32;
const BC_SHL_INT64: Int32 = 35i32;
const BC_SHR_INT64: Int32 = 36i32;
const BC_SAR_INT64: Int32 = 37i32;
const BC_ROL_INT32: Int32 = 38i32;
const BC_ROR_INT32: Int32 = 39i32;
const BC_ROL_INT64: Int32 = 40i32;
const BC_ROR_INT64: Int32 = 41i32;
const BC_EXTEND_UINT8_TO_CHAR: Int32 = 42i32;
const BC_EXTEND_UINT8_TO_INT32: Int32 = 43i32;
const BC_EXTEND_UINT8_TO_INT64: Int32 = 44i32;
const BC_EXTEND_INT32_TO_INT64: Int32 = 45i32;
const BC_EXTEND_CHAR_TO_INT64: Int32 = 46i32;
const BC_CAST_CHAR_TO_INT32: Int32 = 47i32;
const BC_CAST_INT32_TO_UINT8: Int32 = 48i32;
const BC_CAST_INT32_TO_CHAR: Int32 = 49i32;
const BC_CAST_INT64_TO_UINT8: Int32 = 50i32;
const BC_CAST_INT64_TO_CHAR: Int32 = 51i32;
const BC_CAST_INT64_TO_INT32: Int32 = 52i32;
const BC_INSTANCE_OF: Int32 = 53i32;
const BC_CHECKED_CAST: Int32 = 54i32;
const BC_MOV: Int32 = 55i32;
const BC_LOAD_TUPLE_ELEMENT: Int32 = 56i32;
const BC_LOAD_ENUM_ELEMENT: Int32 = 57i32;
const BC_LOAD_ENUM_VARIANT: Int32 = 58i32;
const BC_LOAD_STRUCT_FIELD: Int32 = 59i32;
const BC_LOAD_FIELD: Int32 = 60i32;
const BC_STORE_FIELD: Int32 = 61i32;
const BC_LOAD_GLOBAL: Int32 = 62i32;
const BC_STORE_GLOBAL: Int32 = 63i32;
const BC_PUSH_REGISTER: Int32 = 64i32;
const BC_CONST_TRUE: Int32 = 65i32;
const BC_CONST_FALSE: Int32 = 66i32;
const BC_CONST_ZERO_UINT8: Int32 = 67i32;
const BC_CONST_ZERO_CHAR: Int32 = 68i32;
const BC_CONST_ZERO_INT32: Int32 = 69i32;
const BC_CONST_ZERO_INT64: Int32 = 70i32;
const BC_CONST_ZERO_FLOAT32: Int32 = 71i32;
const BC_CONST_ZERO_FLOAT64: Int32 = 72i32;
const BC_CONST_UINT8: Int32 = 73i32;
const BC_CONST_CHAR: Int32 = 74i32;
const BC_CONST_INT32: Int32 = 75i32;
const BC_CONST_INT64: Int32 = 76i32;
const BC_CONST_FLOAT32: Int32 = 77i32;
const BC_CONST_FLOAT64: Int32 = 78i32;
const BC_CONST_STRING: Int32 = 79i32;
const BC_TEST_IDENTITY: Int32 = 80i32;
const BC_TEST_EQ_BOOL: Int32 = 81i32;
const BC_TEST_NE_BOOL: Int32 = 82i32;
const BC_TEST_EQ_UINT8: Int32 = 83i32;
const BC_TEST_NE_UINT8: Int32 = 84i32;
const BC_TEST_GT_UINT8: Int32 = 85i32;
const BC_TEST_GE_UINT8: Int32 = 86i32;
const BC_TEST_LT_UINT8: Int32 = 87i32;
const BC_TEST_LE_UINT8: Int32 = 88i32;
const BC_TEST_EQ_CHAR: Int32 = 89i32;
const BC_TEST_NE_CHAR: Int32 = 90i32;
const BC_TEST_GT_CHAR: Int32 = 91i32;
const BC_TEST_GE_CHAR: Int32 = 92i32;
const BC_TEST_LT_CHAR: Int32 = 93i32;
const BC_TEST_LE_CHAR: Int32 = 94i32;
const BC_TEST_EQ_ENUM: Int32 = 95i32;
const BC_TEST_NE_ENUM: Int32 = 96i32;
const BC_TEST_EQ_INT32: Int32 = 97i32;
const BC_TEST_NE_INT32: Int32 = 98i32;
const BC_TEST_GT_INT32: Int32 = 99i32;
const BC_TEST_GE_INT32: Int32 = 100i32;
const BC_TEST_LT_INT32: Int32 = 101i32;
const BC_TEST_LE_INT32: Int32 = 102i32;
const BC_TEST_EQ_INT64: Int32 = 103i32;
const BC_TEST_NE_INT64: Int32 = 104i32;
const BC_TEST_GT_INT64: Int32 = 105i32;
const BC_TEST_GE_INT64: Int32 = 106i32;
const BC_TEST_LT_INT64: Int32 = 107i32;
const BC_TEST_LE_INT64: Int32 = 108i32;
const BC_TEST_EQ_FLOAT32: Int32 = 109i32;
const BC_TEST_NE_FLOAT32: Int32 = 110i32;
const BC_TEST_GT_FLOAT32: Int32 = 111i32;
const BC_TEST_GE_FLOAT32: Int32 = 112i32;
const BC_TEST_LT_FLOAT32: Int32 = 113i32;
const BC_TEST_LE_FLOAT32: Int32 = 114i32;
const BC_TEST_EQ_FLOAT64: Int32 = 115i32;
const BC_TEST_NE_FLOAT64: Int32 = 116i32;
const BC_TEST_GT_FLOAT64: Int32 = 117i32;
const BC_TEST_GE_FLOAT64: Int32 = 118i32;
const BC_TEST_LT_FLOAT64: Int32 = 119i32;
const BC_TEST_LE_FLOAT64: Int32 = 120i32;
const BC_ASSERT: Int32 = 121i32;
const BC_JUMP_LOOP: Int32 = 122i32;
const BC_LOOP_START: Int32 = 123i32;
const BC_JUMP: Int32 = 124i32;
const BC_JUMP_CONST: Int32 = 125i32;
const BC_JUMP_IF_FALSE: Int32 = 126i32;
const BC_JUMP_IF_FALSE_CONST: Int32 = 127i32;
const BC_JUMP_IF_TRUE: Int32 = 128i32;
const BC_JUMP_IF_TRUE_CONST: Int32 = 129i32;
const BC_INVOKE_DIRECT_VOID: Int32 = 130i32;
const BC_INVOKE_DIRECT: Int32 = 131i32;
const BC_INVOKE_VIRTUAL_VOID: Int32 = 132i32;
const BC_INVOKE_VIRTUAL: Int32 = 133i32;
const BC_INVOKE_STATIC_VOID: Int32 = 134i32;
const BC_INVOKE_STATIC: Int32 = 135i32;
const BC_INVOKE_GENERIC_STATIC_VOID: Int32 = 136i32;
const BC_INVOKE_GENERIC_STATIC: Int32 = 137i32;
const BC_INVOKE_GENERIC_DIRECT_VOID: Int32 = 138i32;
const BC_INVOKE_GENERIC_DIRECT: Int32 = 139i32;
const BC_NEW_OBJECT: Int32 = 140i32;
const BC_NEW_ARRAY: Int32 = 141i32;
const BC_NEW_TUPLE: Int32 = 142i32;
const BC_NEW_ENUM: Int32 = 143i32;
const BC_NEW_STRUCT: Int32 = 144i32;
const BC_NEW_TRAIT_OBJECT: Int32 = 145i32;
const BC_NIL_CHECK: Int32 = 146i32;
const BC_ARRAY_LENGTH: Int32 = 147i32;
const BC_ARRAY_BOUND_CHECK: Int32 = 148i32;
const BC_LOAD_ARRAY: Int32 = 149i32;
const BC_STORE_ARRAY: Int32 = 150i32;
const BC_RET_VOID: Int32 = 151i32;
const BC_RET: Int32 = 152i32;

const BC_TYPE_BOOL: Int32 = 0i32;
const BC_TYPE_U_INT8: Int32 = 1i32;
const BC_TYPE_CHAR: Int32 = 2i32;
const BC_TYPE_INT32: Int32 = 3i32;
const BC_TYPE_INT64: Int32 = 4i32;
const BC_TYPE_FLOAT32: Int32 = 5i32;
const BC_TYPE_FLOAT64: Int32 = 6i32;
const BC_TYPE_PTR: Int32 = 7i32;
const BC_TYPE_TUPLE: Int32 = 8i32;
const BC_TYPE_ENUM: Int32 = 9i32;
const BC_TYPE_STRUCT: Int32 = 10i32;
const BC_TYPE_TYPE_PARAM: Int32 = 11i32;

const CONSTPOOL_OPCODE_STRING: Int32 = 0i32;
const CONSTPOOL_OPCODE_FLOAT32: Int32 = 1i32;
const CONSTPOOL_OPCODE_FLOAT64: Int32 = 2i32;
const CONSTPOOL_OPCODE_INT32: Int32 = 3i32;
const CONSTPOOL_OPCODE_INT64: Int32 = 4i32;
const CONSTPOOL_OPCODE_CHAR: Int32 = 5i32;
const CONSTPOOL_OPCODE_FCT: Int32 = 6i32;
const CONSTPOOL_OPCODE_CLASS: Int32 = 7i32;
const CONSTPOOL_OPCODE_ENUM: Int32 = 8i32;
const CONSTPOOL_OPCODE_ENUM_VARIANT: Int32 = 9i32;
const CONSTPOOL_OPCODE_ENUM_ELEMENT: Int32 = 10i32;
const CONSTPOOL_OPCODE_STRUCT: Int32 = 11i32;
const CONSTPOOL_OPCODE_STRUCT_FIELD: Int32 = 12i32;
const CONSTPOOL_OPCODE_TRAIT: Int32 = 13i32;
const CONSTPOOL_OPCODE_FIELD: Int32 = 14i32;
const CONSTPOOL_OPCODE_FIELD_FIXED: Int32 = 15i32;
const CONSTPOOL_OPCODE_GENERIC: Int32 = 16i32;
const CONSTPOOL_OPCODE_TUPLE_ELEMENT: Int32 = 17i32;
const CONSTPOOL_OPCODE_TUPLE: Int32 = 18i32;

fn bytecodeName(opcode: Int32): String {
  if opcode == BC_WIDE { return "Wide"; }
  if opcode == BC_ADD_INT32 { return "AddInt32"; }
  if opcode == BC_ADD_INT64 { return "AddInt64"; }
  if opcode == BC_ADD_FLOAT32 { return "AddFloat32"; }
  if opcode == BC_ADD_FLOAT64 { return "AddFloat64"; }
  if opcode == BC_SUB_INT32 { return "SubInt32"; }
  if opcode == BC_SUB_INT64 { return "SubInt64"; }
  if opcode == BC_SUB_FLOAT32 { return "SubFloat32"; }
  if opcode == BC_SUB_FLOAT64 { return "SubFloat64"; }
  if opcode == BC_NEG_INT32 { return "NegInt32"; }
  if opcode == BC_NEG_INT64 { return "NegInt64"; }
  if opcode == BC_NEG_FLOAT32 { return "NegFloat32"; }
  if opcode == BC_NEG_FLOAT64 { return "NegFloat64"; }
  if opcode == BC_MUL_INT32 { return "MulInt32"; }
  if opcode == BC_MUL_INT64 { return "MulInt64"; }
  if opcode == BC_MUL_FLOAT32 { return "MulFloat32"; }
  if opcode == BC_MUL_FLOAT64 { return "MulFloat64"; }
  if opcode == BC_DIV_INT32 { return "DivInt32"; }
  if opcode == BC_DIV_INT64 { return "DivInt64"; }
  if opcode == BC_DIV_FLOAT32 { return "DivFloat32"; }
  if opcode == BC_DIV_FLOAT64 { return "DivFloat64"; }
  if opcode == BC_MOD_INT32 { return "ModInt32"; }
  if opcode == BC_MOD_INT64 { return "ModInt64"; }
  if opcode == BC_AND_INT32 { return "AndInt32"; }
  if opcode == BC_AND_INT64 { return "AndInt64"; }
  if opcode == BC_OR_INT32 { return "OrInt32"; }
  if opcode == BC_OR_INT64 { return "OrInt64"; }
  if opcode == BC_XOR_INT32 { return "XorInt32"; }
  if opcode == BC_XOR_INT64 { return "XorInt64"; }
  if opcode == BC_NOT_BOOL { return "NotBool"; }
  if opcode == BC_NOT_INT32 { return "NotInt32"; }
  if opcode == BC_NOT_INT64 { return "NotInt64"; }
  if opcode == BC_SHL_INT32 { return "ShlInt32"; }
  if opcode == BC_SHR_INT32 { return "ShrInt32"; }
  if opcode == BC_SAR_INT32 { return "SarInt32"; }
  if opcode == BC_SHL_INT64 { return "ShlInt64"; }
  if opcode == BC_SHR_INT64 { return "ShrInt64"; }
  if opcode == BC_SAR_INT64 { return "SarInt64"; }
  if opcode == BC_ROL_INT32 { return "RolInt32"; }
  if opcode == BC_ROR_INT32 { return "RorInt32"; }
  if opcode == BC_ROL_INT64 { return "RolInt64"; }
  if opcode == BC_ROR_INT64 { return "RorInt64"; }
  if opcode == BC_EXTEND_UINT8_TO_CHAR { return "ExtendUInt8ToChar"; }
  if opcode == BC_EXTEND_UINT8_TO_INT32 { return "ExtendUInt8ToInt32"; }
  if opcode == BC_EXTEND_UINT8_TO_INT64 { return "ExtendUInt8ToInt64"; }
  if opcode == BC_EXTEND_INT32_TO_INT64 { return "ExtendInt32ToInt64"; }
  if opcode == BC_EXTEND_CHAR_TO_INT64 { return "ExtendCharToInt64"; }
  if opcode == BC_CAST_CHAR_TO_INT32 { return "CastCharToInt32"; }
  if opcode == BC_CAST_INT32_TO_UINT8 { return "CastInt32ToUInt8"; }
  if opcode == BC_CAST_INT32_TO_CHAR { return "CastInt32ToChar"; }
  if opcode == BC_CAST_INT64_TO_UINT8 { return "CastInt64ToUInt8"; }
  if opcode == BC_CAST_INT64_TO_CHAR { return "CastInt64ToChar"; }
  if opcode == BC_CAST_INT64_TO_INT32 { return "CastInt64ToInt32"; }
  if opcode == BC_INSTANCE_OF { return "InstanceOf"; }
  if opcode == BC_CHECKED_CAST { return "CheckedCast"; }
  if opcode == BC_MOV { return "Mov"; }
  if opcode == BC_LOAD_TUPLE_ELEMENT { return "LoadTupleElement"; }
  if opcode == BC_LOAD_ENUM_ELEMENT { return "LoadEnumElement"; }
  if opcode == BC_LOAD_ENUM_VARIANT { return "LoadEnumVariant"; }
  if opcode == BC_LOAD_STRUCT_FIELD { return "LoadStructField"; }
  if opcode == BC_LOAD_FIELD { return "LoadField"; }
  if opcode == BC_STORE_FIELD { return "StoreField"; }
  if opcode == BC_LOAD_GLOBAL { return "LoadGlobal"; }
  if opcode == BC_STORE_GLOBAL { return "StoreGlobal"; }
  if opcode == BC_PUSH_REGISTER { return "PushRegister"; }
  if opcode == BC_CONST_TRUE { return "ConstTrue"; }
  if opcode == BC_CONST_FALSE { return "ConstFalse"; }
  if opcode == BC_CONST_ZERO_UINT8 { return "ConstZeroUInt8"; }
  if opcode == BC_CONST_ZERO_CHAR { return "ConstZeroChar"; }
  if opcode == BC_CONST_ZERO_INT32 { return "ConstZeroInt32"; }
  if opcode == BC_CONST_ZERO_INT64 { return "ConstZeroInt64"; }
  if opcode == BC_CONST_ZERO_FLOAT32 { return "ConstZeroFloat32"; }
  if opcode == BC_CONST_ZERO_FLOAT64 { return "ConstZeroFloat64"; }
  if opcode == BC_CONST_UINT8 { return "ConstUInt8"; }
  if opcode == BC_CONST_CHAR { return "ConstChar"; }
  if opcode == BC_CONST_INT32 { return "ConstInt32"; }
  if opcode == BC_CONST_INT64 { return "ConstInt64"; }
  if opcode == BC_CONST_FLOAT32 { return "ConstFloat32"; }
  if opcode == BC_CONST_FLOAT64 { return "ConstFloat64"; }
  if opcode == BC_CONST_STRING { return "ConstString"; }
  if opcode == BC_TEST_IDENTITY { return "TestIdentity"; }
  if opcode == BC_TEST_EQ_BOOL { return "TestEqBool"; }
  if opcode == BC_TEST_NE_BOOL { return "TestNeBool"; }
  if opcode == BC_TEST_EQ_UINT8 { return "TestEqUInt8"; }
  if opcode == BC_TEST_NE_UINT8 { return "TestNeUInt8"; }
  if opcode == BC_TEST_GT_UINT8 { return "TestGtUInt8"; }
  if opcode == BC_TEST_GE_UINT8 { return "TestGeUInt8"; }
  if opcode == BC_TEST_LT_UINT8 { return "TestLtUInt8"; }
  if opcode == BC_TEST_LE_UINT8 { return "TestLeUInt8"; }
  if opcode == BC_TEST_EQ_CHAR { return "TestEqChar"; }
  if opcode == BC_TEST_NE_CHAR { return "TestNeChar"; }
  if opcode == BC_TEST_GT_CHAR { return "TestGtChar"; }
  if opcode == BC_TEST_GE_CHAR { return "TestGeChar"; }
  if opcode == BC_TEST_LT_CHAR { return "TestLtChar"; }
  if opcode == BC_TEST_LE_CHAR { return "TestLeChar"; }
  if opcode == BC_TEST_EQ_ENUM { return "TestEqEnum"; }
  if opcode == BC_TEST_NE_ENUM { return "TestNeEnum"; }
  if opcode == BC_TEST_EQ_INT32 { return "TestEqInt32"; }
  if opcode == BC_TEST_NE_INT32 { return "TestNeInt32"; }
  if opcode == BC_TEST_GT_INT32 { return "TestGtInt32"; }
  if opcode == BC_TEST_GE_INT32 { return "TestGeInt32"; }
  if opcode == BC_TEST_LT_INT32 { return "TestLtInt32"; }
  if opcode == BC_TEST_LE_INT32 { return "TestLeInt32"; }
  if opcode == BC_TEST_EQ_INT64 { return "TestEqInt64"; }
  if opcode == BC_TEST_NE_INT64 { return "TestNeInt64"; }
  if opcode == BC_TEST_GT_INT64 { return "TestGtInt64"; }
  if opcode == BC_TEST_GE_INT64 { return "TestGeInt64"; }
  if opcode == BC_TEST_LT_INT64 { return "TestLtInt64"; }
  if opcode == BC_TEST_LE_INT64 { return "TestLeInt64"; }
  if opcode == BC_TEST_EQ_FLOAT32 { return "TestEqFloat32"; }
  if opcode == BC_TEST_NE_FLOAT32 { return "TestNeFloat32"; }
  if opcode == BC_TEST_GT_FLOAT32 { return "TestGtFloat32"; }
  if opcode == BC_TEST_GE_FLOAT32 { return "TestGeFloat32"; }
  if opcode == BC_TEST_LT_FLOAT32 { return "TestLtFloat32"; }
  if opcode == BC_TEST_LE_FLOAT32 { return "TestLeFloat32"; }
  if opcode == BC_TEST_EQ_FLOAT64 { return "TestEqFloat64"; }
  if opcode == BC_TEST_NE_FLOAT64 { return "TestNeFloat64"; }
  if opcode == BC_TEST_GT_FLOAT64 { return "TestGtFloat64"; }
  if opcode == BC_TEST_GE_FLOAT64 { return "TestGeFloat64"; }
  if opcode == BC_TEST_LT_FLOAT64 { return "TestLtFloat64"; }
  if opcode == BC_TEST_LE_FLOAT64 { return "TestLeFloat64"; }
  if opcode == BC_ASSERT { return "Assert"; }
  if opcode == BC_JUMP_LOOP { return "JumpLoop"; }
  if opcode == BC_LOOP_START { return "LoopStart"; }
  if opcode == BC_JUMP { return "Jump"; }
  if opcode == BC_JUMP_CONST { return "JumpConst"; }
  if opcode == BC_JUMP_IF_FALSE { return "JumpIfFalse"; }
  if opcode == BC_JUMP_IF_FALSE_CONST { return "JumpIfFalseConst"; }
  if opcode == BC_JUMP_IF_TRUE { return "JumpIfTrue"; }
  if opcode == BC_JUMP_IF_TRUE_CONST { return "JumpIfTrueConst"; }
  if opcode == BC_INVOKE_DIRECT_VOID { return "InvokeDirectVoid"; }
  if opcode == BC_INVOKE_DIRECT { return "InvokeDirect"; }
  if opcode == BC_INVOKE_VIRTUAL_VOID { return "InvokeVirtualVoid"; }
  if opcode == BC_INVOKE_VIRTUAL { return "InvokeVirtual"; }
  if opcode == BC_INVOKE_STATIC_VOID { return "InvokeStaticVoid"; }
  if opcode == BC_INVOKE_STATIC { return "InvokeStatic"; }
  if opcode == BC_INVOKE_GENERIC_STATIC_VOID { return "InvokeGenericStaticVoid"; }
  if opcode == BC_INVOKE_GENERIC_STATIC { return "InvokeGenericStatic"; }
  if opcode == BC_INVOKE_GENERIC_DIRECT_VOID { return "InvokeGenericDirectVoid"; }
  if opcode == BC_INVOKE_GENERIC_DIRECT { return "InvokeGenericDirect"; }
  if opcode == BC_NEW_OBJECT { return "NewObject"; }
  if opcode == BC_NEW_ARRAY { return "NewArray"; }
  if opcode == BC_NEW_TUPLE { return "NewTuple"; }
  if opcode == BC_NEW_ENUM { return "NewEnum"; }
  if opcode == BC_NEW_STRUCT { return "NewStruct"; }
  if opcode == BC_NEW_TRAIT_OBJECT { return "NewTraitObject"; }
  if opcode == BC_NIL_CHECK { return "NilCheck"; }
  if opcode == BC_ARRAY_LENGTH { return "ArrayLength"; }
  if opcode == BC_ARRAY_BOUND_CHECK { return "ArrayBoundCheck"; }
  if opcode == BC_LOAD_ARRAY { return "LoadArray"; }
  if opcode == BC_STORE_ARRAY { return "StoreArray"; }
  if opcode == BC_RET_VOID { return "RetVoid"; }
  if opcode == BC_RET { return "Ret"; }
  "UNKNOWN(${opcode})"
}

fn bytecodeTypeName(code: Int32): String {
  if code == BC_TYPE_BOOL { return "Bool"; }
  if code == BC_TYPE_U_INT8 { return "UInt8"; }
  if code == BC_TYPE_CHAR { return "Char"; }
  if code == BC_TYPE_INT32 { return "Int32"; }
  if code == BC_TYPE_INT64 { return "Int64"; }
  if code == BC_TYPE_FLOAT32 { return "Float32"; }
  if code == BC_TYPE_FLOAT64 { return "Float64"; }
  if code == BC_TYPE_PTR { return "Ptr"; }
  if code == BC_TYPE_TUPLE { return "Tuple"; }
  if code == BC_TYPE_ENUM { return "Enum"; }
  if code == BC_TYPE_STRUCT { return "Struct"; }
  if code == BC_TYPE_TYPE_PARAM { return "TypeParam"; }
  "UNKNOWN(${code})"
}

const INSTRUCTION_SET_X64: Int32 = 0i32;
const INSTRUCTION_SET_ARM64: Int32 = 1i32;

const SOURCE_TYPE_OPCODE_ERROR: Int32 = 0i32;
const SOURCE_TYPE_OPCODE_ANY: Int32 = 1i32;
const SOURCE_TYPE_OPCODE_UNIT: Int32 = 2i32;
const SOURCE_TYPE_OPCODE_BOOL: Int32 = 3i32;
const SOURCE_TYPE_OPCODE_CHAR: Int32 = 4i32;
const SOURCE_TYPE_OPCODE_U_INT8: Int32 = 5i32;
const SOURCE_TYPE_OPCODE_INT32: Int32 = 6i32;
const SOURCE_TYPE_OPCODE_INT64: Int32 = 7i32;
const SOURCE_TYPE_OPCODE_FLOAT32: Int32 = 8i32;
const SOURCE_TYPE_OPCODE_FLOAT64: Int32 = 9i32;
const SOURCE_TYPE_OPCODE_PTR: Int32 = 10i32;
const SOURCE_TYPE_OPCODE_THIS: Int32 = 11i32;
const SOURCE_TYPE_OPCODE_CLASS: Int32 = 12i32;
const SOURCE_TYPE_OPCODE_STRUCT: Int32 = 13i32;
const SOURCE_TYPE_OPCODE_TUPLE: Int32 = 14i32;
const SOURCE_TYPE_OPCODE_TRAIT: Int32 = 15i32;
const SOURCE_TYPE_OPCODE_MODULE: Int32 = 16i32;
const SOURCE_TYPE_OPCODE_TYPE_PARAM: Int32 = 17i32;
const SOURCE_TYPE_OPCODE_LAMBDA: Int32 = 18i32;
const SOURCE_TYPE_OPCODE_ENUM: Int32 = 19i32;
