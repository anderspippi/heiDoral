// generated by tools/bytecode-gen.rb

const BC_WIDE: Int32 = 0;
const BC_ADD_INT32: Int32 = 1;
const BC_ADD_INT64: Int32 = 2;
const BC_ADD_FLOAT32: Int32 = 3;
const BC_ADD_FLOAT64: Int32 = 4;
const BC_SUB_INT32: Int32 = 5;
const BC_SUB_INT64: Int32 = 6;
const BC_SUB_FLOAT32: Int32 = 7;
const BC_SUB_FLOAT64: Int32 = 8;
const BC_NEG_INT32: Int32 = 9;
const BC_NEG_INT64: Int32 = 10;
const BC_NEG_FLOAT32: Int32 = 11;
const BC_NEG_FLOAT64: Int32 = 12;
const BC_MUL_INT32: Int32 = 13;
const BC_MUL_INT64: Int32 = 14;
const BC_MUL_FLOAT32: Int32 = 15;
const BC_MUL_FLOAT64: Int32 = 16;
const BC_DIV_INT32: Int32 = 17;
const BC_DIV_INT64: Int32 = 18;
const BC_DIV_FLOAT32: Int32 = 19;
const BC_DIV_FLOAT64: Int32 = 20;
const BC_MOD_INT32: Int32 = 21;
const BC_MOD_INT64: Int32 = 22;
const BC_AND_INT32: Int32 = 23;
const BC_AND_INT64: Int32 = 24;
const BC_OR_INT32: Int32 = 25;
const BC_OR_INT64: Int32 = 26;
const BC_XOR_INT32: Int32 = 27;
const BC_XOR_INT64: Int32 = 28;
const BC_NOT_BOOL: Int32 = 29;
const BC_NOT_INT32: Int32 = 30;
const BC_NOT_INT64: Int32 = 31;
const BC_SHL_INT32: Int32 = 32;
const BC_SHR_INT32: Int32 = 33;
const BC_SAR_INT32: Int32 = 34;
const BC_SHL_INT64: Int32 = 35;
const BC_SHR_INT64: Int32 = 36;
const BC_SAR_INT64: Int32 = 37;
const BC_INSTANCE_OF: Int32 = 38;
const BC_CHECKED_CAST: Int32 = 39;
const BC_MOV: Int32 = 40;
const BC_LOAD_TUPLE_ELEMENT: Int32 = 41;
const BC_LOAD_ENUM_ELEMENT: Int32 = 42;
const BC_LOAD_ENUM_VARIANT: Int32 = 43;
const BC_LOAD_STRUCT_FIELD: Int32 = 44;
const BC_LOAD_FIELD: Int32 = 45;
const BC_STORE_FIELD: Int32 = 46;
const BC_LOAD_GLOBAL: Int32 = 47;
const BC_STORE_GLOBAL: Int32 = 48;
const BC_PUSH_REGISTER: Int32 = 49;
const BC_CONST_TRUE: Int32 = 50;
const BC_CONST_FALSE: Int32 = 51;
const BC_CONST_UINT8: Int32 = 52;
const BC_CONST_CHAR: Int32 = 53;
const BC_CONST_INT32: Int32 = 54;
const BC_CONST_INT64: Int32 = 55;
const BC_CONST_FLOAT32: Int32 = 56;
const BC_CONST_FLOAT64: Int32 = 57;
const BC_CONST_STRING: Int32 = 58;
const BC_TEST_IDENTITY: Int32 = 59;
const BC_TEST_EQ: Int32 = 60;
const BC_TEST_NE: Int32 = 61;
const BC_TEST_GT: Int32 = 62;
const BC_TEST_GE: Int32 = 63;
const BC_TEST_LT: Int32 = 64;
const BC_TEST_LE: Int32 = 65;
const BC_JUMP_LOOP: Int32 = 66;
const BC_LOOP_START: Int32 = 67;
const BC_JUMP: Int32 = 68;
const BC_JUMP_CONST: Int32 = 69;
const BC_JUMP_IF_FALSE: Int32 = 70;
const BC_JUMP_IF_FALSE_CONST: Int32 = 71;
const BC_JUMP_IF_TRUE: Int32 = 72;
const BC_JUMP_IF_TRUE_CONST: Int32 = 73;
const BC_INVOKE_DIRECT_VOID: Int32 = 74;
const BC_INVOKE_DIRECT: Int32 = 75;
const BC_INVOKE_VIRTUAL_VOID: Int32 = 76;
const BC_INVOKE_VIRTUAL: Int32 = 77;
const BC_INVOKE_STATIC_VOID: Int32 = 78;
const BC_INVOKE_STATIC: Int32 = 79;
const BC_INVOKE_GENERIC_STATIC_VOID: Int32 = 80;
const BC_INVOKE_GENERIC_STATIC: Int32 = 81;
const BC_INVOKE_GENERIC_DIRECT_VOID: Int32 = 82;
const BC_INVOKE_GENERIC_DIRECT: Int32 = 83;
const BC_NEW_OBJECT: Int32 = 84;
const BC_NEW_ARRAY: Int32 = 85;
const BC_NEW_TUPLE: Int32 = 86;
const BC_NEW_ENUM: Int32 = 87;
const BC_NEW_STRUCT: Int32 = 88;
const BC_NEW_TRAIT_OBJECT: Int32 = 89;
const BC_NIL_CHECK: Int32 = 90;
const BC_ARRAY_LENGTH: Int32 = 91;
const BC_ARRAY_BOUND_CHECK: Int32 = 92;
const BC_LOAD_ARRAY: Int32 = 93;
const BC_STORE_ARRAY: Int32 = 94;
const BC_RET_VOID: Int32 = 95;
const BC_RET: Int32 = 96;

const BC_TYPE_UNIT: Int32 = 0;
const BC_TYPE_BOOL: Int32 = 1;
const BC_TYPE_U_INT8: Int32 = 2;
const BC_TYPE_CHAR: Int32 = 3;
const BC_TYPE_INT32: Int32 = 4;
const BC_TYPE_INT64: Int32 = 5;
const BC_TYPE_FLOAT32: Int32 = 6;
const BC_TYPE_FLOAT64: Int32 = 7;
const BC_TYPE_PTR: Int32 = 8;
const BC_TYPE_TUPLE: Int32 = 9;
const BC_TYPE_ENUM: Int32 = 10;
const BC_TYPE_STRUCT: Int32 = 11;
const BC_TYPE_TYPE_PARAM: Int32 = 12;
const BC_TYPE_CLASS: Int32 = 13;
const BC_TYPE_TRAIT: Int32 = 14;

const CONSTPOOL_OPCODE_STRING: Int32 = 0;
const CONSTPOOL_OPCODE_FLOAT32: Int32 = 1;
const CONSTPOOL_OPCODE_FLOAT64: Int32 = 2;
const CONSTPOOL_OPCODE_INT32: Int32 = 3;
const CONSTPOOL_OPCODE_INT64: Int32 = 4;
const CONSTPOOL_OPCODE_CHAR: Int32 = 5;
const CONSTPOOL_OPCODE_FCT: Int32 = 6;
const CONSTPOOL_OPCODE_CLASS: Int32 = 7;
const CONSTPOOL_OPCODE_ENUM: Int32 = 8;
const CONSTPOOL_OPCODE_ENUM_VARIANT: Int32 = 9;
const CONSTPOOL_OPCODE_ENUM_ELEMENT: Int32 = 10;
const CONSTPOOL_OPCODE_STRUCT: Int32 = 11;
const CONSTPOOL_OPCODE_STRUCT_FIELD: Int32 = 12;
const CONSTPOOL_OPCODE_TRAIT: Int32 = 13;
const CONSTPOOL_OPCODE_FIELD: Int32 = 14;
const CONSTPOOL_OPCODE_FIELD_FIXED: Int32 = 15;
const CONSTPOOL_OPCODE_GENERIC: Int32 = 16;
const CONSTPOOL_OPCODE_TUPLE_ELEMENT: Int32 = 17;
const CONSTPOOL_OPCODE_TUPLE: Int32 = 18;

fn bytecodeName(opcode: Int32): String {
  if opcode == BC_WIDE { return "Wide"; }
  if opcode == BC_ADD_INT32 { return "AddInt32"; }
  if opcode == BC_ADD_INT64 { return "AddInt64"; }
  if opcode == BC_ADD_FLOAT32 { return "AddFloat32"; }
  if opcode == BC_ADD_FLOAT64 { return "AddFloat64"; }
  if opcode == BC_SUB_INT32 { return "SubInt32"; }
  if opcode == BC_SUB_INT64 { return "SubInt64"; }
  if opcode == BC_SUB_FLOAT32 { return "SubFloat32"; }
  if opcode == BC_SUB_FLOAT64 { return "SubFloat64"; }
  if opcode == BC_NEG_INT32 { return "NegInt32"; }
  if opcode == BC_NEG_INT64 { return "NegInt64"; }
  if opcode == BC_NEG_FLOAT32 { return "NegFloat32"; }
  if opcode == BC_NEG_FLOAT64 { return "NegFloat64"; }
  if opcode == BC_MUL_INT32 { return "MulInt32"; }
  if opcode == BC_MUL_INT64 { return "MulInt64"; }
  if opcode == BC_MUL_FLOAT32 { return "MulFloat32"; }
  if opcode == BC_MUL_FLOAT64 { return "MulFloat64"; }
  if opcode == BC_DIV_INT32 { return "DivInt32"; }
  if opcode == BC_DIV_INT64 { return "DivInt64"; }
  if opcode == BC_DIV_FLOAT32 { return "DivFloat32"; }
  if opcode == BC_DIV_FLOAT64 { return "DivFloat64"; }
  if opcode == BC_MOD_INT32 { return "ModInt32"; }
  if opcode == BC_MOD_INT64 { return "ModInt64"; }
  if opcode == BC_AND_INT32 { return "AndInt32"; }
  if opcode == BC_AND_INT64 { return "AndInt64"; }
  if opcode == BC_OR_INT32 { return "OrInt32"; }
  if opcode == BC_OR_INT64 { return "OrInt64"; }
  if opcode == BC_XOR_INT32 { return "XorInt32"; }
  if opcode == BC_XOR_INT64 { return "XorInt64"; }
  if opcode == BC_NOT_BOOL { return "NotBool"; }
  if opcode == BC_NOT_INT32 { return "NotInt32"; }
  if opcode == BC_NOT_INT64 { return "NotInt64"; }
  if opcode == BC_SHL_INT32 { return "ShlInt32"; }
  if opcode == BC_SHR_INT32 { return "ShrInt32"; }
  if opcode == BC_SAR_INT32 { return "SarInt32"; }
  if opcode == BC_SHL_INT64 { return "ShlInt64"; }
  if opcode == BC_SHR_INT64 { return "ShrInt64"; }
  if opcode == BC_SAR_INT64 { return "SarInt64"; }
  if opcode == BC_INSTANCE_OF { return "InstanceOf"; }
  if opcode == BC_CHECKED_CAST { return "CheckedCast"; }
  if opcode == BC_MOV { return "Mov"; }
  if opcode == BC_LOAD_TUPLE_ELEMENT { return "LoadTupleElement"; }
  if opcode == BC_LOAD_ENUM_ELEMENT { return "LoadEnumElement"; }
  if opcode == BC_LOAD_ENUM_VARIANT { return "LoadEnumVariant"; }
  if opcode == BC_LOAD_STRUCT_FIELD { return "LoadStructField"; }
  if opcode == BC_LOAD_FIELD { return "LoadField"; }
  if opcode == BC_STORE_FIELD { return "StoreField"; }
  if opcode == BC_LOAD_GLOBAL { return "LoadGlobal"; }
  if opcode == BC_STORE_GLOBAL { return "StoreGlobal"; }
  if opcode == BC_PUSH_REGISTER { return "PushRegister"; }
  if opcode == BC_CONST_TRUE { return "ConstTrue"; }
  if opcode == BC_CONST_FALSE { return "ConstFalse"; }
  if opcode == BC_CONST_UINT8 { return "ConstUInt8"; }
  if opcode == BC_CONST_CHAR { return "ConstChar"; }
  if opcode == BC_CONST_INT32 { return "ConstInt32"; }
  if opcode == BC_CONST_INT64 { return "ConstInt64"; }
  if opcode == BC_CONST_FLOAT32 { return "ConstFloat32"; }
  if opcode == BC_CONST_FLOAT64 { return "ConstFloat64"; }
  if opcode == BC_CONST_STRING { return "ConstString"; }
  if opcode == BC_TEST_IDENTITY { return "TestIdentity"; }
  if opcode == BC_TEST_EQ { return "TestEq"; }
  if opcode == BC_TEST_NE { return "TestNe"; }
  if opcode == BC_TEST_GT { return "TestGt"; }
  if opcode == BC_TEST_GE { return "TestGe"; }
  if opcode == BC_TEST_LT { return "TestLt"; }
  if opcode == BC_TEST_LE { return "TestLe"; }
  if opcode == BC_JUMP_LOOP { return "JumpLoop"; }
  if opcode == BC_LOOP_START { return "LoopStart"; }
  if opcode == BC_JUMP { return "Jump"; }
  if opcode == BC_JUMP_CONST { return "JumpConst"; }
  if opcode == BC_JUMP_IF_FALSE { return "JumpIfFalse"; }
  if opcode == BC_JUMP_IF_FALSE_CONST { return "JumpIfFalseConst"; }
  if opcode == BC_JUMP_IF_TRUE { return "JumpIfTrue"; }
  if opcode == BC_JUMP_IF_TRUE_CONST { return "JumpIfTrueConst"; }
  if opcode == BC_INVOKE_DIRECT_VOID { return "InvokeDirectVoid"; }
  if opcode == BC_INVOKE_DIRECT { return "InvokeDirect"; }
  if opcode == BC_INVOKE_VIRTUAL_VOID { return "InvokeVirtualVoid"; }
  if opcode == BC_INVOKE_VIRTUAL { return "InvokeVirtual"; }
  if opcode == BC_INVOKE_STATIC_VOID { return "InvokeStaticVoid"; }
  if opcode == BC_INVOKE_STATIC { return "InvokeStatic"; }
  if opcode == BC_INVOKE_GENERIC_STATIC_VOID { return "InvokeGenericStaticVoid"; }
  if opcode == BC_INVOKE_GENERIC_STATIC { return "InvokeGenericStatic"; }
  if opcode == BC_INVOKE_GENERIC_DIRECT_VOID { return "InvokeGenericDirectVoid"; }
  if opcode == BC_INVOKE_GENERIC_DIRECT { return "InvokeGenericDirect"; }
  if opcode == BC_NEW_OBJECT { return "NewObject"; }
  if opcode == BC_NEW_ARRAY { return "NewArray"; }
  if opcode == BC_NEW_TUPLE { return "NewTuple"; }
  if opcode == BC_NEW_ENUM { return "NewEnum"; }
  if opcode == BC_NEW_STRUCT { return "NewStruct"; }
  if opcode == BC_NEW_TRAIT_OBJECT { return "NewTraitObject"; }
  if opcode == BC_NIL_CHECK { return "NilCheck"; }
  if opcode == BC_ARRAY_LENGTH { return "ArrayLength"; }
  if opcode == BC_ARRAY_BOUND_CHECK { return "ArrayBoundCheck"; }
  if opcode == BC_LOAD_ARRAY { return "LoadArray"; }
  if opcode == BC_STORE_ARRAY { return "StoreArray"; }
  if opcode == BC_RET_VOID { return "RetVoid"; }
  if opcode == BC_RET { return "Ret"; }
  "UNKNOWN(${opcode})"
}

fn bytecodeTypeName(code: Int32): String {
  if code == BC_TYPE_UNIT { return "Unit"; }
  if code == BC_TYPE_BOOL { return "Bool"; }
  if code == BC_TYPE_U_INT8 { return "UInt8"; }
  if code == BC_TYPE_CHAR { return "Char"; }
  if code == BC_TYPE_INT32 { return "Int32"; }
  if code == BC_TYPE_INT64 { return "Int64"; }
  if code == BC_TYPE_FLOAT32 { return "Float32"; }
  if code == BC_TYPE_FLOAT64 { return "Float64"; }
  if code == BC_TYPE_PTR { return "Ptr"; }
  if code == BC_TYPE_TUPLE { return "Tuple"; }
  if code == BC_TYPE_ENUM { return "Enum"; }
  if code == BC_TYPE_STRUCT { return "Struct"; }
  if code == BC_TYPE_TYPE_PARAM { return "TypeParam"; }
  if code == BC_TYPE_CLASS { return "Class"; }
  if code == BC_TYPE_TRAIT { return "Trait"; }
  "UNKNOWN(${code})"
}

const INSTRUCTION_SET_X64: Int32 = 0;
const INSTRUCTION_SET_ARM64: Int32 = 1;

const SOURCE_TYPE_OPCODE_ERROR: Int32 = 0;
const SOURCE_TYPE_OPCODE_ANY: Int32 = 1;
const SOURCE_TYPE_OPCODE_UNIT: Int32 = 2;
const SOURCE_TYPE_OPCODE_BOOL: Int32 = 3;
const SOURCE_TYPE_OPCODE_CHAR: Int32 = 4;
const SOURCE_TYPE_OPCODE_U_INT8: Int32 = 5;
const SOURCE_TYPE_OPCODE_INT32: Int32 = 6;
const SOURCE_TYPE_OPCODE_INT64: Int32 = 7;
const SOURCE_TYPE_OPCODE_FLOAT32: Int32 = 8;
const SOURCE_TYPE_OPCODE_FLOAT64: Int32 = 9;
const SOURCE_TYPE_OPCODE_PTR: Int32 = 10;
const SOURCE_TYPE_OPCODE_THIS: Int32 = 11;
const SOURCE_TYPE_OPCODE_CLASS: Int32 = 12;
const SOURCE_TYPE_OPCODE_STRUCT: Int32 = 13;
const SOURCE_TYPE_OPCODE_TUPLE: Int32 = 14;
const SOURCE_TYPE_OPCODE_TRAIT: Int32 = 15;
const SOURCE_TYPE_OPCODE_MODULE: Int32 = 16;
const SOURCE_TYPE_OPCODE_TYPE_PARAM: Int32 = 17;
const SOURCE_TYPE_OPCODE_LAMBDA: Int32 = 18;
const SOURCE_TYPE_OPCODE_ENUM: Int32 = 19;
