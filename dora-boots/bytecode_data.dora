class BytecodeFunction(let code: Array[UInt8], let const_pool: Array[ConstPoolEntry], let registers: Array[BytecodeType], let arguments: Int) {
    fun constPool(idx: ConstPoolId) -> ConstPoolEntry {
        self.const_pool.get(idx.value)
    }

    fun codeAt(idx: Int) -> Int {
        self.code.get(idx).toInt()
    }

    fun codeIntAt(idx: Int) -> Int {
        let byte1 = self.codeAt(idx);
        let byte2 = self.codeAt(idx+1);
        let byte3 = self.codeAt(idx+2);
        let byte4 = self.codeAt(idx+3);

        (byte4 << 24) | (byte3 << 16) | (byte2 << 8) | byte1
    }
}

@open @abstract class ConstPoolEntry {
    fun toInt() -> Option[Int] {
        if self is ConstPoolInt {
            some[Int]((self as ConstPoolInt).value)
        } else {
            none[Int]()
        }
    }

    fun toInt64() -> Option[Int64] {
        if self is ConstPoolInt64 {
            some[Int64]((self as ConstPoolInt64).value)
        } else {
            none[Int64]()
        }
    }

    fun toFloat() -> Option[Float] {
        if self is ConstPoolFloat {
            some[Float]((self as ConstPoolFloat).value)
        } else {
            none[Float]()
        }
    }

    fun toDouble() -> Option[Double] {
        if self is ConstPoolDouble {
            some[Double]((self as ConstPoolDouble).value)
        } else {
            none[Double]()
        }
    }

    @abstract fun toString() -> String;
}

class ConstPoolInt(let value: Int): ConstPoolEntry {
    @override fun toString() -> String { "Int ${self.value}" }
}

class ConstPoolInt64(let value: Int64): ConstPoolEntry {
    @override fun toString() -> String { "Int64 ${self.value}" }
}

class ConstPoolFloat(let value: Float): ConstPoolEntry {
    @override fun toString() -> String { "Float ${self.value}" }
}

class ConstPoolDouble(let value: Double): ConstPoolEntry {
    @override fun toString() -> String { "Double ${self.value}" }
}

class ConstPoolString(let value: String): ConstPoolEntry {
    @override fun toString() -> String { "String '${self.value}'" }
}

class ConstPoolChar(let value: Char): ConstPoolEntry {
    @override fun toString() -> String { "Char ${self.value.toInt()}" }
}

class BytecodeRegister(let value: Int) {
    fun equals(rhs: BytecodeRegister) -> Bool {
        self.value == rhs.value
    }
}

impl Equals for BytecodeRegister {
    fun equals(other: BytecodeRegister) -> Bool {
        self.value == other.value
    }
}

impl Hash for BytecodeRegister {
    fun hash() -> Int {
        self.value
    }
}

impl Stringable for BytecodeRegister {
    fun toString() -> String = "r${self.value}";
}

class ClassDefId(let value: Int)
class FieldId(let value: Int)
class GlobalId(let value: Int)
class ConstPoolId(let value: Int) {
    fun equals(rhs: ConstPoolId) -> Bool {
        self.value == rhs.value
    }
}

class FctId(let value: Int)

class BytecodeType(let value: Int) {
    @static fun bool() -> BytecodeType = BytecodeType(BC_TYPE_BOOL);
    @static fun byte() -> BytecodeType = BytecodeType(BC_TYPE_BYTE);
    @static fun char() -> BytecodeType = BytecodeType(BC_TYPE_CHAR);
    @static fun int() -> BytecodeType = BytecodeType(BC_TYPE_INT);
    @static fun long() -> BytecodeType = BytecodeType(BC_TYPE_LONG);
    @static fun float() -> BytecodeType = BytecodeType(BC_TYPE_FLOAT);
    @static fun double() -> BytecodeType = BytecodeType(BC_TYPE_DOUBLE);
    @static fun ptr() -> BytecodeType = BytecodeType(BC_TYPE_PTR);

    fun isBool() -> Bool = self.value == BC_TYPE_BOOL;
    fun isByte() -> Bool = self.value == BC_TYPE_BYTE;
    fun isChar() -> Bool = self.value == BC_TYPE_CHAR;
    fun isInt() -> Bool = self.value == BC_TYPE_INT;
    fun isLong() -> Bool = self.value == BC_TYPE_LONG;
    fun isFloat() -> Bool = self.value == BC_TYPE_FLOAT;
    fun isDouble() -> Bool = self.value == BC_TYPE_DOUBLE;
    fun isPtr() -> Bool = self.value == BC_TYPE_PTR;
}

impl Stringable for BytecodeType {
    fun toString() -> String { bytecodeTypeName(self.value) }
}
