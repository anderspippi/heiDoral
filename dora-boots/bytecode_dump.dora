fn bytecodeDump(bc: BytecodeFunction) {
    let dumper = BytecodeDumper(bc);
    readBytecode(bc.code, dumper);

    var i = 0i64;

    for entry in bc.const_pool {
        println("@${i} = ${entry.toString()}");
        i = i + 1i64;
    }

    i = 0i64;
    for ty in bc.registers {
        println("r${i} = ${ty}");
        i = i + 1i64;
    }
}

class BytecodeDumper(let bc: BytecodeFunction): BytecodeVisitor {
    var pos: Int32 = 0;

    fn emitInst(name: String) {
        self.emitStart(name);
        println("");
    }

    fn emitReg3(name: String, r1: BytecodeRegister, r2: BytecodeRegister, r3: BytecodeRegister) {
        self.emitStart(name);
        println(" ${r1}, ${r2}, ${r3}");
    }

    fn emitReg2(name: String, r1: BytecodeRegister, r2: BytecodeRegister) {
        self.emitStart(name);
        println(" ${r1}, ${r2}");
    }

    fn emitReg2AndIdx(name: String, r1: BytecodeRegister, r2: BytecodeRegister, idx: ConstPoolId) {
        self.emitStart(name);
        println(" ${r1}, ${r2}, @${idx.value}");
    }

    fn emitReg1(name: String, r1: BytecodeRegister) {
        self.emitStart(name);
        println(" ${r1}")
    }

    fn emitReg1AndIdx(name: String, r1: BytecodeRegister, idx: ConstPoolId) {
        self.emitStart(name);
        println(" ${r1}, @${idx.value}")
    }

    fn emitIdx(name: String, idx: ConstPoolId) {
        self.emitStart(name);
        println(" @${idx.value}");
    }

    fn emitReg1AndInt(name: String, r1: BytecodeRegister, value: Int32) {
        self.emitStart(name);
        println(" ${r1}, ${value}");
    }

    fn emitInt(name: String, value: Int32) {
        self.emitStart(name);
        println(" ${value}");
    }

    fn emitField(
        name: String,
        r1: BytecodeRegister,
        r2: BytecodeRegister,
        cid: ClassDefId,
        fid: FieldId,
    ) {
        self.emitStart(name);
        println(" ${r1}, ${r2}, ${cid.value}:${fid.value}");
    }

    fn emitGlobal(name: String, r1: BytecodeRegister, gid: GlobalId) {
        self.emitStart(name);
        println(" ${r1}, ${gid.value}");
    }

    fn emitFctVoid(name: String, fid: FctId) {
        self.emitStart(name);
        println(" ${fid.value}");
    }

    fn emitFct(name: String, r1: BytecodeRegister, fid: FctId) {
        self.emitStart(name);
        println(" ${r1}, ${fid.value}");
    }

    fn emitNew(name: String, r1: BytecodeRegister, cls: ClassDefId) {
        self.emitStart(name);
        println(" ${r1}, ${cls.value}");
    }

    fn emitStart(name: String) {
        print("${self.pos}: ${name}");
    }

    @override fn visitInstruction(offset: Int32) { self.pos = offset; }

    @override fn visitAdd(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("Add", dest, lhs, rhs); }
    @override fn visitSub(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("Sub", dest, lhs, rhs); }
    @override fn visitNeg(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("Neg", dest, src); }
    @override fn visitMul(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("Mul", dest, lhs, rhs); }
    @override fn visitDiv(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("Div", dest, lhs, rhs); }
    @override fn visitMod(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("Mod", dest, lhs, rhs); }
    @override fn visitAnd(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("And", dest, lhs, rhs); }
    @override fn visitOr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("Or", dest, lhs, rhs); }
    @override fn visitXor(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("Xor", dest, lhs, rhs); }
    @override fn visitNot(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("Not", dest, src); }
    @override fn visitShl(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("Shl", dest, lhs, rhs); }
    @override fn visitShr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("Shr", dest, lhs, rhs); }
    @override fn visitSar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("Sar", dest, lhs, rhs); }

    @override fn visitInstanceOf(dest: BytecodeRegister, src: BytecodeRegister, idx: ConstPoolId) { self.emitReg2AndIdx("InstanceOf", dest, src, idx); }
    @override fn visitCheckedCast(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("CheckedCast", dest, idx); }

    @override fn visitMov(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("Mov", dest, src); }

    @override fn visitLoadField(dest: BytecodeRegister, obj: BytecodeRegister, idx: ConstPoolId) { self.emitReg2AndIdx("LoadField", dest, obj, idx); }
    @override fn visitStoreField(src: BytecodeRegister, obj: BytecodeRegister, idx: ConstPoolId) { self.emitReg2AndIdx("StoreField", src, obj, idx); }

    @override fn visitLoadGlobal(dest: BytecodeRegister, glob: GlobalId) { self.emitGlobal("LoadGlobal", dest, glob); }
    @override fn visitStoreGlobal(src: BytecodeRegister, glob: GlobalId) { self.emitGlobal("StoreGlobal", src, glob); }

    @override fn visitPushRegister(src: BytecodeRegister) { self.emitReg1("PushRegister", src); }

    @override fn visitConstTrue(dest: BytecodeRegister) { self.emitReg1("ConstTrue", dest); }
    @override fn visitConstFalse(dest: BytecodeRegister) { self.emitReg1("ConstFalse", dest); }
    @override fn visitConstUInt8(dest: BytecodeRegister, value: UInt8) { self.emitReg1AndInt("ConstUInt8", dest, value.toInt32()); }
    @override fn visitConstChar(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstChar", dest, idx); }
    @override fn visitConstInt32(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstInt32", dest, idx); }
    @override fn visitConstInt64(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstInt64", dest, idx); }
    @override fn visitConstFloat32(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstFloat32", dest, idx); }
    @override fn visitConstFloat64(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstFloat64", dest, idx); }
    @override fn visitConstString(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstString", dest, idx); }

    @override fn visitTestIdentity(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestIdentity", dest, lhs, rhs); }
    @override fn visitTestEq(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestEq", dest, lhs, rhs); }
    @override fn visitTestNe(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestNe", dest, lhs, rhs); }
    @override fn visitTestGt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGt", dest, lhs, rhs); }
    @override fn visitTestGe(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGe", dest, lhs, rhs); }
    @override fn visitTestLt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLt", dest, lhs, rhs); }
    @override fn visitTestLe(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLe", dest, lhs, rhs); }

    @override fn visitJumpLoop(offset: Int32) { self.emitInt("JumpLoop", offset); }
    
    @override fn visitJumpIfFalse(opnd: BytecodeRegister, offset: Int32) { self.emitReg1AndInt("JumpIfFalse", opnd, offset); }
    @override fn visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("JumpIfFalseConst", opnd, idx); }
    @override fn visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) { self.emitReg1AndInt("JumpIfTrue", opnd, offset); }
    @override fn visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("JumpIfTrueConst", opnd, idx); }
    @override fn visitJump(offset: Int32) { self.emitInt("Jump", offset); }
    @override fn visitJumpConst(idx: ConstPoolId) { self.emitIdx("JumpConst", idx); }

    @override fn visitInvokeDirectVoid(idx: ConstPoolId) { self.emitIdx("InvokeDirectVoid", idx); }
    @override fn visitInvokeDirect(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("InvokeDirect", dest, idx); }

    @override fn visitInvokeVirtualVoid(idx: ConstPoolId) { self.emitIdx("InvokeVirtualVoid", idx); }
    @override fn visitInvokeVirtual(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("InvokeVirtual", dest, idx); }

    @override fn visitInvokeStaticVoid(idx: ConstPoolId) { self.emitIdx("InvokeStaticVoid", idx); }
    @override fn visitInvokeStatic(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("InvokeStatic", dest, idx); }

    @override fn visitNewObject(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("NewObject", dest, idx); }
    
    @override fn visitNilCheck(obj: BytecodeRegister) { self.emitReg1("NilCheck", obj); }

    @override fn visitArrayLength(dest: BytecodeRegister, arr: BytecodeRegister) { self.emitReg2("ArrayLength", dest, arr); }
    @override fn visitArrayBoundCheck(arr: BytecodeRegister, idx: BytecodeRegister) { self.emitReg2("ArrayBoundCheck", arr, idx); }

    @override fn visitLoadArray(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { self.emitReg3("LoadArray", dest, arr, idx); }
    @override fn visitStoreArray(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { self.emitReg3("StoreArray", src, arr, idx); }

    @override fn visitRetVoid() { self.emitInst("RetVoid"); }
    @override fn visitRet(opnd: BytecodeRegister) { self.emitReg1("Ret", opnd); }
}