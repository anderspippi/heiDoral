fn bytecodeDump(bc: BytecodeFunction) {
    let dumper = BytecodeDumper(bc);
    readBytecode(bc.code, dumper);

    var i = 0i64;

    for entry in bc.const_pool {
        println("@${i} = ${entry.toString()}");
        i = i + 1i64;
    }

    i = 0i64;
    for ty in bc.registers {
        println("r${i} = ${ty}");
        i = i + 1i64;
    }
}

class BytecodeDumper(let bc: BytecodeFunction): BytecodeVisitor {
    var pos: Int32 = 0;

    fn emitInst(name: String) {
        self.emitStart(name);
        println("");
    }

    fn emitReg3(name: String, r1: BytecodeRegister, r2: BytecodeRegister, r3: BytecodeRegister) {
        self.emitStart(name);
        println(" ${r1}, ${r2}, ${r3}");
    }

    fn emitReg2(name: String, r1: BytecodeRegister, r2: BytecodeRegister) {
        self.emitStart(name);
        println(" ${r1}, ${r2}");
    }

    fn emitReg2AndCls(name: String, r1: BytecodeRegister, r2: BytecodeRegister, cls: ClassDefId) {
        self.emitStart(name);
        println(" ${r1}, ${r2}, ${cls.value}");
    }

    fn emitReg1(name: String, r1: BytecodeRegister) {
        self.emitStart(name);
        println(" ${r1}")
    }

    fn emitReg1AndCls(name: String, r1: BytecodeRegister, cls: ClassDefId) {
        self.emitStart(name);
        println(" ${r1}, ${cls.value}")
    }

    fn emitReg1AndIdx(name: String, r1: BytecodeRegister, idx: ConstPoolId) {
        self.emitStart(name);
        println(" ${r1}, @${idx.value}");
    }

    fn emitIdx(name: String, idx: ConstPoolId) {
        self.emitStart(name);
        println(" @${idx.value}");
    }

    fn emitReg1AndInt(name: String, r1: BytecodeRegister, value: Int32) {
        self.emitStart(name);
        println(" ${r1}, ${value}");
    }

    fn emitInt(name: String, value: Int32) {
        self.emitStart(name);
        println(" ${value}");
    }

    fn emitField(
        name: String,
        r1: BytecodeRegister,
        r2: BytecodeRegister,
        cid: ClassDefId,
        fid: FieldId,
    ) {
        self.emitStart(name);
        println(" ${r1}, ${r2}, ${cid.value}:${fid.value}");
    }

    fn emitGlobal(name: String, r1: BytecodeRegister, gid: GlobalId) {
        self.emitStart(name);
        println(" ${r1}, ${gid.value}");
    }

    fn emitFctVoid(name: String, fid: FctId) {
        self.emitStart(name);
        println(" ${fid.value}");
    }

    fn emitFct(name: String, r1: BytecodeRegister, fid: FctId) {
        self.emitStart(name);
        println(" ${r1}, ${fid.value}");
    }

    fn emitNew(name: String, r1: BytecodeRegister, cls: ClassDefId) {
        self.emitStart(name);
        println(" ${r1}, ${cls.value}");
    }

    fn emitStart(name: String) {
        print("${self.pos}: ${name}");
    }

    @override fn visitInstruction(offset: Int32) { self.pos = offset; }

    @override fn visitAddInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("AddInt32", dest, lhs, rhs); }
    @override fn visitAddInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("AddInt64", dest, lhs, rhs); }
    @override fn visitAddFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("AddFloat32", dest, lhs, rhs); }
    @override fn visitAddFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("AddFloat64", dest, lhs, rhs); }

    @override fn visitSubInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("SubInt32", dest, lhs, rhs); }
    @override fn visitSubInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("SubInt64", dest, lhs, rhs); }
    @override fn visitSubFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("SubFloat32", dest, lhs, rhs); }
    @override fn visitSubFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("SubFloat64", dest, lhs, rhs); }

    @override fn visitNegInt32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NegInt32", dest, src); }
    @override fn visitNegInt64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NegInt64", dest, src); }
    @override fn visitNegFloat32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NegFloat32", dest, src); }
    @override fn visitNegFloat64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NegFloat64", dest, src); }

    @override fn visitMulInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("MulInt32", dest, lhs, rhs); }
    @override fn visitMulInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("MulInt64", dest, lhs, rhs); }
    @override fn visitMulFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("MulFloat32", dest, lhs, rhs); }
    @override fn visitMulFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("MulFloat64", dest, lhs, rhs); }

    @override fn visitDivInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("DivInt32", dest, lhs, rhs); }
    @override fn visitDivInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("DivInt64", dest, lhs, rhs); }
    @override fn visitDivFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("DivFloat32", dest, lhs, rhs); }
    @override fn visitDivFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("DivFloat64", dest, lhs, rhs); }

    @override fn visitModInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("ModInt32", dest, lhs, rhs); }
    @override fn visitModInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("ModInt64", dest, lhs, rhs); }

    @override fn visitAndInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("AndInt32", dest, lhs, rhs); }
    @override fn visitAndInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("AndInt64", dest, lhs, rhs); }

    @override fn visitOrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("OrInt32", dest, lhs, rhs); }
    @override fn visitOrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("OrInt64", dest, lhs, rhs); }

    @override fn visitXorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("XorInt32", dest, lhs, rhs); }
    @override fn visitXorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("XorInt64", dest, lhs, rhs); }

    @override fn visitNotBool(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NotBool", dest, src); }
    @override fn visitNotInt32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NotInt32", dest, src); }
    @override fn visitNotInt64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NotInt64", dest, src); }

    @override fn visitShlInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("ShlInt32", dest, lhs, rhs); }
    @override fn visitShrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("ShrInt32", dest, lhs, rhs); }
    @override fn visitSarInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("SarInt32", dest, lhs, rhs); }

    @override fn visitShlInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("ShlInt64", dest, lhs, rhs); }
    @override fn visitShrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("ShrInt64", dest, lhs, rhs); }
    @override fn visitSarInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("SarInt64", dest, lhs, rhs); }

    @override fn visitInstanceOf(dest: BytecodeRegister, src: BytecodeRegister, cls: ClassDefId) { self.emitReg2AndCls("InstanceOf", dest, src, cls); }
    @override fn visitCheckedCast(dest: BytecodeRegister, cls: ClassDefId) { self.emitReg1AndCls("CheckedCast", dest, cls); }

    @override fn visitMov(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("Mov", dest, src); }

    @override fn visitLoadField(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("LoadField", dest, obj, cls, field); }
    @override fn visitStoreField(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("StoreField", src, obj, cls, field); }

    @override fn visitLoadGlobal(dest: BytecodeRegister, glob: GlobalId) { self.emitGlobal("LoadGlobal", dest, glob); }
    @override fn visitStoreGlobal(src: BytecodeRegister, glob: GlobalId) { self.emitGlobal("StoreGlobal", src, glob); }

    @override fn visitPushRegister(src: BytecodeRegister) { self.emitReg1("PushRegister", src); }

    @override fn visitConstTrue(dest: BytecodeRegister) { self.emitReg1("ConstTrue", dest); }
    @override fn visitConstFalse(dest: BytecodeRegister) { self.emitReg1("ConstFalse", dest); }
    @override fn visitConstUInt8(dest: BytecodeRegister, value: UInt8) { self.emitReg1AndInt("ConstUInt8", dest, value.toInt32()); }
    @override fn visitConstChar(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstChar", dest, idx); }
    @override fn visitConstInt32(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstInt32", dest, idx); }
    @override fn visitConstInt64(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstInt64", dest, idx); }
    @override fn visitConstFloat32(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstFloat32", dest, idx); }
    @override fn visitConstFloat64(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstFloat64", dest, idx); }
    @override fn visitConstString(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstString", dest, idx); }

    @override fn visitTestIdentity(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestIdentity", dest, lhs, rhs); }
    @override fn visitTestEq(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestEq", dest, lhs, rhs); }
    @override fn visitTestNe(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestNe", dest, lhs, rhs); }
    @override fn visitTestGt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGt", dest, lhs, rhs); }
    @override fn visitTestGe(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGe", dest, lhs, rhs); }
    @override fn visitTestLt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLt", dest, lhs, rhs); }
    @override fn visitTestLe(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLe", dest, lhs, rhs); }

    @override fn visitJumpLoop(offset: Int32) { self.emitInt("JumpLoop", offset); }
    
    @override fn visitJumpIfFalse(opnd: BytecodeRegister, offset: Int32) { self.emitReg1AndInt("JumpIfFalse", opnd, offset); }
    @override fn visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("JumpIfFalseConst", opnd, idx); }
    @override fn visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) { self.emitReg1AndInt("JumpIfTrue", opnd, offset); }
    @override fn visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("JumpIfTrueConst", opnd, idx); }
    @override fn visitJump(offset: Int32) { self.emitInt("Jump", offset); }
    @override fn visitJumpConst(idx: ConstPoolId) { self.emitIdx("JumpConst", idx); }

    @override fn visitInvokeDirectVoid(fct: FctId) { self.emitFctVoid("InvokeDirectVoid", fct); }
    @override fn visitInvokeDirect(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeDirect", dest, fct); }

    @override fn visitInvokeVirtualVoid(fct: FctId) { self.emitFctVoid("InvokeVirtualVoid", fct); }
    @override fn visitInvokeVirtual(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeVirtual", dest, fct); }

    @override fn visitInvokeStaticVoid(fct: FctId) { self.emitFctVoid("InvokeStaticVoid", fct); }
    @override fn visitInvokeStatic(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeStatic", dest, fct); }

    @override fn visitNewObject(dest: BytecodeRegister, cls: ClassDefId) { self.emitNew("NewObject", dest, cls); }
    
    @override fn visitNilCheck(obj: BytecodeRegister) { self.emitReg1("NilCheck", obj); }

    @override fn visitArrayLength(dest: BytecodeRegister, arr: BytecodeRegister) { self.emitReg2("ArrayLength", dest, arr); }
    @override fn visitArrayBoundCheck(arr: BytecodeRegister, idx: BytecodeRegister) { self.emitReg2("ArrayBoundCheck", arr, idx); }

    @override fn visitLoadArray(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { self.emitReg3("LoadArray", dest, arr, idx); }
    @override fn visitStoreArray(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { self.emitReg3("StoreArray", src, arr, idx); }

    @override fn visitRetVoid() { self.emitInst("RetVoid"); }
    @override fn visitRet(opnd: BytecodeRegister) { self.emitReg1("Ret", opnd); }
}