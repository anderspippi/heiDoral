@open @abstract class BytecodeVisitor {
    @abstract fun visitAddInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitAddLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitAddFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitAddDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitSubInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitSubLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitSubFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitSubDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitNegInt(dest: BytecodeRegister, src: BytecodeRegister);
    @abstract fun visitNegLong(dest: BytecodeRegister, src: BytecodeRegister);
    @abstract fun visitNegFloat(dest: BytecodeRegister, src: BytecodeRegister);
    @abstract fun visitNegDouble(dest: BytecodeRegister, src: BytecodeRegister);

    @abstract fun visitMulInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitMulLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitMulFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitMulDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitDivInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitDivLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitDivFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitDivDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitModInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitModLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitAndInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitAndLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitOrInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitOrLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitXorInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitXorLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitNotBool(dest: BytecodeRegister, src: BytecodeRegister);
    @abstract fun visitNotInt(dest: BytecodeRegister, src: BytecodeRegister);
    @abstract fun visitNotLong(dest: BytecodeRegister, src: BytecodeRegister);

    @abstract fun visitShlInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitShrInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitSarInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitShlLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitShrLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitSarLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitMovBool(dest: BytecodeRegister, src: BytecodeRegister);
    @abstract fun visitMovByte(dest: BytecodeRegister, src: BytecodeRegister);
    @abstract fun visitMovChar(dest: BytecodeRegister, src: BytecodeRegister);
    @abstract fun visitMovInt(dest: BytecodeRegister, src: BytecodeRegister);
    @abstract fun visitMovLong(dest: BytecodeRegister, src: BytecodeRegister);
    @abstract fun visitMovFloat(dest: BytecodeRegister, src: BytecodeRegister);
    @abstract fun visitMovDouble(dest: BytecodeRegister, src: BytecodeRegister);
    @abstract fun visitMovPtr(dest: BytecodeRegister, src: BytecodeRegister);

    @abstract fun visitLoadFieldBool(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitLoadFieldByte(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitLoadFieldChar(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitLoadFieldInt(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitLoadFieldLong(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitLoadFieldFloat(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitLoadFieldDouble(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitLoadFieldPtr(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);

    @abstract fun visitStoreFieldBool(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitStoreFieldByte(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitStoreFieldChar(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitStoreFieldInt(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitStoreFieldLong(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitStoreFieldFloat(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitStoreFieldDouble(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);
    @abstract fun visitStoreFieldPtr(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId);

    @abstract fun visitLoadGlobalBool(dest: BytecodeRegister, glob: GlobalId);
    @abstract fun visitLoadGlobalByte(dest: BytecodeRegister, glob: GlobalId);
    @abstract fun visitLoadGlobalChar(dest: BytecodeRegister, glob: GlobalId);
    @abstract fun visitLoadGlobalInt(dest: BytecodeRegister, glob: GlobalId);
    @abstract fun visitLoadGlobalLong(dest: BytecodeRegister, glob: GlobalId);
    @abstract fun visitLoadGlobalFloat(dest: BytecodeRegister, glob: GlobalId);
    @abstract fun visitLoadGlobalDouble(dest: BytecodeRegister, glob: GlobalId);
    @abstract fun visitLoadGlobalPtr(dest: BytecodeRegister, glob: GlobalId);

    @abstract fun visitStoreGlobalBool(src: BytecodeRegister, glob: GlobalId);
    @abstract fun visitStoreGlobalByte(src: BytecodeRegister, glob: GlobalId);
    @abstract fun visitStoreGlobalChar(src: BytecodeRegister, glob: GlobalId);
    @abstract fun visitStoreGlobalInt(src: BytecodeRegister, glob: GlobalId);
    @abstract fun visitStoreGlobalLong(src: BytecodeRegister, glob: GlobalId);
    @abstract fun visitStoreGlobalFloat(src: BytecodeRegister, glob: GlobalId);
    @abstract fun visitStoreGlobalDouble(src: BytecodeRegister, glob: GlobalId);
    @abstract fun visitStoreGlobalPtr(src: BytecodeRegister, glob: GlobalId);

    @abstract fun visitConstNil(dest: BytecodeRegister);
    @abstract fun visitConstTrue(dest: BytecodeRegister);
    @abstract fun visitConstFalse(dest: BytecodeRegister);
    @abstract fun visitConstZeroByte(dest: BytecodeRegister);
    @abstract fun visitConstZeroChar(dest: BytecodeRegister);
    @abstract fun visitConstZeroInt(dest: BytecodeRegister);
    @abstract fun visitConstZeroLong(dest: BytecodeRegister);
    @abstract fun visitConstZeroFloat(dest: BytecodeRegister);
    @abstract fun visitConstZeroDouble(dest: BytecodeRegister);
    @abstract fun visitConstByte(dest: BytecodeRegister, value: Byte);
    @abstract fun visitConstChar(dest: BytecodeRegister, value: ConstPoolId);
    @abstract fun visitConstInt(dest: BytecodeRegister, value: ConstPoolId);
    @abstract fun visitConstLong(dest: BytecodeRegister, value: ConstPoolId);
    @abstract fun visitConstFloat(dest: BytecodeRegister, value: ConstPoolId);
    @abstract fun visitConstDouble(dest: BytecodeRegister, value: ConstPoolId);
    @abstract fun visitConstString(dest: BytecodeRegister, value: ConstPoolId);

    @abstract fun visitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitTestEqInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestNeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestGtInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestGeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestLtInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestLeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitTestEqLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestNeLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestGtLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestGeLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestLtLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestLeLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitTestEqFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestNeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestGtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestGeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestLtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestLeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitTestEqDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestNeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestGtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestGeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestLtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);
    @abstract fun visitTestLeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister);

    @abstract fun visitJumpLoop(offset: Int);
    
    @abstract fun visitJumpIfFalse(opnd: BytecodeRegister, offset: Int);
    @abstract fun visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId);
    @abstract fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int);
    @abstract fun visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId);
    @abstract fun visitJump(offset: Int);
    @abstract fun visitJumpConst(idx: ConstPoolId);

    @abstract fun visitInvokeDirectVoid(fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeDirectBool(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeDirectByte(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeDirectChar(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeDirectInt(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeDirectLong(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeDirectFloat(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeDirectDouble(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeDirectPtr(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);

    @abstract fun visitInvokeVirtualVoid(fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeVirtualBool(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeVirtualByte(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeVirtualChar(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeVirtualInt(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeVirtualLong(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeVirtualFloat(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeVirtualDouble(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeVirtualPtr(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);

    @abstract fun visitInvokeStaticVoid(fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeStaticBool(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeStaticByte(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeStaticChar(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeStaticInt(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeStaticLong(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeStaticFloat(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeStaticDouble(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);
    @abstract fun visitInvokeStaticPtr(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int);

    @abstract fun visitNewObject(dest: BytecodeRegister, cls: ClassDefId);
    
    @abstract fun visitThrow(opnd: BytecodeRegister);

    @abstract fun visitRetVoid();
    @abstract fun visitRetBool(opnd: BytecodeRegister);
    @abstract fun visitRetByte(opnd: BytecodeRegister);
    @abstract fun visitRetChar(opnd: BytecodeRegister);
    @abstract fun visitRetInt(opnd: BytecodeRegister);
    @abstract fun visitRetLong(opnd: BytecodeRegister);
    @abstract fun visitRetFloat(opnd: BytecodeRegister);
    @abstract fun visitRetDouble(opnd: BytecodeRegister);
    @abstract fun visitRetPtr(opnd: BytecodeRegister);
}

class BytecodeReader(let data: Array[Byte], let const_pool: Array[ConstPoolEntry], let visitor: BytecodeVisitor) {
    var pos: Int = 0;
    var length: Int = data.length();

    fun read() {
        while self.pos < self.length {
            let wide = self.hasWideOperands();
            let opcode = self.readOpcode(wide);
            self.readInstruction(wide, opcode);
        }
    }

    fun readInstruction(wide: Bool, opcode: Int) {
        if opcode == BC_WIDE {
            fatalError("unexpected WIDE");

        } else if opcode == BC_ADD_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddInt(dest, lhs, rhs);
        } else if opcode == BC_ADD_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddLong(dest, lhs, rhs);
        } else if opcode == BC_ADD_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddFloat(dest, lhs, rhs);
        } else if opcode == BC_ADD_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddDouble(dest, lhs, rhs);

        } else if opcode == BC_SUB_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubInt(dest, lhs, rhs);
        } else if opcode == BC_SUB_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubLong(dest, lhs, rhs);
        } else if opcode == BC_SUB_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubFloat(dest, lhs, rhs);
        } else if opcode == BC_SUB_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubDouble(dest, lhs, rhs);

        } else if opcode == BC_NEG_INT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegInt(dest, src);
        } else if opcode == BC_NEG_LONG {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegLong(dest, src);
        } else if opcode == BC_NEG_FLOAT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegFloat(dest, src);
        } else if opcode == BC_NEG_DOUBLE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegDouble(dest, src);

        } else if opcode == BC_MUL_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulInt(dest, lhs, rhs);
        } else if opcode == BC_MUL_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulLong(dest, lhs, rhs);
        } else if opcode == BC_MUL_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulFloat(dest, lhs, rhs);
        } else if opcode == BC_MUL_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulDouble(dest, lhs, rhs);

        } else if opcode == BC_DIV_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivInt(dest, lhs, rhs);
        } else if opcode == BC_DIV_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivLong(dest, lhs, rhs);
        } else if opcode == BC_DIV_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivFloat(dest, lhs, rhs);
        } else if opcode == BC_DIV_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivDouble(dest, lhs, rhs);

        } else if opcode == BC_MOD_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitModInt(dest, lhs, rhs);
        } else if opcode == BC_MOD_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitModLong(dest, lhs, rhs);

        } else if opcode == BC_AND_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAndInt(dest, lhs, rhs);
        } else if opcode == BC_AND_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAndLong(dest, lhs, rhs);

        } else if opcode == BC_OR_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitOrInt(dest, lhs, rhs);
        } else if opcode == BC_OR_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitOrLong(dest, lhs, rhs);

        } else if opcode == BC_XOR_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitXorInt(dest, lhs, rhs);
        } else if opcode == BC_XOR_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitXorLong(dest, lhs, rhs);

        } else if opcode == BC_NOT_BOOL {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotBool(dest, src);
        } else if opcode == BC_NOT_INT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotInt(dest, src);
        } else if opcode == BC_NOT_LONG {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotLong(dest, src);

        } else if opcode == BC_SHL_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt(dest, lhs, rhs);

        } else if opcode == BC_SHL_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlLong(dest, lhs, rhs);
        } else if opcode == BC_SHR_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrLong(dest, lhs, rhs);
        } else if opcode == BC_SAR_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarLong(dest, lhs, rhs);

        } else if opcode == BC_MOV_BOOL {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovBool(dest, src);
        } else if opcode == BC_MOV_BYTE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovByte(dest, src);
        } else if opcode == BC_MOV_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovChar(dest, src);
        } else if opcode == BC_MOV_INT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovInt(dest, src);
        } else if opcode == BC_MOV_LONG {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovLong(dest, src);
        } else if opcode == BC_MOV_FLOAT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovFloat(dest, src);
        } else if opcode == BC_MOV_DOUBLE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovDouble(dest, src);
        } else if opcode == BC_MOV_PTR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovPtr(dest, src);

        } else if opcode == BC_LOAD_FIELD_BOOL {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldBool(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_BYTE {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldByte(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_CHAR {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldChar(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_INT {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldInt(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_LONG {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldLong(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_FLOAT {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldFloat(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_DOUBLE {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldDouble(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_PTR {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldPtr(dest, obj, cls, field);

        } else if opcode == BC_STORE_FIELD_BOOL {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldBool(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_BYTE {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldByte(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_CHAR {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldChar(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_INT {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldInt(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_LONG {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldLong(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_FLOAT {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldFloat(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_DOUBLE {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldDouble(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_PTR {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldPtr(src, obj, cls, field);

        } else if opcode == BC_LOAD_GLOBAL_BOOL {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalBool(dest, glob);
        } else if opcode == BC_LOAD_GLOBAL_BYTE {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalByte(dest, glob);
        } else if opcode == BC_LOAD_FIELD_CHAR {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalChar(dest, glob);
        } else if opcode == BC_LOAD_FIELD_INT {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalInt(dest, glob);
        } else if opcode == BC_LOAD_FIELD_LONG {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalLong(dest, glob);
        } else if opcode == BC_LOAD_FIELD_FLOAT {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalFloat(dest, glob);
        } else if opcode == BC_LOAD_FIELD_DOUBLE {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalDouble(dest, glob);
        } else if opcode == BC_LOAD_FIELD_PTR {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalPtr(dest, glob);

        } else if opcode == BC_STORE_GLOBAL_BOOL {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalBool(src, glob);
        } else if opcode == BC_STORE_GLOBAL_BYTE {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalByte(src, glob);
        } else if opcode == BC_STORE_FIELD_CHAR {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalChar(src, glob);
        } else if opcode == BC_STORE_FIELD_INT {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalInt(src, glob);
        } else if opcode == BC_STORE_FIELD_LONG {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalLong(src, glob);
        } else if opcode == BC_STORE_FIELD_FLOAT {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalFloat(src, glob);
        } else if opcode == BC_STORE_FIELD_DOUBLE {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalDouble(src, glob);
        } else if opcode == BC_STORE_FIELD_PTR {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalPtr(src, glob);

        } else if opcode == BC_CONST_NIL {
            let dest = self.readRegister(wide);
            self.visitor.visitConstNil(dest);
        } else if opcode == BC_CONST_TRUE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstTrue(dest);
        } else if opcode == BC_CONST_FALSE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstFalse(dest);
        } else if opcode == BC_CONST_ZERO_BYTE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroByte(dest);
        } else if opcode == BC_CONST_ZERO_CHAR {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroChar(dest);
        } else if opcode == BC_CONST_ZERO_INT {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroInt(dest);
        } else if opcode == BC_CONST_ZERO_LONG {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroLong(dest);
        } else if opcode == BC_CONST_ZERO_FLOAT {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroFloat(dest);
        } else if opcode == BC_CONST_ZERO_DOUBLE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroDouble(dest);
        } else if opcode == BC_CONST_BYTE {
            let dest = self.readRegister(wide);
            let value = self.readIndex(wide).toByte();
            self.visitor.visitConstByte(dest, value);
        } else if opcode == BC_CONST_CHAR {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstChar(dest, idx);
        } else if opcode == BC_CONST_INT {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstInt(dest, idx);
        } else if opcode == BC_CONST_LONG {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstLong(dest, idx);
        } else if opcode == BC_CONST_FLOAT {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstFloat(dest, idx);
        } else if opcode == BC_CONST_DOUBLE {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstDouble(dest, idx);
        } else if opcode == BC_CONST_STRING {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstString(dest, idx);

        } else if opcode == BC_TEST_EQ_PTR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqPtr(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_PTR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNePtr(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqInt(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeInt(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtInt(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeInt(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtInt(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeInt(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqLong(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeLong(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtLong(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeLong(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtLong(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeLong(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeFloat(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeDouble(dest, lhs, rhs);

        } else if opcode == BC_JUMP_LOOP {
            let offset = self.readOffset(wide);
            self.visitor.visitJumpLoop(offset);

        } else if opcode == BC_JUMP_IF_FALSE {
            let opnd = self.readRegister(wide);
            let offset = self.readOffset(wide);
            self.visitor.visitJumpIfFalse(opnd, offset);
        } else if opcode == BC_JUMP_IF_FALSE_CONST {
            let opnd = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpIfFalseConst(opnd, idx);
        } else if opcode == BC_JUMP_IF_TRUE {
            let opnd = self.readRegister(wide);
            let offset = self.readOffset(wide);
            self.visitor.visitJumpIfTrue(opnd, offset);
        } else if opcode == BC_JUMP_IF_TRUE_CONST {
            let opnd = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpIfTrueConst(opnd, idx);
        } else if opcode == BC_JUMP {
            let offset = self.readOffset(wide);
            self.visitor.visitJump(offset);
        } else if opcode == BC_JUMP_CONST {
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpConst(idx);

        } else if opcode == BC_INVOKE_DIRECT_VOID {
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectVoid(fct, start, count);
        } else if opcode == BC_INVOKE_DIRECT_BOOL {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectBool(dest, fct, start, count);
        } else if opcode == BC_INVOKE_DIRECT_BYTE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectByte(dest, fct, start, count);
        } else if opcode == BC_INVOKE_DIRECT_CHAR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectChar(dest, fct, start, count);
        } else if opcode == BC_INVOKE_DIRECT_INT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectInt(dest, fct, start, count);
        } else if opcode == BC_INVOKE_DIRECT_LONG {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectLong(dest, fct, start, count);
        } else if opcode == BC_INVOKE_DIRECT_FLOAT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectFloat(dest, fct, start, count);
        } else if opcode == BC_INVOKE_DIRECT_DOUBLE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectDouble(dest, fct, start, count);
        } else if opcode == BC_INVOKE_DIRECT_PTR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectPtr(dest, fct, start, count);

        } else if opcode == BC_INVOKE_VIRTUAL_VOID {
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualVoid(fct, start, count);
        } else if opcode == BC_INVOKE_VIRTUAL_BOOL {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualBool(dest, fct, start, count);
        } else if opcode == BC_INVOKE_VIRTUAL_BYTE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualByte(dest, fct, start, count);
        } else if opcode == BC_INVOKE_VIRTUAL_CHAR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualChar(dest, fct, start, count);
        } else if opcode == BC_INVOKE_VIRTUAL_INT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualInt(dest, fct, start, count);
        } else if opcode == BC_INVOKE_VIRTUAL_LONG {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualLong(dest, fct, start, count);
        } else if opcode == BC_INVOKE_VIRTUAL_FLOAT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualFloat(dest, fct, start, count);
        } else if opcode == BC_INVOKE_VIRTUAL_DOUBLE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualDouble(dest, fct, start, count);
        } else if opcode == BC_INVOKE_VIRTUAL_PTR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualPtr(dest, fct, start, count);

        } else if opcode == BC_INVOKE_STATIC_VOID {
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticVoid(fct, start, count);
        } else if opcode == BC_INVOKE_STATIC_BOOL {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticBool(dest, fct, start, count);
        } else if opcode == BC_INVOKE_STATIC_BYTE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticByte(dest, fct, start, count);
        } else if opcode == BC_INVOKE_STATIC_CHAR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticChar(dest, fct, start, count);
        } else if opcode == BC_INVOKE_STATIC_INT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticInt(dest, fct, start, count);
        } else if opcode == BC_INVOKE_STATIC_LONG {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticLong(dest, fct, start, count);
        } else if opcode == BC_INVOKE_STATIC_FLOAT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticFloat(dest, fct, start, count);
        } else if opcode == BC_INVOKE_STATIC_DOUBLE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticDouble(dest, fct, start, count);
        } else if opcode == BC_INVOKE_STATIC_PTR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let start = self.readRegister(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticPtr(dest, fct, start, count);

        } else if opcode == BC_NEW_OBJECT {
            let dest = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            self.visitor.visitNewObject(dest, cls);

        } else if opcode == BC_THROW {
            let opnd = self.readRegister(wide);
            self.visitor.visitThrow(opnd);

        } else if opcode == BC_RET_VOID {
            self.visitor.visitRetVoid();
        } else if opcode == BC_RET_BOOL {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetBool(opnd);
        } else if opcode == BC_RET_BYTE {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetByte(opnd);
        } else if opcode == BC_RET_CHAR {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetChar(opnd);
        } else if opcode == BC_RET_INT {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetInt(opnd);
        } else if opcode == BC_RET_LONG {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetLong(opnd);
        } else if opcode == BC_RET_FLOAT {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetFloat(opnd);
        } else if opcode == BC_RET_DOUBLE {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetDouble(opnd);
        } else if opcode == BC_RET_PTR {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetPtr(opnd);

        } else {
            fatalError("unkown opcode ${opcode}");
        }
    }

    fun readRegister(wide: Bool) -> BytecodeRegister {
        BytecodeRegister(self.readIndex(wide))
    }

    fun hasWideOperands() -> Bool {
        let data = self.data;
        let value = data(self.pos);

        if value.toInt() == BC_WIDE {
            self.pos = self.pos + 1;
            true
        } else {
            false
        }
    }

    fun readOpcode(wide: Bool) -> Int {
        self.readIndex(wide)
    }

    fun readClassDefId(wide: Bool) -> ClassDefId {
        ClassDefId(self.readIndex(wide))
    }

    fun readGlobalId(wide: Bool) -> GlobalId {
        GlobalId(self.readIndex(wide))
    }

    fun readFieldId(wide: Bool) -> FieldId {
        FieldId(self.readIndex(wide))
    }

    fun readFctId(wide: Bool) -> FctId {
        FctId(self.readIndex(wide))
    }

    fun readConstPoolId(wide: Bool) -> ConstPoolId {
        ConstPoolId(self.readIndex(wide))
    }

    fun readOffset(wide: Bool) -> Int {
        self.readIndex(wide)
    }

    fun readIndex(wide: Bool) -> Int {
        if wide {
            self.readInt()
        } else {
            self.readByte()
        }
    }

    fun readByte() -> Int {
        let data = self.data;
        let value = data(self.pos);
        self.pos = self.pos + 1;

        value.toInt()
    }

    fun readInt() -> Int {
        let by1 = self.readByte();
        let by2 = self.readByte();
        let by3 = self.readByte();
        let by4 = self.readByte();

        (by4 << 24) | (by3 << 16) | (by2 << 8) | by1
    }
}
