fn readBytecode(code: Array[UInt8], visitor: BytecodeVisitor) {
    BytecodeReader(code, visitor).read();
}

@open @abstract class BytecodeVisitor {
    @open fn visitInstruction(offset: Int32) {}

    @open fn visitAddInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitAddInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitAddFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitAddFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitSubInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitSubInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitSubFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitSubFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitNegInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitNegInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitNegFloat32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitNegFloat64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fn visitMulInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitMulInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitMulFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitMulFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitDivInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitDivInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitDivFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitDivFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitModInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitModInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitAndInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitAndInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitOrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitOrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitXorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitXorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitNotBool(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitNotInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitNotInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fn visitShlInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitShrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitSarInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitShlInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitShrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitSarInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitRolInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitRorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitRolInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitRorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitExtendUInt8ToChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitExtendUInt8ToInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitExtendUInt8ToInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitExtendInt32ToInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitExtendCharToInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fn visitCastCharToInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitCastInt32ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitCastInt32ToChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitCastInt64ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitCastInt64ToChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fn visitCastInt64ToInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fn visitInstanceOf(dest: BytecodeRegister, src: BytecodeRegister, cls: ClassDefId) { unimplemented(); }
    @open fn visitCheckedCast(src: BytecodeRegister, cls: ClassDefId) { unimplemented(); }

    @open fn visitMov(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fn visitLoadField(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fn visitStoreField(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }

    @open fn visitLoadGlobal(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fn visitStoreGlobal(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }

    @open fn visitPushRegister(src: BytecodeRegister) { unimplemented(); }

    @open fn visitConstTrue(dest: BytecodeRegister) { unimplemented(); }
    @open fn visitConstFalse(dest: BytecodeRegister) { unimplemented(); }
    @open fn visitConstZeroUInt8(dest: BytecodeRegister) { unimplemented(); }
    @open fn visitConstZeroChar(dest: BytecodeRegister) { unimplemented(); }
    @open fn visitConstZeroInt32(dest: BytecodeRegister) { unimplemented(); }
    @open fn visitConstZeroInt64(dest: BytecodeRegister) { unimplemented(); }
    @open fn visitConstZeroFloat32(dest: BytecodeRegister) { unimplemented(); }
    @open fn visitConstZeroFloat64(dest: BytecodeRegister) { unimplemented(); }
    @open fn visitConstUInt8(dest: BytecodeRegister, value: UInt8) { unimplemented(); }
    @open fn visitConstChar(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fn visitConstInt32(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fn visitConstInt64(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fn visitConstFloat32(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fn visitConstFloat64(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fn visitConstString(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }

    @open fn visitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitTestEqBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestNeBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitTestEqUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestNeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestGtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestGeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestLtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestLeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitTestEqChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestNeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestGtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestGeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestLtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestLeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitTestEqEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestNeEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitTestEqInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestNeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestGtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestGeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestLtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestLeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitTestEqInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestNeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestGtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestGeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestLtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestLeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitTestEqFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestNeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestGtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestGeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestLtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestLeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitTestEqFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestNeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestGtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestGeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestLtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fn visitTestLeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fn visitAssert(value: BytecodeRegister) { unimplemented(); }

    @open fn visitLoopStart() { unimplemented(); }
    @open fn visitJumpLoop(offset: Int32) { unimplemented(); }

    @open fn visitJumpIfFalse(opnd: BytecodeRegister, offset: Int32) { unimplemented(); }
    @open fn visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fn visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) { unimplemented(); }
    @open fn visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fn visitJump(offset: Int32) { unimplemented(); }
    @open fn visitJumpConst(idx: ConstPoolId) { unimplemented(); }

    @open fn visitInvokeDirectVoid(fct: FctId) { unimplemented(); }
    @open fn visitInvokeDirect(dest: BytecodeRegister, fct: FctId) { unimplemented(); }

    @open fn visitInvokeVirtualVoid(fct: FctId) { unimplemented(); }
    @open fn visitInvokeVirtual(dest: BytecodeRegister, fct: FctId) { unimplemented(); }

    @open fn visitInvokeStaticVoid(fct: FctId) { unimplemented(); }
    @open fn visitInvokeStatic(dest: BytecodeRegister, fct: FctId) { unimplemented(); }

    @open fn visitNewObject(dest: BytecodeRegister, cls: ClassDefId) { unimplemented(); }
    @open fn visitNewArray(dest: BytecodeRegister, cls: ClassDefId, length: BytecodeRegister) { unimplemented(); }
    
    @open fn visitNilCheck(obj: BytecodeRegister) { unimplemented(); }

    @open fn visitArrayLength(dest: BytecodeRegister, arr: BytecodeRegister) { unimplemented(); }
    @open fn visitArrayBoundCheck(arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }

    @open fn visitLoadArray(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fn visitStoreArray(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }

    @open fn visitRetVoid() { unimplemented(); }
    @open fn visitRet(opnd: BytecodeRegister) { unimplemented(); }
}

@open @abstract class EmptyBytecodeVisitor: BytecodeVisitor {
    @override fn visitAddInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitAddInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitAddFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitAddFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitSubInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitSubInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitSubFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitSubFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitNegInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitNegInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitNegFloat32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitNegFloat64(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fn visitMulInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitMulInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitMulFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitMulFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitDivInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitDivInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitDivFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitDivFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitModInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitModInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitAndInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitAndInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitOrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitOrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitXorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitXorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitNotBool(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitNotInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitNotInt64(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fn visitShlInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitShrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitSarInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitShlInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitShrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitSarInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitRolInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitRorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitRolInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitRorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitExtendUInt8ToChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitExtendUInt8ToInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitExtendUInt8ToInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitExtendInt32ToInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitExtendCharToInt64(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fn visitCastCharToInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitCastInt32ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitCastInt32ToChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitCastInt64ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitCastInt64ToChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fn visitCastInt64ToInt32(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fn visitInstanceOf(dest: BytecodeRegister, src: BytecodeRegister, cls: ClassDefId) {}
    @override fn visitCheckedCast(src: BytecodeRegister, cls: ClassDefId) {}

    @override fn visitMov(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fn visitLoadField(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fn visitStoreField(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}

    @override fn visitLoadGlobal(dest: BytecodeRegister, glob: GlobalId) {}
    @override fn visitStoreGlobal(src: BytecodeRegister, glob: GlobalId) {}

    @override fn visitPushRegister(src: BytecodeRegister) {}

    @override fn visitConstTrue(dest: BytecodeRegister) {}
    @override fn visitConstFalse(dest: BytecodeRegister) {}
    @override fn visitConstZeroUInt8(dest: BytecodeRegister) {}
    @override fn visitConstZeroChar(dest: BytecodeRegister) {}
    @override fn visitConstZeroInt32(dest: BytecodeRegister) {}
    @override fn visitConstZeroInt64(dest: BytecodeRegister) {}
    @override fn visitConstZeroFloat32(dest: BytecodeRegister) {}
    @override fn visitConstZeroFloat64(dest: BytecodeRegister) {}
    @override fn visitConstUInt8(dest: BytecodeRegister, value: UInt8) {}
    @override fn visitConstChar(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fn visitConstInt32(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fn visitConstInt64(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fn visitConstFloat32(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fn visitConstFloat64(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fn visitConstString(dest: BytecodeRegister, idx: ConstPoolId) {}

    @override fn visitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitTestEqBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestNeBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitTestEqUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestNeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestGtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestGeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestLtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestLeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitTestEqChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestNeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestGtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestGeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestLtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestLeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitTestEqEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestNeEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitTestEqInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestNeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestGtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestGeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestLtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestLeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitTestEqInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestNeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestGtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestGeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestLtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestLeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitTestEqFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestNeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestGtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestGeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestLtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestLeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitTestEqFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestNeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestGtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestGeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestLtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fn visitTestLeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fn visitAssert(value: BytecodeRegister) {}

    @override fn visitLoopStart() {}
    @override fn visitJumpLoop(offset: Int32) {}

    @override fn visitJumpIfFalse(opnd: BytecodeRegister, offset: Int32) {}
    @override fn visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) {}
    @override fn visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) {}
    @override fn visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) {}
    @override fn visitJump(offset: Int32) {}
    @override fn visitJumpConst(idx: ConstPoolId) {}

    @override fn visitInvokeDirectVoid(fct: FctId) {}
    @override fn visitInvokeDirect(dest: BytecodeRegister, fct: FctId) {}

    @override fn visitInvokeVirtualVoid(fct: FctId) {}
    @override fn visitInvokeVirtual(dest: BytecodeRegister, fct: FctId) {}

    @override fn visitInvokeStaticVoid(fct: FctId) {}
    @override fn visitInvokeStatic(dest: BytecodeRegister, fct: FctId) {}

    @override fn visitNewObject(dest: BytecodeRegister, cls: ClassDefId) {}
    @override fn visitNewArray(dest: BytecodeRegister, cls: ClassDefId, length: BytecodeRegister) {}

    @override fn visitNilCheck(obj: BytecodeRegister) {}

    @override fn visitArrayLength(dest: BytecodeRegister, arr: BytecodeRegister) {}
    @override fn visitArrayBoundCheck(arr: BytecodeRegister, idx: BytecodeRegister) {}

    @override fn visitLoadArray(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fn visitStoreArray(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}

    @override fn visitRetVoid() {}
    @override fn visitRet(opnd: BytecodeRegister) {}
}

class BytecodeReader(let data: Array[UInt8], let visitor: BytecodeVisitor) {
    var pos: Int32 = 0;
    var length: Int32 = data.size().toInt32();

    fn read() {
        while self.pos < self.length {
            self.visitor.visitInstruction(self.pos);
            let wide = self.hasWideOperands();
            let opcode = self.readOpcode();
            self.readInstruction(wide, opcode);
        }
    }

    fn readInstruction(wide: Bool, opcode: Int32) {
        if opcode == BC_WIDE {
            fatalError("unexpected WIDE");

        } else if opcode == BC_ADD_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddInt32(dest, lhs, rhs);
        } else if opcode == BC_ADD_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddInt32(dest, lhs, rhs);
        } else if opcode == BC_ADD_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddInt64(dest, lhs, rhs);
        } else if opcode == BC_ADD_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddFloat32(dest, lhs, rhs);
        } else if opcode == BC_ADD_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddFloat64(dest, lhs, rhs);

        } else if opcode == BC_SUB_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubInt32(dest, lhs, rhs);
        } else if opcode == BC_SUB_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubInt32(dest, lhs, rhs);
        } else if opcode == BC_SUB_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubInt64(dest, lhs, rhs);
        } else if opcode == BC_SUB_FLOAT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubFloat32(dest, lhs, rhs);
        } else if opcode == BC_SUB_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubFloat64(dest, lhs, rhs);

        } else if opcode == BC_NEG_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegInt32(dest, src);
        } else if opcode == BC_NEG_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegInt32(dest, src);
        } else if opcode == BC_NEG_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegInt64(dest, src);
        } else if opcode == BC_NEG_FLOAT32{
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegFloat32(dest, src);
        } else if opcode == BC_NEG_FLOAT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegFloat64(dest, src);

        } else if opcode == BC_MUL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulInt32(dest, lhs, rhs);
        } else if opcode == BC_MUL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulInt32(dest, lhs, rhs);
        } else if opcode == BC_MUL_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulInt64(dest, lhs, rhs);
        } else if opcode == BC_MUL_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulFloat32(dest, lhs, rhs);
        } else if opcode == BC_MUL_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulFloat64(dest, lhs, rhs);

        } else if opcode == BC_DIV_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivInt32(dest, lhs, rhs);
        } else if opcode == BC_DIV_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivInt32(dest, lhs, rhs);
        } else if opcode == BC_DIV_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivInt64(dest, lhs, rhs);
        } else if opcode == BC_DIV_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivFloat32(dest, lhs, rhs);
        } else if opcode == BC_DIV_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivFloat64(dest, lhs, rhs);

        } else if opcode == BC_MOD_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitModInt32(dest, lhs, rhs);
        } else if opcode == BC_MOD_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitModInt32(dest, lhs, rhs);
        } else if opcode == BC_MOD_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitModInt64(dest, lhs, rhs);

        } else if opcode == BC_AND_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAndInt32(dest, lhs, rhs);
        } else if opcode == BC_AND_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAndInt32(dest, lhs, rhs);
        } else if opcode == BC_AND_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAndInt64(dest, lhs, rhs);

        } else if opcode == BC_OR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitOrInt32(dest, lhs, rhs);
        } else if opcode == BC_OR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitOrInt32(dest, lhs, rhs);
        } else if opcode == BC_OR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitOrInt64(dest, lhs, rhs);

        } else if opcode == BC_XOR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitXorInt32(dest, lhs, rhs);
        } else if opcode == BC_XOR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitXorInt32(dest, lhs, rhs);
        } else if opcode == BC_XOR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitXorInt64(dest, lhs, rhs);

        } else if opcode == BC_NOT_BOOL {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotBool(dest, src);
        } else if opcode == BC_NOT_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotInt32(dest, src);
        } else if opcode == BC_NOT_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotInt32(dest, src);
        } else if opcode == BC_NOT_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotInt64(dest, src);

        } else if opcode == BC_SHL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt32(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt32(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt32(dest, lhs, rhs);

        } else if opcode == BC_SHL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt32(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt32(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt32(dest, lhs, rhs);

        } else if opcode == BC_SHL_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt64(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt64(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt64(dest, lhs, rhs);

        } else if opcode == BC_ROL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRolInt32(dest, lhs, rhs);
        } else if opcode == BC_ROR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRorInt32(dest, lhs, rhs);
        } else if opcode == BC_ROL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRolInt32(dest, lhs, rhs);
        } else if opcode == BC_ROR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRorInt32(dest, lhs, rhs);
        } else if opcode == BC_ROL_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRolInt64(dest, lhs, rhs);
        } else if opcode == BC_ROR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRorInt64(dest, lhs, rhs);

        } else if opcode == BC_EXTEND_UINT8_TO_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendUInt8ToChar(dest, src);

        } else if opcode == BC_EXTEND_UINT8_TO_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendUInt8ToInt32(dest, src);

        } else if opcode == BC_EXTEND_UINT8_TO_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendUInt8ToInt64(dest, src);

        } else if opcode == BC_EXTEND_INT32_TO_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendInt32ToInt64(dest, src);

        } else if opcode == BC_EXTEND_CHAR_TO_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendCharToInt64(dest, src);

        } else if opcode == BC_CAST_CHAR_TO_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastCharToInt32(dest, src);

        } else if opcode == BC_CAST_INT32_TO_UINT8 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt32ToUInt8(dest, src);

        } else if opcode == BC_CAST_INT32_TO_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt32ToChar(dest, src);

        } else if opcode == BC_CAST_INT64_TO_UINT8 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt64ToChar(dest, src);

        } else if opcode == BC_CAST_INT64_TO_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt64ToChar(dest, src);

        } else if opcode == BC_CAST_INT64_TO_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt64ToInt32(dest, src);

        } else if opcode == BC_INSTANCE_OF {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            self.visitor.visitInstanceOf(dest, src, cls);

        } else if opcode == BC_CHECKED_CAST {
            let src = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            self.visitor.visitCheckedCast(src, cls);

        } else if opcode == BC_SHL_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt64(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt64(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt64(dest, lhs, rhs);

        } else if opcode == BC_MOV {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMov(dest, src);

        } else if opcode == BC_LOAD_FIELD {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadField(dest, obj, cls, field);
        } else if opcode == BC_STORE_FIELD {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreField(src, obj, cls, field);

        } else if opcode == BC_LOAD_GLOBAL {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobal(dest, glob);
        } else if opcode == BC_STORE_GLOBAL {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobal(src, glob);

        } else if opcode == BC_PUSH_REGISTER {
            let src = self.readRegister(wide);
            self.visitor.visitPushRegister(src);

        } else if opcode == BC_CONST_TRUE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstTrue(dest);
        } else if opcode == BC_CONST_FALSE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstFalse(dest);
        } else if opcode == BC_CONST_ZERO_UINT8 {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroUInt8(dest);
        } else if opcode == BC_CONST_ZERO_CHAR {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroChar(dest);
        } else if opcode == BC_CONST_ZERO_INT32 {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroInt32(dest);
        } else if opcode == BC_CONST_ZERO_INT64 {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroInt64(dest);
        } else if opcode == BC_CONST_ZERO_FLOAT32{
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroFloat32(dest);
        } else if opcode == BC_CONST_ZERO_FLOAT64 {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroFloat64(dest);
        } else if opcode == BC_CONST_UINT8 {
            let dest = self.readRegister(wide);
            let value = self.readByte().toUInt8();
            self.visitor.visitConstUInt8(dest, value);
        } else if opcode == BC_CONST_CHAR {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstChar(dest, idx);
        } else if opcode == BC_CONST_INT32 {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstInt32(dest, idx);
        } else if opcode == BC_CONST_INT64 {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstInt64(dest, idx);
        } else if opcode == BC_CONST_FLOAT32{
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstFloat32(dest, idx);
        } else if opcode == BC_CONST_FLOAT64 {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstFloat64(dest, idx);
        } else if opcode == BC_CONST_STRING {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstString(dest, idx);

        } else if opcode == BC_TEST_EQ_BOOL {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqBool(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_BOOL {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeBool(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeUInt8(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeChar(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_ENUM {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqEnum(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_ENUM {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeEnum(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeInt32(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeInt64(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqFloat32(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeFloat32(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtFloat32(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeFloat32(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtFloat32(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeFloat32(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqFloat64(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeFloat64(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtFloat64(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeFloat64(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtFloat64(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeFloat64(dest, lhs, rhs);

        } else if opcode == BC_ASSERT {
            let value = self.readRegister(wide);
            self.visitor.visitAssert(value);

        } else if opcode == BC_LOOP_START {
            self.visitor.visitLoopStart();

        } else if opcode == BC_JUMP_LOOP {
            let offset = self.readOffset(wide);
            self.visitor.visitJumpLoop(offset);

        } else if opcode == BC_JUMP_IF_FALSE {
            let opnd = self.readRegister(wide);
            let offset = self.readOffset(wide);
            self.visitor.visitJumpIfFalse(opnd, offset);
        } else if opcode == BC_JUMP_IF_FALSE_CONST {
            let opnd = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpIfFalseConst(opnd, idx);
        } else if opcode == BC_JUMP_IF_TRUE {
            let opnd = self.readRegister(wide);
            let offset = self.readOffset(wide);
            self.visitor.visitJumpIfTrue(opnd, offset);
        } else if opcode == BC_JUMP_IF_TRUE_CONST {
            let opnd = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpIfTrueConst(opnd, idx);
        } else if opcode == BC_JUMP {
            let offset = self.readOffset(wide);
            self.visitor.visitJump(offset);
        } else if opcode == BC_JUMP_CONST {
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpConst(idx);

        } else if opcode == BC_INVOKE_DIRECT_VOID {
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeDirectVoid(fct);
        } else if opcode == BC_INVOKE_DIRECT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeDirect(dest, fct);

        } else if opcode == BC_INVOKE_VIRTUAL_VOID {
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeVirtualVoid(fct);
        } else if opcode == BC_INVOKE_VIRTUAL {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeVirtual(dest, fct);

        } else if opcode == BC_INVOKE_STATIC_VOID {
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeStaticVoid(fct);
        } else if opcode == BC_INVOKE_STATIC {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeStatic(dest, fct);

        } else if opcode == BC_NEW_OBJECT {
            let dest = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            self.visitor.visitNewObject(dest, cls);
        } else if opcode == BC_NEW_ARRAY {
            let dest = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let length = self.readRegister(wide);
            self.visitor.visitNewArray(dest, cls, length);

        } else if opcode == BC_NIL_CHECK {
            let obj = self.readRegister(wide);
            self.visitor.visitNilCheck(obj);
        } else if opcode == BC_ARRAY_BOUND_CHECK {
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitArrayBoundCheck(arr, idx);
        } else if opcode == BC_ARRAY_LENGTH {
            let dest = self.readRegister(wide);
            let arr = self.readRegister(wide);
            self.visitor.visitArrayLength(dest, arr);

        } else if opcode == BC_LOAD_ARRAY {
            let dest = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitLoadArray(dest, arr, idx);

        } else if opcode == BC_STORE_ARRAY {
            let src = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitStoreArray(src, arr, idx);

        } else if opcode == BC_RET_VOID {
            self.visitor.visitRetVoid();
        } else if opcode == BC_RET {
            let opnd = self.readRegister(wide);
            self.visitor.visitRet(opnd);

        } else {
            fatalError("unkown opcode ${opcode} ${bytecodeName(opcode)}");
        }
    }

    fn readRegister(wide: Bool): BytecodeRegister {
        BytecodeRegister(self.readIndex(wide))
    }

    fn hasWideOperands(): Bool {
        let data = self.data;
        let value = data(self.pos.toInt64());

        if value.toInt32() == BC_WIDE {
            self.pos = self.pos + 1i32;
            true
        } else {
            false
        }
    }

    fn readOpcode(): Int32 {
        let first = self.readByte();

        if first == 255i32 {
            let second = self.readByte();
            second + 255i32
        } else {
            first
        }
    }

    fn readClassDefId(wide: Bool): ClassDefId {
        ClassDefId(self.readIndex(wide))
    }

    fn readGlobalId(wide: Bool): GlobalId {
        GlobalId(self.readIndex(wide))
    }

    fn readFieldId(wide: Bool): FieldId {
        FieldId(self.readIndex(wide))
    }

    fn readFctId(wide: Bool): FctId {
        FctId(self.readIndex(wide))
    }

    fn readConstPoolId(wide: Bool): ConstPoolId {
        ConstPoolId(self.readIndex(wide))
    }

    fn readOffset(wide: Bool): Int32 {
        self.readIndex(wide)
    }

    fn readIndex(wide: Bool): Int32 {
        if wide {
            self.readInt32()
        } else {
            self.readByte()
        }
    }

    fn readByte(): Int32 {
        let data = self.data;
        let value = data(self.pos.toInt64());
        self.pos = self.pos + 1i32;

        value.toInt32()
    }

    fn readInt32(): Int32 {
        let by1 = self.readByte();
        let by2 = self.readByte();
        let by3 = self.readByte();
        let by4 = self.readByte();

        (by4 << 24i32) | (by3 << 16i32) | (by2 << 8i32) | by1
    }
}
