fun readBytecode(code: Array[UInt8], visitor: BytecodeVisitor) {
    BytecodeReader(code, visitor).read();
}

@open @abstract class BytecodeVisitor {
    @open fun visitInstruction(offset: Int32) {}

    @open fun visitAddInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitAddInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitAddFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitAddDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitSubInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSubInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSubFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSubDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitNegInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNegInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNegFloat(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNegDouble(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitMulInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitMulInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitMulFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitMulDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitDivInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitDivInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitDivFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitDivDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitModInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitModInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitAndInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitAndInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitOrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitOrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitXorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitXorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitNotBool(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNotInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNotInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitShlInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitShrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSarInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitShlInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitShrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSarInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitRolInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitRorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitRolInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitRorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitReinterpretFloatAsInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitReinterpretInt32AsFloat(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitReinterpretDoubleAsInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitReinterpretInt64AsDouble(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitExtendUInt8ToChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitExtendUInt8ToInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitExtendUInt8ToInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitExtendInt32ToInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitExtendCharToInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitCastCharToInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastInt32ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastInt32ToChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastInt64ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastInt64ToChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastInt64ToInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitConvertInt32ToFloat(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitConvertInt32ToDouble(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitConvertInt64ToFloat(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitConvertInt64ToDouble(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitTruncateFloatToInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitTruncateFloatToInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitTruncateDoubleToInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitTruncateDoubleToInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitInstanceOf(dest: BytecodeRegister, src: BytecodeRegister, cls: ClassDefId) { unimplemented(); }
    @open fun visitCheckedCast(src: BytecodeRegister, cls: ClassDefId) { unimplemented(); }

    @open fun visitMovBool(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovUInt8(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovFloat(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovDouble(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovPtr(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitLoadFieldBool(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldUInt8(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldChar(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldInt32(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldInt64(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldFloat(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldDouble(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldPtr(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }

    @open fun visitStoreFieldBool(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldUInt8(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldChar(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldInt32(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldInt64(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldFloat(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldDouble(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldPtr(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }

    @open fun visitLoadGlobalBool(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalUInt8(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalChar(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalInt32(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalInt64(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalFloat(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalDouble(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalPtr(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }

    @open fun visitStoreGlobalBool(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalUInt8(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalChar(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalInt32(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalInt64(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalFloat(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalDouble(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalPtr(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }

    @open fun visitPushRegister(src: BytecodeRegister) { unimplemented(); }

    @open fun visitConstNil(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstTrue(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstFalse(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroUInt8(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroChar(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroInt32(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroInt64(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroFloat(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroDouble(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstUInt8(dest: BytecodeRegister, value: UInt8) { unimplemented(); }
    @open fun visitConstChar(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstInt32(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstInt64(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstFloat(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstDouble(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstString(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }

    @open fun visitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitAssert(value: BytecodeRegister) { unimplemented(); }

    @open fun visitJumpLoop(offset: Int32) { unimplemented(); }

    @open fun visitJumpIfFalse(opnd: BytecodeRegister, offset: Int32) { unimplemented(); }
    @open fun visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) { unimplemented(); }
    @open fun visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitJump(offset: Int32) { unimplemented(); }
    @open fun visitJumpConst(idx: ConstPoolId) { unimplemented(); }

    @open fun visitInvokeDirectVoid(fct: FctId) { unimplemented(); }
    @open fun visitInvokeDirectBool(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeDirectUInt8(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeDirectChar(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeDirectInt32(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeDirectInt64(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeDirectFloat(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeDirectDouble(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeDirectPtr(dest: BytecodeRegister, fct: FctId) { unimplemented(); }

    @open fun visitInvokeVirtualVoid(fct: FctId) { unimplemented(); }
    @open fun visitInvokeVirtualBool(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeVirtualUInt8(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeVirtualChar(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeVirtualInt32(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeVirtualInt64(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeVirtualFloat(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeVirtualDouble(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeVirtualPtr(dest: BytecodeRegister, fct: FctId) { unimplemented(); }

    @open fun visitInvokeStaticVoid(fct: FctId) { unimplemented(); }
    @open fun visitInvokeStaticBool(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeStaticUInt8(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeStaticChar(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeStaticInt32(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeStaticInt64(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeStaticFloat(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeStaticDouble(dest: BytecodeRegister, fct: FctId) { unimplemented(); }
    @open fun visitInvokeStaticPtr(dest: BytecodeRegister, fct: FctId) { unimplemented(); }

    @open fun visitNewObject(dest: BytecodeRegister, cls: ClassDefId) { unimplemented(); }
    
    @open fun visitRetVoid() { unimplemented(); }
    @open fun visitRetBool(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetUInt8(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetChar(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetInt32(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetInt64(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetFloat(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetDouble(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetPtr(opnd: BytecodeRegister) { unimplemented(); }
}

@open @abstract class EmptyBytecodeVisitor: BytecodeVisitor {
    @override fun visitAddInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitAddInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitAddFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitAddDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitSubInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSubInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSubFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSubDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitNegInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNegInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNegFloat(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNegDouble(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitMulInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitMulInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitMulFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitMulDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitDivInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitDivInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitDivFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitDivDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitModInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitModInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitAndInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitAndInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitOrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitOrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitXorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitXorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitNotBool(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNotInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNotInt64(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitShlInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitShrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSarInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitShlInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitShrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSarInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitRolInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitRorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitRolInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitRorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitReinterpretFloatAsInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitReinterpretInt32AsFloat(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitReinterpretDoubleAsInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitReinterpretInt64AsDouble(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitExtendUInt8ToChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitExtendUInt8ToInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitExtendUInt8ToInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitExtendInt32ToInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitExtendCharToInt64(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitCastCharToInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastInt32ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastInt32ToChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastInt64ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastInt64ToChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastInt64ToInt32(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitConvertInt32ToFloat(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitConvertInt32ToDouble(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitConvertInt64ToFloat(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitConvertInt64ToDouble(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitTruncateFloatToInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitTruncateFloatToInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitTruncateDoubleToInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitTruncateDoubleToInt64(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitInstanceOf(dest: BytecodeRegister, src: BytecodeRegister, cls: ClassDefId) {}
    @override fun visitCheckedCast(src: BytecodeRegister, cls: ClassDefId) {}

    @override fun visitMovBool(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovUInt8(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovFloat(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovDouble(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovPtr(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitLoadFieldBool(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldUInt8(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldChar(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldInt32(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldInt64(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldFloat(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldDouble(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldPtr(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}

    @override fun visitStoreFieldBool(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldUInt8(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldChar(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldInt32(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldInt64(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldFloat(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldDouble(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldPtr(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}

    @override fun visitLoadGlobalBool(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalUInt8(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalChar(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalInt32(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalInt64(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalFloat(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalDouble(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalPtr(dest: BytecodeRegister, glob: GlobalId) {}

    @override fun visitStoreGlobalBool(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalUInt8(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalChar(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalInt32(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalInt64(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalFloat(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalDouble(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalPtr(src: BytecodeRegister, glob: GlobalId) {}

    @override fun visitPushRegister(src: BytecodeRegister) {}

    @override fun visitConstNil(dest: BytecodeRegister) {}
    @override fun visitConstTrue(dest: BytecodeRegister) {}
    @override fun visitConstFalse(dest: BytecodeRegister) {}
    @override fun visitConstZeroUInt8(dest: BytecodeRegister) {}
    @override fun visitConstZeroChar(dest: BytecodeRegister) {}
    @override fun visitConstZeroInt32(dest: BytecodeRegister) {}
    @override fun visitConstZeroInt64(dest: BytecodeRegister) {}
    @override fun visitConstZeroFloat(dest: BytecodeRegister) {}
    @override fun visitConstZeroDouble(dest: BytecodeRegister) {}
    @override fun visitConstUInt8(dest: BytecodeRegister, value: UInt8) {}
    @override fun visitConstChar(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstInt32(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstInt64(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstFloat(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstDouble(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstString(dest: BytecodeRegister, idx: ConstPoolId) {}

    @override fun visitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitAssert(value: BytecodeRegister) {}

    @override fun visitJumpLoop(offset: Int32) {}

    @override fun visitJumpIfFalse(opnd: BytecodeRegister, offset: Int32) {}
    @override fun visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) {}
    @override fun visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitJump(offset: Int32) {}
    @override fun visitJumpConst(idx: ConstPoolId) {}

    @override fun visitInvokeDirectVoid(fct: FctId) {}
    @override fun visitInvokeDirectBool(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeDirectUInt8(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeDirectChar(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeDirectInt32(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeDirectInt64(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeDirectFloat(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeDirectDouble(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeDirectPtr(dest: BytecodeRegister, fct: FctId) {}

    @override fun visitInvokeVirtualVoid(fct: FctId) {}
    @override fun visitInvokeVirtualBool(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeVirtualUInt8(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeVirtualChar(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeVirtualInt32(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeVirtualInt64(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeVirtualFloat(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeVirtualDouble(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeVirtualPtr(dest: BytecodeRegister, fct: FctId) {}

    @override fun visitInvokeStaticVoid(fct: FctId) {}
    @override fun visitInvokeStaticBool(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeStaticUInt8(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeStaticChar(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeStaticInt32(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeStaticInt64(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeStaticFloat(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeStaticDouble(dest: BytecodeRegister, fct: FctId) {}
    @override fun visitInvokeStaticPtr(dest: BytecodeRegister, fct: FctId) {}

    @override fun visitNewObject(dest: BytecodeRegister, cls: ClassDefId) {}
    
    @override fun visitRetVoid() {}
    @override fun visitRetBool(opnd: BytecodeRegister) {}
    @override fun visitRetUInt8(opnd: BytecodeRegister) {}
    @override fun visitRetChar(opnd: BytecodeRegister) {}
    @override fun visitRetInt32(opnd: BytecodeRegister) {}
    @override fun visitRetInt64(opnd: BytecodeRegister) {}
    @override fun visitRetFloat(opnd: BytecodeRegister) {}
    @override fun visitRetDouble(opnd: BytecodeRegister) {}
    @override fun visitRetPtr(opnd: BytecodeRegister) {}
}

class BytecodeReader(let data: Array[UInt8], let visitor: BytecodeVisitor) {
    var pos: Int32 = 0I;
    var length: Int32 = data.length().toInt32();

    fun read() {
        while self.pos < self.length {
            self.visitor.visitInstruction(self.pos);
            let wide = self.hasWideOperands();
            let opcode = self.readOpcode();
            self.readInstruction(wide, opcode);
        }
    }

    fun readInstruction(wide: Bool, opcode: Int32) {
        if opcode == BC_WIDE {
            fatalError("unexpected WIDE");

        } else if opcode == BC_ADD_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddInt32(dest, lhs, rhs);
        } else if opcode == BC_ADD_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddInt32(dest, lhs, rhs);
        } else if opcode == BC_ADD_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddInt64(dest, lhs, rhs);
        } else if opcode == BC_ADD_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddFloat(dest, lhs, rhs);
        } else if opcode == BC_ADD_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddDouble(dest, lhs, rhs);

        } else if opcode == BC_SUB_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubInt32(dest, lhs, rhs);
        } else if opcode == BC_SUB_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubInt32(dest, lhs, rhs);
        } else if opcode == BC_SUB_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubInt64(dest, lhs, rhs);
        } else if opcode == BC_SUB_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubFloat(dest, lhs, rhs);
        } else if opcode == BC_SUB_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubDouble(dest, lhs, rhs);

        } else if opcode == BC_NEG_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegInt32(dest, src);
        } else if opcode == BC_NEG_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegInt32(dest, src);
        } else if opcode == BC_NEG_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegInt64(dest, src);
        } else if opcode == BC_NEG_FLOAT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegFloat(dest, src);
        } else if opcode == BC_NEG_DOUBLE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegDouble(dest, src);

        } else if opcode == BC_MUL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulInt32(dest, lhs, rhs);
        } else if opcode == BC_MUL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulInt32(dest, lhs, rhs);
        } else if opcode == BC_MUL_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulInt64(dest, lhs, rhs);
        } else if opcode == BC_MUL_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulFloat(dest, lhs, rhs);
        } else if opcode == BC_MUL_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulDouble(dest, lhs, rhs);

        } else if opcode == BC_DIV_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivInt32(dest, lhs, rhs);
        } else if opcode == BC_DIV_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivInt32(dest, lhs, rhs);
        } else if opcode == BC_DIV_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivInt64(dest, lhs, rhs);
        } else if opcode == BC_DIV_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivFloat(dest, lhs, rhs);
        } else if opcode == BC_DIV_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivDouble(dest, lhs, rhs);

        } else if opcode == BC_MOD_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitModInt32(dest, lhs, rhs);
        } else if opcode == BC_MOD_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitModInt32(dest, lhs, rhs);
        } else if opcode == BC_MOD_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitModInt64(dest, lhs, rhs);

        } else if opcode == BC_AND_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAndInt32(dest, lhs, rhs);
        } else if opcode == BC_AND_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAndInt32(dest, lhs, rhs);
        } else if opcode == BC_AND_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAndInt64(dest, lhs, rhs);

        } else if opcode == BC_OR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitOrInt32(dest, lhs, rhs);
        } else if opcode == BC_OR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitOrInt32(dest, lhs, rhs);
        } else if opcode == BC_OR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitOrInt64(dest, lhs, rhs);

        } else if opcode == BC_XOR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitXorInt32(dest, lhs, rhs);
        } else if opcode == BC_XOR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitXorInt32(dest, lhs, rhs);
        } else if opcode == BC_XOR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitXorInt64(dest, lhs, rhs);

        } else if opcode == BC_NOT_BOOL {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotBool(dest, src);
        } else if opcode == BC_NOT_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotInt32(dest, src);
        } else if opcode == BC_NOT_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotInt32(dest, src);
        } else if opcode == BC_NOT_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotInt64(dest, src);

        } else if opcode == BC_SHL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt32(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt32(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt32(dest, lhs, rhs);

        } else if opcode == BC_SHL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt32(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt32(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt32(dest, lhs, rhs);

        } else if opcode == BC_SHL_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt64(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt64(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt64(dest, lhs, rhs);

        } else if opcode == BC_ROL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRolInt32(dest, lhs, rhs);
        } else if opcode == BC_ROR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRorInt32(dest, lhs, rhs);
        } else if opcode == BC_ROL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRolInt32(dest, lhs, rhs);
        } else if opcode == BC_ROR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRorInt32(dest, lhs, rhs);
        } else if opcode == BC_ROL_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRolInt64(dest, lhs, rhs);
        } else if opcode == BC_ROR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRorInt64(dest, lhs, rhs);

        } else if opcode == BC_REINTERPRET_FLOAT_AS_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitReinterpretFloatAsInt32(dest, src);

        } else if opcode == BC_REINTERPRET_INT32_AS_FLOAT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitReinterpretInt32AsFloat(dest, src);

        } else if opcode == BC_REINTERPRET_DOUBLE_AS_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitReinterpretDoubleAsInt64(dest, src);

        } else if opcode == BC_REINTERPRET_INT64_AS_DOUBLE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitReinterpretInt64AsDouble(dest, src);

        } else if opcode == BC_EXTEND_UINT8_TO_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendUInt8ToChar(dest, src);

        } else if opcode == BC_EXTEND_UINT8_TO_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendUInt8ToInt32(dest, src);

        } else if opcode == BC_EXTEND_UINT8_TO_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendUInt8ToInt64(dest, src);

        } else if opcode == BC_EXTEND_INT32_TO_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendInt32ToInt64(dest, src);

        } else if opcode == BC_EXTEND_CHAR_TO_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendCharToInt64(dest, src);

        } else if opcode == BC_CAST_CHAR_TO_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastCharToInt32(dest, src);

        } else if opcode == BC_CAST_INT32_TO_UINT8 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt32ToUInt8(dest, src);

        } else if opcode == BC_CAST_INT32_TO_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt32ToChar(dest, src);

        } else if opcode == BC_CAST_INT64_TO_UINT8 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt64ToChar(dest, src);

        } else if opcode == BC_CAST_INT64_TO_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt64ToChar(dest, src);

        } else if opcode == BC_CAST_INT64_TO_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt64ToInt32(dest, src);

        } else if opcode == BC_CONVERT_INT32_TO_FLOAT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitConvertInt32ToFloat(dest, src);

        } else if opcode == BC_CONVERT_INT32_TO_DOUBLE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitConvertInt32ToDouble(dest, src);

        } else if opcode == BC_CONVERT_INT64_TO_FLOAT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitConvertInt64ToFloat(dest, src);

        } else if opcode == BC_CONVERT_INT64_TO_DOUBLE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitConvertInt64ToDouble(dest, src);

        } else if opcode == BC_TRUNCATE_FLOAT_TO_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitTruncateFloatToInt32(dest, src);

        } else if opcode == BC_TRUNCATE_FLOAT_TO_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitTruncateFloatToInt64(dest, src);

        } else if opcode == BC_TRUNCATE_DOUBLE_TO_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitTruncateDoubleToInt32(dest, src);

        } else if opcode == BC_TRUNCATE_DOUBLE_TO_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitTruncateDoubleToInt64(dest, src);

        } else if opcode == BC_INSTANCE_OF {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            self.visitor.visitInstanceOf(dest, src, cls);

        } else if opcode == BC_CHECKED_CAST {
            let src = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            self.visitor.visitCheckedCast(src, cls);

        } else if opcode == BC_SHL_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt64(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt64(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt64(dest, lhs, rhs);

        } else if opcode == BC_MOV_BOOL {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovBool(dest, src);
        } else if opcode == BC_MOV_UINT8 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovUInt8(dest, src);
        } else if opcode == BC_MOV_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovChar(dest, src);
        } else if opcode == BC_MOV_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovInt32(dest, src);
        } else if opcode == BC_MOV_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovInt64(dest, src);
        } else if opcode == BC_MOV_FLOAT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovFloat(dest, src);
        } else if opcode == BC_MOV_DOUBLE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovDouble(dest, src);
        } else if opcode == BC_MOV_PTR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovPtr(dest, src);

        } else if opcode == BC_LOAD_FIELD_BOOL {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldBool(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_UINT8 {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldUInt8(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_CHAR {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldChar(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_INT32 {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldInt32(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_INT64 {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldInt64(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_FLOAT {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldFloat(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_DOUBLE {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldDouble(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_PTR {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldPtr(dest, obj, cls, field);

        } else if opcode == BC_STORE_FIELD_BOOL {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldBool(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_UINT8 {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldUInt8(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_CHAR {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldChar(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_INT32 {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldInt32(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_INT64 {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldInt64(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_FLOAT {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldFloat(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_DOUBLE {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldDouble(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_PTR {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldPtr(src, obj, cls, field);

        } else if opcode == BC_LOAD_GLOBAL_BOOL {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalBool(dest, glob);
        } else if opcode == BC_LOAD_GLOBAL_UINT8 {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalUInt8(dest, glob);
        } else if opcode == BC_LOAD_FIELD_CHAR {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalChar(dest, glob);
        } else if opcode == BC_LOAD_FIELD_INT32 {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalInt32(dest, glob);
        } else if opcode == BC_LOAD_FIELD_INT64 {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalInt64(dest, glob);
        } else if opcode == BC_LOAD_FIELD_FLOAT {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalFloat(dest, glob);
        } else if opcode == BC_LOAD_FIELD_DOUBLE {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalDouble(dest, glob);
        } else if opcode == BC_LOAD_FIELD_PTR {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalPtr(dest, glob);

        } else if opcode == BC_STORE_GLOBAL_BOOL {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalBool(src, glob);
        } else if opcode == BC_STORE_GLOBAL_UINT8 {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalUInt8(src, glob);
        } else if opcode == BC_STORE_FIELD_CHAR {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalChar(src, glob);
        } else if opcode == BC_STORE_FIELD_INT32 {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalInt32(src, glob);
        } else if opcode == BC_STORE_FIELD_INT64 {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalInt64(src, glob);
        } else if opcode == BC_STORE_FIELD_FLOAT {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalFloat(src, glob);
        } else if opcode == BC_STORE_FIELD_DOUBLE {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalDouble(src, glob);
        } else if opcode == BC_STORE_FIELD_PTR {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalPtr(src, glob);

        } else if opcode == BC_PUSH_REGISTER {
            let src = self.readRegister(wide);
            self.visitor.visitPushRegister(src);

        } else if opcode == BC_CONST_NIL {
            let dest = self.readRegister(wide);
            self.visitor.visitConstNil(dest);
        } else if opcode == BC_CONST_TRUE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstTrue(dest);
        } else if opcode == BC_CONST_FALSE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstFalse(dest);
        } else if opcode == BC_CONST_ZERO_UINT8 {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroUInt8(dest);
        } else if opcode == BC_CONST_ZERO_CHAR {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroChar(dest);
        } else if opcode == BC_CONST_ZERO_INT32 {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroInt32(dest);
        } else if opcode == BC_CONST_ZERO_INT64 {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroInt64(dest);
        } else if opcode == BC_CONST_ZERO_FLOAT {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroFloat(dest);
        } else if opcode == BC_CONST_ZERO_DOUBLE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroDouble(dest);
        } else if opcode == BC_CONST_UINT8 {
            let dest = self.readRegister(wide);
            let value = self.readByte().toUInt8();
            self.visitor.visitConstUInt8(dest, value);
        } else if opcode == BC_CONST_CHAR {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstChar(dest, idx);
        } else if opcode == BC_CONST_INT32 {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstInt32(dest, idx);
        } else if opcode == BC_CONST_INT64 {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstInt64(dest, idx);
        } else if opcode == BC_CONST_FLOAT {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstFloat(dest, idx);
        } else if opcode == BC_CONST_DOUBLE {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstDouble(dest, idx);
        } else if opcode == BC_CONST_STRING {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstString(dest, idx);

        } else if opcode == BC_TEST_EQ_PTR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqPtr(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_PTR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNePtr(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_BOOL {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqBool(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_BOOL {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeBool(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeUInt8(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeChar(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_ENUM {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqEnum(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_ENUM {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeEnum(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeInt32(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeInt64(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeFloat(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeDouble(dest, lhs, rhs);

        } else if opcode == BC_ASSERT {
            let value = self.readRegister(wide);
            self.visitor.visitAssert(value);

        } else if opcode == BC_JUMP_LOOP {
            let offset = self.readOffset(wide);
            self.visitor.visitJumpLoop(offset);

        } else if opcode == BC_JUMP_IF_FALSE {
            let opnd = self.readRegister(wide);
            let offset = self.readOffset(wide);
            self.visitor.visitJumpIfFalse(opnd, offset);
        } else if opcode == BC_JUMP_IF_FALSE_CONST {
            let opnd = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpIfFalseConst(opnd, idx);
        } else if opcode == BC_JUMP_IF_TRUE {
            let opnd = self.readRegister(wide);
            let offset = self.readOffset(wide);
            self.visitor.visitJumpIfTrue(opnd, offset);
        } else if opcode == BC_JUMP_IF_TRUE_CONST {
            let opnd = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpIfTrueConst(opnd, idx);
        } else if opcode == BC_JUMP {
            let offset = self.readOffset(wide);
            self.visitor.visitJump(offset);
        } else if opcode == BC_JUMP_CONST {
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpConst(idx);

        } else if opcode == BC_INVOKE_DIRECT_VOID {
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeDirectVoid(fct);
        } else if opcode == BC_INVOKE_DIRECT_BOOL {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeDirectBool(dest, fct);
        } else if opcode == BC_INVOKE_DIRECT_UINT8 {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeDirectUInt8(dest, fct);
        } else if opcode == BC_INVOKE_DIRECT_CHAR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeDirectChar(dest, fct);
        } else if opcode == BC_INVOKE_DIRECT_INT32 {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeDirectInt32(dest, fct);
        } else if opcode == BC_INVOKE_DIRECT_INT64 {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeDirectInt64(dest, fct);
        } else if opcode == BC_INVOKE_DIRECT_FLOAT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeDirectFloat(dest, fct);
        } else if opcode == BC_INVOKE_DIRECT_DOUBLE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeDirectDouble(dest, fct);
        } else if opcode == BC_INVOKE_DIRECT_PTR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeDirectPtr(dest, fct);

        } else if opcode == BC_INVOKE_VIRTUAL_VOID {
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeVirtualVoid(fct);
        } else if opcode == BC_INVOKE_VIRTUAL_BOOL {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeVirtualBool(dest, fct);
        } else if opcode == BC_INVOKE_VIRTUAL_UINT8 {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeVirtualUInt8(dest, fct);
        } else if opcode == BC_INVOKE_VIRTUAL_CHAR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeVirtualChar(dest, fct);
        } else if opcode == BC_INVOKE_VIRTUAL_INT32 {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeVirtualInt32(dest, fct);
        } else if opcode == BC_INVOKE_VIRTUAL_INT64 {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeVirtualInt64(dest, fct);
        } else if opcode == BC_INVOKE_VIRTUAL_FLOAT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeVirtualFloat(dest, fct);
        } else if opcode == BC_INVOKE_VIRTUAL_DOUBLE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeVirtualDouble(dest, fct);
        } else if opcode == BC_INVOKE_VIRTUAL_PTR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeVirtualPtr(dest, fct);

        } else if opcode == BC_INVOKE_STATIC_VOID {
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeStaticVoid(fct);
        } else if opcode == BC_INVOKE_STATIC_BOOL {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeStaticBool(dest, fct);
        } else if opcode == BC_INVOKE_STATIC_UINT8 {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeStaticUInt8(dest, fct);
        } else if opcode == BC_INVOKE_STATIC_CHAR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeStaticChar(dest, fct);
        } else if opcode == BC_INVOKE_STATIC_INT32 {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeStaticInt32(dest, fct);
        } else if opcode == BC_INVOKE_STATIC_INT64 {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeStaticInt64(dest, fct);
        } else if opcode == BC_INVOKE_STATIC_FLOAT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeStaticFloat(dest, fct);
        } else if opcode == BC_INVOKE_STATIC_DOUBLE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeStaticDouble(dest, fct);
        } else if opcode == BC_INVOKE_STATIC_PTR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeStaticPtr(dest, fct);

        } else if opcode == BC_NEW_OBJECT {
            let dest = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            self.visitor.visitNewObject(dest, cls);

        } else if opcode == BC_RET_VOID {
            self.visitor.visitRetVoid();
        } else if opcode == BC_RET_BOOL {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetBool(opnd);
        } else if opcode == BC_RET_UINT8 {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetUInt8(opnd);
        } else if opcode == BC_RET_CHAR {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetChar(opnd);
        } else if opcode == BC_RET_INT32 {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetInt32(opnd);
        } else if opcode == BC_RET_INT64 {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetInt64(opnd);
        } else if opcode == BC_RET_FLOAT {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetFloat(opnd);
        } else if opcode == BC_RET_DOUBLE {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetDouble(opnd);
        } else if opcode == BC_RET_PTR {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetPtr(opnd);

        } else {
            fatalError("unkown opcode ${opcode}");
        }
    }

    fun readRegister(wide: Bool) -> BytecodeRegister {
        BytecodeRegister(self.readIndex(wide))
    }

    fun hasWideOperands() -> Bool {
        let data = self.data;
        let value = data(self.pos.toInt());

        if value.toInt32() == BC_WIDE {
            self.pos = self.pos + 1I;
            true
        } else {
            false
        }
    }

    fun readOpcode() -> Int32 {
        let first = self.readByte();

        if first == 255I {
            let second = self.readByte();
            second + 255I
        } else {
            first
        }
    }

    fun readClassDefId(wide: Bool) -> ClassDefId {
        ClassDefId(self.readIndex(wide))
    }

    fun readGlobalId(wide: Bool) -> GlobalId {
        GlobalId(self.readIndex(wide))
    }

    fun readFieldId(wide: Bool) -> FieldId {
        FieldId(self.readIndex(wide))
    }

    fun readFctId(wide: Bool) -> FctId {
        FctId(self.readIndex(wide))
    }

    fun readConstPoolId(wide: Bool) -> ConstPoolId {
        ConstPoolId(self.readIndex(wide))
    }

    fun readOffset(wide: Bool) -> Int32 {
        self.readIndex(wide)
    }

    fun readIndex(wide: Bool) -> Int32 {
        if wide {
            self.readInt()
        } else {
            self.readByte()
        }
    }

    fun readByte() -> Int32 {
        let data = self.data;
        let value = data(self.pos.toInt());
        self.pos = self.pos + 1I;

        value.toInt32()
    }

    fun readInt() -> Int32 {
        let by1 = self.readByte();
        let by2 = self.readByte();
        let by3 = self.readByte();
        let by4 = self.readByte();

        (by4 << 24I) | (by3 << 16I) | (by2 << 8I) | by1
    }
}
