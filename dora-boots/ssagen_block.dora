fn createBlocksWithEdgesFromBytecode(graph: Graph, bc: BytecodeFunction): BlockMap {
    let blockMap = BlockMap(bc);

    // The first pass creates blocks
    BlockCreator(graph, bc, blockMap).run();

    // The second pass creates edges between blocks
    EdgeCreator(graph, bc, blockMap).run();

    blockMap
}

class BlockMap(let bc: BytecodeFunction) {
    let blocks: HashMap[Int32, Block] = HashMap();

    fn insert(offset: Int32, block: Block) {
        self.blocks.insert(offset, block);
    }

    fn blockAt(offset: Int32): Option[Block] {
        self.blocks(offset)
    }

    fn nextBlockAt(offset: Int32): Option[Block] {
        var offset = offset.toInt64();
        while offset < self.bc.code.size() {
            let result = self.blockAt(offset.toInt32());
            if result.isSome() { return result; }
            offset = offset + 1L;
        }

        None
    }
}

class EdgeCreator(let graph: Graph, let bc: BytecodeFunction, let blockMap: BlockMap): EmptyBytecodeVisitor {
    var offset: Int32 = 0;
    var currentBlock: Option[Block] = None;
    var blockTerminated: Bool = false;

    fn run() {
        // iterate all bytecodes
        readBytecode(self.bc.code, self);
    }

    fn markBlockTerminated() {
        self.blockTerminated = true;
    }

    @override fn visitInstruction(offset: Int32) {
        self.offset = offset;

        let result = self.blockMap.blocks(offset);

        if result.isSome() {
            let nextBlock = result.getOrPanic();

            if self.currentBlock.isSome() {
                if !self.blockTerminated {
                    self.currentBlock.getOrPanic().addSuccessor(nextBlock);
                }
            }

            self.currentBlock = Some(nextBlock);
        }

        self.blockTerminated = false;
    }

    @override fn visitJumpLoop(offset: Int32) {
        let targetBlock = self.blockMap.blockAt(self.offset - offset).getOrPanic();
        self.currentBlock.getOrPanic().addSuccessor(targetBlock);
        self.markBlockTerminated();
    }

    @override fn visitJumpIfFalse(opnd: BytecodeRegister, offset: Int32) {
        let targetBlock = self.blockMap.blockAt(self.offset + offset).getOrPanic();
        self.currentBlock.getOrPanic().addSuccessor(targetBlock);
    }
    @override fn visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().getOrPanic();
        let targetBlock = self.blockMap.blockAt(self.offset + offset).getOrPanic();
        self.currentBlock.getOrPanic().addSuccessor(targetBlock);
    }
    @override fn visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) {
        let targetBlock = self.blockMap.blockAt(self.offset + offset).getOrPanic();
        self.currentBlock.getOrPanic().addSuccessor(targetBlock);
    }
    @override fn visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().getOrPanic();
        let targetBlock = self.blockMap.blockAt(self.offset + offset).getOrPanic();
        self.currentBlock.getOrPanic().addSuccessor(targetBlock);
    }
    @override fn visitJump(offset: Int32) {
        let targetBlock = self.blockMap.blockAt(self.offset + offset).getOrPanic();
        self.currentBlock.getOrPanic().addSuccessor(targetBlock);
        self.markBlockTerminated();
    }
    @override fn visitJumpConst(idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().getOrPanic();
        let targetBlock = self.blockMap.blockAt(self.offset + offset).getOrPanic();
        self.currentBlock.getOrPanic().addSuccessor(targetBlock);
        self.markBlockTerminated();
    }

    @override fn visitRetVoid() {
        self.markBlockTerminated();
    }

    @override fn visitRet(opnd: BytecodeRegister) {
        self.markBlockTerminated();
    }
}

class BlockCreator(let graph: Graph, let bc: BytecodeFunction, let blockMap: BlockMap): EmptyBytecodeVisitor {
    var offset: Int32 = 0;
    var nextInstructionIsBlockStart: Bool = false;
    let blockStarts: BitSet = BitSet(bc.code.size());

    fn run() {
        // create block for first instruction
        let entryBlock = self.ensureBlockAt(0I);
        self.graph.setEntryBlock(entryBlock);

        // iterate all bytecodes
        readBytecode(self.bc.code, self);
    }

    fn ensureBlockAt(offset: Int32): Block {
        let result = self.blockMap.blockAt(offset);
        if result.isSome() { return result.getOrPanic(); }

        let block = Block();
        self.graph.addBlock(block);
        self.blockMap.insert(offset, block);
        block
    }

    fn markBlockStart(offset: Int32) {
        self.blockStarts.insert(offset.toInt64());
    }

    fn markNextInstructionAsBlockStart() {
        self.nextInstructionIsBlockStart = true;
    }

    @override fn visitInstruction(offset: Int32) {
        self.offset = offset;

        if self.nextInstructionIsBlockStart || self.blockStarts.contains(offset.toInt64()) {
            self.ensureBlockAt(offset);
            self.nextInstructionIsBlockStart = false;
        }
    }

    @override fn visitLoopStart() {
        self.ensureBlockAt(self.offset);
    }

    @override fn visitJumpLoop(offset: Int32) {
        let target = self.offset - offset;
        assert(self.blockMap.blockAt(target).isSome());
    }

    @override fn visitJumpIfFalse(opnd: BytecodeRegister, offset: Int32) {
        self.markBlockStart(self.offset + offset);
        self.markNextInstructionAsBlockStart();
    }
    @override fn visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().getOrPanic();
        self.markBlockStart(self.offset + offset);
        self.markNextInstructionAsBlockStart();
    }
    @override fn visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) {
        self.markBlockStart(self.offset + offset);
        self.markNextInstructionAsBlockStart();
    }
    @override fn visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().getOrPanic();
        self.markBlockStart(self.offset + offset);
        self.markNextInstructionAsBlockStart();
    }
    @override fn visitJump(offset: Int32) {
        self.markBlockStart(self.offset + offset);
        self.markNextInstructionAsBlockStart();
    }
    @override fn visitJumpConst(idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().getOrPanic();
        self.markBlockStart(self.offset + offset);
        self.markNextInstructionAsBlockStart();
    }

    @override fn visitRetVoid() {
        self.markNextInstructionAsBlockStart();
    }

    @override fn visitRet(opnd: BytecodeRegister) {
        self.markNextInstructionAsBlockStart();
    }
}