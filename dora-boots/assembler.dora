class AssemblerBuffer {
    let buffer: Vec[UInt8] = Vec[UInt8]();

    fun emitByte(value: UInt8) {
        self.buffer.push(value);
    }

    fun emitInt32(value: Int32) {
        self.emitByte((value & 0xFFI).toUInt8());
        self.emitByte(((value >>> 8) & 0xFFI).toUInt8());
        self.emitByte(((value >>> 16) & 0xFFI).toUInt8());
        self.emitByte(((value >>> 24) & 0xFFI).toUInt8());
    }

    fun emitInt64(value: Int64) {
        self.emitInt32(value.toInt32());
        self.emitInt32((value >>> 32).toInt32());
    }

    fun size() -> Int64 {
        self.buffer.size()
    }

    fun capacity() -> Int64 {
        self.buffer.capacity()
    }

    fun toArray() -> Array[UInt8] {
        self.buffer.toArray()
    }
}

@test fun testAssemblerBufferEmitByte(_x: Testing) {
    let buffer = AssemblerBuffer();
    buffer.emitByte(0x01Y);
    buffer.emitByte(0x02Y);
    assert(buffer.size() == 2L);
}

@test fun testAssemblerBufferEmitInt(_x: Testing) {
    let asm = AssemblerBuffer();
    asm.emitInt32(0x11223344);
    let buffer = asm.toArray();
    assert(buffer(0L) == 0x44Y);
    assert(buffer(1L) == 0x33Y);
    assert(buffer(2L) == 0x22Y);
    assert(buffer(3L) == 0x11Y);
    assert(buffer.size() == 4L);
}

@open @abstract class SlowPath {
    @abstract fun emit(asm: Assembler);
}

@open @abstract class Assembler

class Register(let value: Int32) {
    fun equals(rhs: Register) -> Bool {
        self.value == rhs.value
    }
}

class MachineCode(let bytes: Array[UInt8]) {
    var start: Int64 = 0L;
}

fun assertAsm(code: MachineCode, bytes: UInt8...) {
    var idx = 0L;

    assert(code.start + bytes.size() <= code.bytes.size());

    while idx < bytes.size() {
        let exp = bytes(idx);
        let got = code.bytes.get(code.start + idx);

        if exp != got {
            println("expected ${exp.toStringHex()} at index ${code.start + idx} but got ${got.toStringHex()}");

            var i = 0L;
            print("buffer:   ");

            while i < bytes.size() {
                if i > 0L { print(", "); }
                let value = bytes(i);
                print("${value.toStringHex()}");
                i = i + 1L;
            }

            i = 0L;
            println("");
            print("expected: ");

            while i < bytes.size() {
                if i > 0L { print(", "); }
                let value = code.bytes.get(code.start + i);
                print("${value.toStringHex()}");
                i = i + 1L;
            }
            println("");
        }

        assert(exp == got);
        idx = idx + 1L;
    }

    code.start = code.start + bytes.size();
}

fun assertAsmEnd(code: MachineCode) {
    assert(code.start == code.bytes.size());
}
