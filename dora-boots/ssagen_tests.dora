@test fun testSsaGenRetVoid(_x: Testing) {
    let fct = bytecode("bcSsaGenRetVoid");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Ret.Void
");
}

fun bcSsaGenRetVoid() {}

@test fun testSsaGenRetIntConst(_x: Testing) {
    let fct = bytecode("bcSsaGenRetIntConst");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Const.Int32(#4711) [%1]
  %1: Ret.Int32 %0
");
}

fun bcSsaGenRetIntConst(): Int32 { 4711 }

@test fun testSsaGenRetInt64Const(_x: Testing) {
    let fct = bytecode("bcSsaGenRetInt64Const");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Const.Int64(#4711) [%1]
  %1: Ret.Int64 %0
");
}

fun bcSsaGenRetInt64Const(): Int64 { 4711L }

@test fun testSsaGenIdInt(_x: Testing) {
    let fct = bytecode("bcSsaGenIdInt");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int32(0) [%1]
  %1: Ret.Int32 %0
");
}

fun bcSsaGenIdInt(x: Int32): Int32 { x }

@test fun testSsaGenAddIntArguments(_x: Testing) {
    let fct = bytecode("bcSsaGenAddIntArguments");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int32(0) [%2]
  %1: Arg.Int32(1) [%2]
  %2: Add.Int32 %0, %1 [%3]
  %3: Ret.Int32 %2
");
}

fun bcSsaGenAddIntArguments(a: Int32, b: Int32): Int32 { a + b }

@test fun testSsaGenAddFloat32Arguments(_x: Testing) {
    let fct = bytecode("bcSsaGenAddFloat32Arguments");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Float32(0) [%2]
  %1: Arg.Float32(1) [%2]
  %2: Add.Float32 %0, %1 [%3]
  %3: Ret.Float32 %2
");
}

fun bcSsaGenAddFloat32Arguments(a: Float32, b: Float32): Float32 { a + b }

@test fun testSsaGenMultipleAssignments(_x: Testing) {
    let fct = bytecode("bcSsaGenMultipleAssignments");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int32(0) [%5]
  %1: Const.Int32(#42) [%2, %2]
  %2: Add.Int32 %1, %1 [%4]
  %3: Const.Int32(#23) [%4]
  %4: Add.Int32 %2, %3 [%5, %6]
  %5: Add.Int32 %4, %0 [%6]
  %6: Add.Int32 %4, %5 [%7]
  %7: Ret.Int32 %6
");
}

fun bcSsaGenMultipleAssignments(d: Int32): Int32 {
    var a = 42;
    var b = a;
    var c = a + b;

    a = c + 23;
    c = a + d;

    a + c
}

@test fun testSsaGenSubIntArguments(_x: Testing) {
    let fct = bytecode("bcSsaGenSubIntArguments");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int32(0) [%2]
  %1: Arg.Int32(1) [%2]
  %2: Sub.Int32 %0, %1 [%3]
  %3: Ret.Int32 %2
")
}

fun bcSsaGenSubIntArguments(a: Int32, b: Int32): Int32 { a - b }

@test fun testSsaGenNegIntArgument(_x: Testing) {
    let fct = bytecode("bcSsaGenNegIntArgument");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int32(0) [%1]
  %1: Neg.Int32 %0 [%2]
  %2: Ret.Int32 %1
");
}

fun bcSsaGenNegIntArgument(a: Int32): Int32 { -a }

@test fun testSsaGenMulIntArguments(_x: Testing) {
    let fct = bytecode("bcSsaGenMulIntArguments");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int32(0) [%2]
  %1: Arg.Int32(1) [%2]
  %2: Mul.Int32 %0, %1 [%3]
  %3: Ret.Int32 %2
");
}

fun bcSsaGenMulIntArguments(a: Int32, b: Int32): Int32 { a * b }

@test fun testSsaGenSimpleIf(_x: Testing) {
    let fct = bytecode("bcSsaGenSimpleIf");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0: succ = [@1, @2]
  %0: Arg.Bool(0) [%2]
  %1: Const.Int32(#1) [%5]
  %2: If(@2, @1) %0
@1: pred = [@0, @2]
  %5: Phi %1, %3 [%6]
  %6: Ret.Int32 %5
@2: pred = [@0] succ = [@1]
  %3: Const.Int32(#10) [%5]
  %4: Goto(@1)
");
}

fun bcSsaGenSimpleIf(a: Bool): Int32 {
    var result = 1;
    if a { result = 10; }
    return result;
}

@test fun testSsaGenIfReturnInBothBranches(_x: Testing) {
    let fct = bytecode("bcSsaGenIfReturnInBothBranches");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0: succ = [@1, @2]
  %0: Arg.Bool(0) [%1]
  %1: If(@2, @1) %0
@1: pred = [@0]
  %4: Const.Int32(#2) [%5]
  %5: Ret.Int32 %4
@2: pred = [@0]
  %2: Const.Int32(#1) [%3]
  %3: Ret.Int32 %2
");
}

fun bcSsaGenIfReturnInBothBranches(a: Bool): Int32 {
    if a { return 1; } else { return 2; }
}

@test fun testSsaGenIfWithConditionalAssignment(_x: Testing) {
    let fct = bytecode("bcSsaGenIfWithConditionalAssignment");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0: succ = [@1, @2]
  %0: Arg.Bool(0) [%3]
  %1: Const.Int32(#1) [%6]
  %2: Const.Int32(#27) [%8]
  %3: If(@2, @1) %0
@1: pred = [@0, @2]
  %6: Phi %1, %4 [%8]
  %8: Add.Int32 %6, %2 [%9]
  %9: Ret.Int32 %8
@2: pred = [@0] succ = [@1]
  %4: Const.Int32(#4) [%6]
  %5: Goto(@1)
");
}

fun bcSsaGenIfWithConditionalAssignment(a: Bool): Int32 {
    var x = 1;
    var y = 27;
    if a { x = 4; }
    x + y
}

@test fun testSsaGenWhileCountDown(_x: Testing) {
    let fct = bytecode("bcSsaGenWhileCountDown");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0: succ = [@1]
  %0: Arg.Int32(0) [%3]
  %1: Goto(@1)
@1: pred = [@0, @3] succ = [@2, @3]
  %3: Phi %0, %7 [%4, %7, %9]
  %2: Const.Int32(#0) [%4]
  %4: Greater.Int32 %3, %2 [%5]
  %5: If(@3, @2) %4
@2: pred = [@1]
  %9: Ret.Int32 %3
@3: pred = [@1] succ = [@1]
  %6: Const.Int32(#1) [%7]
  %7: Sub.Int32 %3, %6 [%3]
  %8: Goto(@1)
");
}

fun bcSsaGenWhileCountDown(x: Int32): Int32 {
    var x = x;
    while x > 0 { x = x - 1; }
    x
}

@test fun testSsaGenWhileCountDownWithSum(_x: Testing) {
    let fct = bytecode("bcSsaGenWhileCountDownWithSum");
    let graph = createGraph(fct);

    assertGraph(graph, "
@0: succ = [@1]
  %0: Arg.Int32(0) [%4]
  %1: Const.Int32(#0) [%9]
  %2: Goto(@1)
@1: pred = [@0, @3] succ = [@2, @3]
  %4: Phi %0, %8 [%5, %8]
  %9: Phi %1, %10 [%10, %12]
  %3: Const.Int32(#0) [%5]
  %5: Greater.Int32 %4, %3 [%6]
  %6: If(@3, @2) %5
@2: pred = [@1]
  %12: Ret.Int32 %9
@3: pred = [@1] succ = [@1]
  %7: Const.Int32(#1) [%8]
  %8: Sub.Int32 %4, %7 [%10, %4]
  %10: Add.Int32 %9, %8 [%9]
  %11: Goto(@1)
");
}

fun bcSsaGenWhileCountDownWithSum(x: Int32): Int32 {
    var x = x;
    var sum = 0;
    while x > 0 {
        x = x - 1;
        sum = sum + x;
    }
    sum
}
