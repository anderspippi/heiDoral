fun main() {
  var n = 7I;
  if argc() > 0I { n = argv(0I).toInt32().unwrap(); }
  println("Pfannkuchen ("+n.toString()+") = " + fannkuch(n).toString());
}

fun fannkuch(n: Int32) -> Int32 {
  let perm = arrayFill[Int32](n.toInt64(), 0I);
  let perm1 = arrayFill[Int32](n.toInt64(), 0I);
  let count = arrayFill[Int32](n.toInt64(), 0I);
  var maxFlipsCount = 0I;
  var permCount = 0I;
  var checksum = 0I;

  var i = 0I;
  while i < n {
    perm1(i.toInt()) = i;
    i = i + 1I;
  }

  var r = n;

  while true {
    while r != 1I {
      count((r-1I).toInt()) = r;
      r = r - 1I;
    }

    var i = 0I;
    while i < n {
      perm(i.toInt()) = perm1(i.toInt());
      i = i + 1I;
    }

    var flipsCount = 0I;
    var k = perm(0);

    while k != 0I {
      let k2 = (k+1I) / 2I;

      var i = 0I;
      while i < k2 {
        let temp = perm(i.toInt());
        perm(i.toInt()) = perm((k-i).toInt());
        perm((k-i).toInt()) = temp;

        i = i + 1I;
      }

      flipsCount = flipsCount + 1I;
      k = perm(0);
    }

    maxFlipsCount = Int32::max(maxFlipsCount, flipsCount);

    if permCount % 2I == 0I {
      checksum = checksum + flipsCount;
    } else {
      checksum = checksum - flipsCount;
    }

    while true {
      if r == n {
        println(checksum.toString());
        return maxFlipsCount;
      }

      let perm0 = perm1(0);
      var i = 0I;

      while i < r {
        let j = i + 1I;
        perm1(i.toInt()) = perm1(j.toInt());
        i = j;
      }

      perm1(r.toInt()) = perm0;

      count(r.toInt()) = count(r.toInt()) - 1I;

      if count(r.toInt()) > 0I { break; }

      r = r + 1I;
    }

    permCount = permCount + 1I;
  }

  return -1I;
}
