use std::argc;
use std::argv;
use std::exit;

@open @abstract class Node {
    var birthday: Int32 = 0i32;
    var value: Int32 = 0i32;
    var left: Option[Node] = Option[Node]::None;
    var right: Option[Node] = Option[Node]::None;

    fn printAge(date: Int32) {
        println((date - self.birthday).toString());
    }

    fn printAges(date: Int32) {
        self.printAge(date);

        if self.left.isSome() {
            self.left.getOrPanic().printAges(date);
        }

        if self.right.isSome() {
            self.right.getOrPanic().printAges(date);
        }
    }

    fn printTree(date: Int32, prefix: String) {
        print(prefix);
        print("age: " + (date - self.birthday).toString());
        println(" value: " + self.value.toString());

        if self.left.isSome() {
            self.left.getOrPanic().printTree(date, prefix + "  ");
        }

        if self.right.isSome() {
            self.right.getOrPanic().printTree(date, prefix + "  ");
        }
    }

    @static fn splay(tree: Option[Node], node: Node): Option[Node] {
        if tree.isNone() {
            return Option[Node]::None;
        }
        var tree = tree.getOrPanic();

        node.left = Option[Node]::None;
        node.right = Option[Node]::None;

        var l: Node = node;
        var r: Node = node;

        while true {
            if node.value <= tree.value {
                if tree.left.isNone() {
                    break;
                }

                if node.value <= tree.left.getOrPanic().value {
                    // rotate right
                    let y = tree.left.getOrPanic();
                    tree.left = y.right;
                    y.right = Option[Node]::Some(tree);
                    tree = y;
                    if tree.left.isNone() {
                        break;
                    }
                }

                // link right
                r.left = Option[Node]::Some(tree);
                r = tree;
                tree = tree.left.getOrPanic();

            } else if node.value > tree.value {
                if tree.right.isNone() {
                    break;
                }

                if node.value > tree.right.getOrPanic().value {
                    // rotate left
                    let y = tree.right.getOrPanic();
                    tree.right = y.left;
                    y.left = Option[Node]::Some(tree);
                    tree = y;
                    if tree.right.isNone() {
                        break;
                    }
                }

                // link left
                l.right = Option[Node]::Some(tree);
                l = tree;
                tree = tree.right.getOrPanic();

            } else {
                break;
            }
        }

        l.right = tree.left;
        r.left = tree.right;
        tree.left = node.right;
        tree.right = node.left;
        Option[Node]::Some(tree)
    }

    @static fn insert(tree: Option[Node], node: Node): Node {
        if tree.isNone() {
            return node;
        }

        let tree = Node::splay(tree, node).getOrPanic();

        if node.value <= tree.value {
            node.left = tree.left;
            node.right = Option[Node]::Some(tree);
            tree.left = Option[Node]::None;
        } else { // if (node.value > true.value)
            node.right = tree.right;
            node.left = Option[Node]::Some(tree);
            tree.right = Option[Node]::None;
        }

        return node;
    }

    @static fn trunc(date: Int32, tree: Node, depth: Int32) {
        if tree.left.isSome() {
            if depth == 0i32 {
                /*if tree.left !== nil {
                    println("truncate left");
                }*/
                tree.left = Option[Node]::None;
            } else {
                Node::trunc(date, tree.left.getOrPanic(), depth-1i32);
            }
        }

        if tree.right.isSome() {
            if depth == 0i32 {
                /*if tree.right !== nil {
                    println("truncate right");
                }*/
                tree.right = Option[Node]::None;
            } else {
                Node::trunc(date, tree.right.getOrPanic(), depth-1i32);
            }
        }
    }

    @static fn countNodes(node: Option[Node]): Int32 {
        if node.isNone() {
            return 0i32;
        }
        let node = node.getOrPanic();
        return 1i32 + Node::countNodes(node.left) + Node::countNodes(node.right);
    }
}

class NodeA: Node {}
class NodeB: Node { let x1: Int64 = 0i64; }
class NodeC: Node { let x1: Int64 = 0i64; let x2: Int64 = 0i64; }
class NodeD: Node { let x1: Float64 = 0.0; let x2: Float64 = 0.0; let x3: Float64 = 0.0; }

class Node40: Node {}
class Node48: Node { let x1: Int64 = 0i64; }
class Node56: Node { let x1: Int64 = 0i64; let x2: Int64 = 0i64; }
class Node64: Node { let x1: Int64 = 0i64; let x2: Int64 = 0i64; let x3: Int64 = 0i64; }
class Node72: Node { let x1: Int64 = 0i64; let x2: Int64 = 0i64; let x3: Int64 = 0i64; let x4: Int64 = 0i64; }
class Node80: Node { let x1: Int64 = 0i64; let x2: Int64 = 0i64; let x3: Int64 = 0i64; let x4: Int64 = 0i64; let x5: Int64 = 0i64; }

fn main() {
    if argc() < 4i32 {
        println("usage: splunc <seed> <max-size> <iterations> <trunc-depth> [<iterations> <trunc-depth>]");
        exit(1i32);
    }

    let rnd = std::Random(argv(0i32).toInt64().getOrPanic());
    let max_size = argv(1i32).toInt32().getOrPanic();
    var date = 0i32;

    var tree: Node = NodeA();
    tree.birthday = date;
    date = date + 1i32;
    tree.value = rnd.nextInt32WithBound(max_size);

    var j = 2i32;

    while j + 2i32 <= argc() {
        let n = argv(j).toInt32().getOrPanic();
        let depth = argv(j).toInt32().getOrPanic();

        var i = 0i32;
        while i < n {
            let value = rnd.nextInt32WithBound(4i32);

            let node = if value == 0i32 {
                NodeA() as Node
            } else if value == 1i32 {
                NodeB() as Node
            } else if value == 2i32 {
                NodeC() as Node
            } else {
                assert(value == 3i32);
                NodeD() as Node
            };

            node.birthday = date;
            date = date + 1i32;
            node.value = rnd.nextInt32WithBound(max_size);

            tree = Node::insert(Option[Node]::Some(tree), node);
            Node::trunc(date, tree, depth);

            // println("nodes in tree: " + Node::countNodes(tree).toString());

            i = i + 1i32;
        }

        j = j + 2i32;
    }
}
