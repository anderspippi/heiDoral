const UNLOCKED: Int32 = 0;
const LOCKED: Int32 = 1;
const SLEEPING: Int32 = 2;

class Mutex {
    let data: AtomicInt32 = AtomicInt32(0);

    @pub fun lock() {
        let previous = self.data.compareExchange(UNLOCKED, LOCKED);

        if previous == UNLOCKED {
            // fast path: mutex was successfully locked.
        } else {
            assert(previous == LOCKED || previous == SLEEPING);
            unimplemented();
        }
    }

    @pub fun unlock() {
        let previous = self.data.fetchAdd(-1);

        if previous == LOCKED {
            // fast path: mutex was successfully unlocked.
        } else {
            assert(previous == SLEEPING);
            unimplemented();
        }
    }
}