@pub @internal class String {
  @pub fn equals(rhs: String): Bool {
    var i = 0L;

    if self.size() != rhs.size() {
        return false;
    }

    let len = self.size();

    while i < len {
        if self.getByte(i) != rhs.getByte(i) {
            return false;
        }

        i = i + 1L;
    }

    return true;
  }

  @pub fn toString(): String = self;

  @pub @internal fn compareTo(rhs: String): Int32;

  @pub @internal fn size(): Int64;

  @internal fn toInt32Success(): Bool;
  @internal fn toInt64Success(): Bool;

  @internal fn toInt32OrZero(): Int32;
  @internal fn toInt64OrZero(): Int64;

  @internal fn toFloat32Success(): Bool;
  @internal fn toFloat64Success(): Bool;

  @internal fn toFloat32OrZero(): Float32;
  @internal fn toFloat64OrZero(): Float64;

  @pub fn toInt32(): Option[Int32] {
    if self.toInt32Success() {
      Option[Int32]::Some(self.toInt32OrZero())
    } else {
      Option[Int32]::None
    }
  }

  @pub fn toInt64(): Option[Int64] {
    if self.toInt64Success() {
      Option[Int64]::Some(self.toInt64OrZero())
    } else {
      Option[Int64]::None
    }
  }

  @pub fn toFloat32(): Option[Float32] {
    if self.toFloat32Success() {
      Option[Float32]::Some(self.toFloat32OrZero())
    } else {
      Option[Float32]::None
    }
  }

  @pub fn toFloat64(): Option[Float64] {
    if self.toFloat64Success() {
      Option[Float64]::Some(self.toFloat64OrZero())
    } else {
      Option[Float64]::None
    }
  }

  @pub @internal fn plus(rhs: String): String;

  @pub @internal fn getByte(idx: Int64): UInt8;

  @pub @internal fn clone(): String;

  @pub fn isEmpty(): Bool = self.size() == 0L;

  @pub fn contains(val: String): Bool = self.indexOfFirst(val).isSome();

  @pub fn indexOfFirst(val: String): Option[Int64] {
    let m = val.size();
    if m == 0L {
      return Some(0L);
    }

    let n = self.size();
    if m > n {
      return None;
    }

    var j = 0L;
    var k = 0L;
    var ell = 0L;

    if val.getByte(0L) == val.getByte(1L) {
       k = 2L;
       ell = 1L;
    } else {
       k = 1L;
       ell = 2L;
    }

    j = 0L;
    while j <= n - m {
      if val.getByte(1L) != self.getByte(j + 1L) {
        j = j + k;
      } else {
        if String::compare(val, 2L, self, j + 2L, m - 2L) && val.getByte(0L) == self.getByte(j) {
          return Option[Int64]::Some(j);
        }
        j = j + ell;
      }
    }
    return Option[Int64]::None;
  }

  @static fn compare(a: String, aPos: Int64, b: String, bPos: Int64, len: Int64): Bool {
    var i = 0L;

    while i < len {
      if a.getByte(aPos+i) != b.getByte(bPos+i) {
        return false;
      }
      i = i + 1L;
    }

    return true;
  }

  @pub fn startsWith(val: String): Bool {
    let valLen = val.size();
    if valLen > self.size() {
      return false;
    }
    var i = 0L;
    while i < valLen {
      if self.getByte(i) !== val.getByte(i) {
        return false;
      }
      i = i + 1L;
    }
    return true;
  }

  @pub fn endsWith(val: String): Bool {
    let slfLen = self.size();
    let valLen = val.size();
    if valLen > slfLen {
      return false;
    }
    var iSlf = 0L;
    var iVal = slfLen - valLen;
    while iSlf < valLen {
      if self.getByte(iSlf + iVal) !== val.getByte(iSlf) {
        return false;
      }
      iSlf = iSlf + 1L;
    }
    return true;
  }

  @pub fn codePoints(): CodepointIterator = CodepointIterator(self, 0L);

  @pub @static @internal fn fromBytesPart(val: Array[UInt8], offset: Int64, len: Int64): Option[String] ;

  @pub @static fn fromBytes(val: Array[UInt8]): Option[String] {
    String::fromBytesPart(val, 0L, val.size())
  }

  @pub @static @internal fn fromStringPart(val: String, offset: Int64, len: Int64): Option[String];

  @pub @static fn binary(data: Int64): String {
    var data = data;
    if data == 0L { return "0"; }
    let array = Array[UInt8]::zero(64L);
    var at = array.size();
    while data != 0L {
      array(at - 1L) = ('0'.toInt64() + (data & 1L)).toUInt8();
      data = data.shiftRight(1I);
      at = at - 1L;
    }
    return String::fromBytesPart(array, at, array.size() - at + 1L).getOrPanic();
  }

  @pub @static fn hex(data: Int64): String {
    var data = data;
    if data == 0L { return "0"; }
    let array = Array[UInt8]::zero(16L);
    var at = array.size();
    while data != 0L {
      let digit = (data & 0xFL).toInt32();

      if digit < 10I {
        array(at - 1L) = ('0'.toInt32() + digit).toUInt8();
      } else {
        array(at - 1L) = ('A'.toInt32() + digit - 10I).toUInt8();
      }

      data = data.shiftRight(4I);
      at = at - 1L;
    }
    return String::fromBytesPart(array, at, array.size() - at + 1L).getOrPanic();
  }
}
