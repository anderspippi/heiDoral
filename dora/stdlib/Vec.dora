@pub class Vec[T](values: T...) {
  var array: Array[T] = values;
  var len: Int64 = values.size();

  @pub fun get(idx: Int64): T {
    if idx < 0L || idx >= self.len {
      fatalError("index out of bounds for vector");
    }

    return self.array(idx);
  }

  @pub fun set(idx: Int64, val: T) {
    if idx < 0L || idx >= self.len {
      fatalError("index out of bounds for vector");
    }

    self.array.set(idx, val);
  }

  @pub fun reserve(newcap: Int64) {
    assert(newcap >= 0L);

    if self.capacity() >= newcap {
      return;
    }

    let newarray = Array[T]::ofSizeUnsafe(newcap);
    Array[T]::copy(self.array, 0L, newarray, 0L, self.len);
    self.array = newarray;
  }

  @pub fun push(val: T) {
    var newcap = self.capacity();

    if self.len == newcap {
      if newcap == 0L {
        newcap = 4L;
      } else {
        newcap = newcap * 2L;
      }

      let newarray = Array[T]::ofSizeUnsafe(newcap);
      Array[T]::copy(self.array, 0L, newarray, 0L, self.len);
      self.array = newarray;
    }

    self.array.set(self.len, val);
    self.len = self.len + 1L;
  }

  @pub fun toArray(): Array[T] {
    let newarray = Array[T]::ofSizeUnsafe(self.len);
    Array[T]::copy(self.array, 0L, newarray, 0L, self.len);
    newarray
  }

  @pub fun pop(): T {
    if self.len == 0L {
      fatalError("no element left to pop");
    }

    let newlength = self.len - 1L;
    let temp = self.array(newlength);

    // set popped element to nil so that GC can collect object
    // not necessary for primitive types
    unsafeKillRefs[T](self.array, newlength);

    self.len = newlength;
    temp
  }

  @pub fun trimToLen() {
    if self.len != self.capacity() {
      if self.len == 0L {
        self.array = Array[T]::empty();
      } else {
        let newarray = Array[T]::ofSizeUnsafe(self.len);
        Array[T]::copy(self.array, 0L, newarray, 0L, self.len);
        self.array = newarray;
      }
    }
  }

  @pub fun removeItem(value: T) {
    let len = self.len;
    var destIdx = 0L;
    var srcIdx = 0L;

    while srcIdx < len {
      let current = self.array(srcIdx);

      if current !== value {
        self.array(destIdx) = current;
        destIdx = destIdx + 1L;
      }

      srcIdx = srcIdx + 1L;
    }

    self.len = destIdx;

    while destIdx < srcIdx {
      unsafeKillRefs[T](self.array, destIdx);
      destIdx = destIdx + 1L;
    }
  }

  @pub fun removeAt(ind: Int64): T {
    var ind = ind;
    assert(ind < self.len);
    let temp = self.get(ind);
    let len = self.len;

    while ind < len - 1L {
      self.set(ind, self.get(ind+1L));
      ind = ind + 1L;
    }

    unsafeKillRefs[T](self.array, ind);
    self.len = ind;

    temp
  }

  @pub fun size(): Int64 {
    return self.len;
  }

  @pub fun isEmpty(): Bool {
    self.len == 0L
  }

  @pub fun capacity(): Int64 {
    self.array.size()
  }

  @pub fun first(): Option[T] {
    if self.len == 0L {
      Option[T]::None
    } else {
      Option[T]::Some(self.array(0L))
    }
  }

  @pub fun last(): Option[T] {
    if self.len == 0L {
      Option[T]::None
    } else {
      Option[T]::Some(self.array(self.len - 1L))
    }
  }

  @pub fun clear() {
    self.len = 0L;
    self.array = Array[T]::empty();
  }

  @pub fun makeIterator(): VecIter[T] {
    VecIter[T](self)
  }

  @pub fun makeReverseIterator(): ReverseVecIter[T] {
    ReverseVecIter[T](self)
  }

  @pub fun enumerate(): VecEnumerator[T] {
    VecEnumerator[T](self)
  }
}

@pub class VecEnumerator[T](let data: Vec[T]) {
  var idx: Int64 = 0L;

  @pub fun hasNext(): Bool {
    self.idx < self.data.size()
  }

  @pub fun next(): (Int64, T) {
    let current_idx = self.idx;
    self.idx = self.idx + 1L;
    (current_idx, self.data(current_idx))
  }
}

@pub class VecIter[T](let data: Vec[T]) {
  var idx: Int64 = 0L;

  @pub fun hasNext(): Bool {
    self.idx < self.data.size()
  }

  @pub fun next(): T {
    let result = self.data(self.idx);
    self.idx = self.idx + 1L;
    result
  }
}

@pub class ReverseVecIter[T](let data: Vec[T]) {
  var idx: Int64 = data.size() - 1L;

  @pub fun hasNext(): Bool {
    self.idx != -1L
  }

  @pub fun next(): T {
    let result = self.data(self.idx);
    self.idx = self.idx - 1L;
    result
  }
}

impl[T: Equals] Vec[T] {
  @pub fun removeEquals(elem: T) {
    var i = 0L;

    while i < self.size() {
      if self(i).equals(elem) {
        self.removeAt(i);
      } else {
        i = i + 1L;
      }
    }
  }
}
