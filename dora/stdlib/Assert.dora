@pub module Assert {
  @pub fun equal[T : Equals + Stringable](actual: T, expected: T) {
    if actual.equals(expected).not() {
      fatalError("values are not equal (actual: ${actual}, expected: ${expected})");
    }
  }
  @pub fun notEqual[T : Equals + Stringable](actual: T, expected: T) {
    if actual.equals(expected) {
      fatalError("values are equal (actual: ${actual}, expected: ${expected})");
    }
  }
  @pub fun identical[T : Identity + Stringable](actual: T, expected: T) {
    if actual !== expected {
      fatalError("values are not identical (actual: ${actual}, expected: ${expected})");
    }
  }
  @pub fun notIdentical[T : Identity + Stringable](actual: T, expected: T) {
    if actual === expected {
      fatalError("values are identical (actual: ${actual}, expected: ${expected})");
    }
  }

  @pub fun string(actual: String): StringAssert = StringAssert(actual);
  @pub fun list[T](actual: Vec[T]): ListAssert[T] = ListAssert[T](actual);
  @pub fun set[T : Equals + Hash](actual: HashSet[T]): SetAssert[T] = SetAssert[T](actual);
  @pub fun map[K : Equals + Hash, V](actual: HashMap[K, V]): MapAssert[K, V] = MapAssert[K, V](actual);
}

@pub class StringAssert(let value: String) {
  /*
  fun contains(expected: String): StringAssert {
    assert(self.value.contains(expected));
    return self;
  }
  */

  @pub fun hasSize(expected: Int64): StringAssert {
    if self.value.size() != expected {
      fatalError("unexpected string size (actual: ${self.value.size()}, expected: ${expected})");
    }
    return self;
  }

  @pub fun isEmpty(): StringAssert {
    if self.value.isEmpty().not() {
      fatalError("string not empty (is \"${self.value}\")");
    }
    return self;
  }

  @pub fun isNotEmpty(): StringAssert {
    if self.value.isEmpty() {
      fatalError("string is empty");
    }
    return self;
  }
}

@pub class ListAssert[T](let value: Vec[T]) {
  @pub fun hasSize(expected: Int64): ListAssert[T] {
    assert(self.value.size() == expected);
    return self;
  }

  @pub fun isEmpty(): ListAssert[T] {
    if self.value.isEmpty().not() {
      fatalError("list is not empty");
    }
    return self;
  }

  @pub fun isNotEmpty(): ListAssert[T] {
    if self.value.isEmpty() {
      fatalError("list is empty");
    }
    return self;
  }
}

@pub class SetAssert[T : Equals + Hash](let value: HashSet[T]) {
  @pub fun contains(expected: T): SetAssert[T] {
    assert(self.value.contains(expected));
    return self;
  }

  @pub fun containsAll(expected: T...): SetAssert[T] {
    for value in expected {
      assert(self.value.contains(value));
    }
    return self;
  }

  @pub fun hasSize(expected: Int64): SetAssert[T] {
    assert(self.value.size() == expected);
    return self;
  }

  @pub fun isEmpty(): SetAssert[T] {
    if self.value.isEmpty().not() {
      fatalError("set is not empty");
    }
    return self;
  }

  @pub fun isNotEmpty(): SetAssert[T] {
    if self.value.isEmpty() {
      fatalError("set is empty");
    }
    return self;
  }
}

@pub class MapAssert[K : Equals + Hash, V](let value: HashMap[K, V]) {
  @pub fun contains(expected: K): MapAssert[K, V] {
    assert(self.value.contains(expected));
    return self;
  }

  @pub fun containsAll(expected: K...): MapAssert[K, V] {
    for value in expected {
      assert(self.value.contains(value));
    }
    return self;
  }

  @pub fun hasSize(expected: Int64): MapAssert[K, V] {
    assert(self.value.size() == expected);
    return self;
  }

  @pub fun isEmpty(): MapAssert[K, V] {
    if self.value.isEmpty().not() {
      fatalError("set is not empty");
    }
    return self;
  }

  @pub fun isNotEmpty(): MapAssert[K, V] {
    if self.value.isEmpty() {
      fatalError("set is empty");
    }
    return self;
  }
}
