/* total order */
trait Sortable {
  fn sortsAs(other: Self): Int32;
  // ideally we would be able to provide a default implementation for the next 3 methods based on `sortsAs`
  fn sortsBefore(other: Self): Bool;
  fn sortsAfter(other: Self): Bool;
  fn sortsSame(other: Self): Bool;
}

impl Sortable for Bool {
  fn sortsAs(other: Bool): Int32 = self.compareTo(other);
  fn sortsBefore(other: Bool): Bool = self < other;
  fn sortsAfter(other: Bool): Bool = self > other;
  fn sortsSame(other: Bool): Bool = self == other;
}

impl Sortable for UInt8 {
  fn sortsAs(other: UInt8): Int32 = self.compareTo(other);
  fn sortsBefore(other: UInt8): Bool = self < other;
  fn sortsAfter(other: UInt8): Bool = self > other;
  fn sortsSame(other: UInt8): Bool = self == other;
}

impl Sortable for Int32 {
  fn sortsAs(other: Int32): Int32 = self.compareTo(other);
  fn sortsBefore(other: Int32): Bool = self < other;
  fn sortsAfter(other: Int32): Bool = self > other;
  fn sortsSame(other: Int32): Bool = self == other;
}

impl Sortable for Int64 {
  fn sortsAs(other: Int64): Int32 = self.compareTo(other);
  fn sortsBefore(other: Int64): Bool = self < other;
  fn sortsAfter(other: Int64): Bool = self > other;
  fn sortsSame(other: Int64): Bool = self == other;
}

impl Sortable for Float32 {
  fn sortsAs(other: Float32): Int32 = self.sortsAs(other);
  fn sortsBefore(other: Float32): Bool = self.sortsAs(other) < 0i32;
  fn sortsAfter(other: Float32): Bool = self.sortsAs(other) > 0i32;
  fn sortsSame(other: Float32): Bool = self.sortsAs(other) == 0i32;
}

impl Sortable for Float64 {
  fn sortsAs(other: Float64): Int32 = self.sortsAs(other);
  fn sortsBefore(other: Float64): Bool = self.sortsAs(other) < 0i32;
  fn sortsAfter(other: Float64): Bool = self.sortsAs(other) > 0i32;
  fn sortsSame(other: Float64): Bool = self.sortsAs(other) == 0i32;
}

impl Sortable for String {
  fn sortsAs(other: String): Int32 = self.compareTo(other);
  fn sortsBefore(other: String): Bool = self < other;
  fn sortsAfter(other: String): Bool = self > other;
  fn sortsSame(other: String): Bool = self == other;
}
