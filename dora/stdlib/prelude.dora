@pub @internal fn fatalError(msg: String);
@pub @internal fn abort();
@pub @internal fn exit(status: Int32);
@pub @internal fn unreachable[T](): T;

@pub fn unimplemented() = fatalError("not yet implemented");

@pub @internal fn print(text: String);
@pub @internal fn println(text: String);
@pub @internal fn assert(val: Bool);
@pub @internal fn debug();
@pub @internal fn argc(): Int32;
@pub @internal fn argv(idx: Int32): String;
@pub @internal fn forceCollect();
@pub @internal fn forceMinorCollect();

@pub @internal fn timestamp(): Int64;
@pub @internal fn spawn(path: String, arguments: String...);

@pub class Object

@pub mod collections;

fn isValidUtf8(data: Array[UInt8]): Bool {
  var i = 0L;

  while i < data.size() {
    let by = data(i).toInt32();
    var codePoint = 0I;
    var nextUInt8s = 0I;
    var min = 0I;
    var max = 0I;

    if by & 0x80I == 0I {
      nextUInt8s = 0;
      i = i + 1L;
      continue;

    } else if by & 0xC0I == 0x80I {
      return false;

    } else if by & 0xE0I == 0xC0I {
      codePoint = by & 0x1FI;
      nextUInt8s = 1;
      min = 0x80;
      max = 0x7FFI;

    } else if by & 0xF0I == 0xE0I {
      codePoint = by & 0xFI;
      nextUInt8s = 2I;
      min = 0x800I;
      max = 0xFFFFI;

    } else if by & 0xF8I == 0xF0I {
      codePoint = by & 0x7I;
      nextUInt8s = 3;
      min = 0x10000;
      max = 0x10FFFFI;
    }

    while nextUInt8s > 0I {
      nextUInt8s = nextUInt8s - 1I;
      i = i + 1L;

      if i >= data.size() {
        return false;
      }

      let by = data(i).toInt32();

      if by & 0xC0I != 0x80I {
        return false;
      }

      codePoint = (codePoint << 6I) | (by & 0x3FI);
    }

    if codePoint < min || codePoint > max {
      return false;
    }

    i = i + 1L;
  }

  return true;
}

@internal fn unsafeKillRefs[T](arr: Array[T], idx: Int64);

@pub @internal fn sleep(seconds: Int32);
