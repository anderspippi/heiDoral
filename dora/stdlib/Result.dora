@pub enum Result[V, E] {
  Ok(V),
  Err(E),
}

import Result::Ok;
import Result::Err;

impl[V, E] Result[V, E] {
  @pub fn isOk(): Bool {
    match self {
      Ok(_) => true,
      Err(_) => false,
    }
  }

  @pub fn isErr(): Bool {
    match self {
      Ok(_) => false,
      Err(_) => true,
    }
  }

  @pub fn getOrPanic(): V {
    match self {
      Ok(value) => value,
      Err(_) => {
        fatalError("cannot unwrap Err.");
        unreachable[V]()
      }
    }
  }

  @pub fn getErrOrPanic(): E {
    match self {
      Ok(_) => {
        fatalError("cannot unwrap Ok.");
        unreachable[E]()
      },
      Err(value) => value,
    }
  }

  @pub fn has(val: V): Bool {
    match self {
      Ok(actual) => actual === val,
      Err(_) => false,
    }
  }

  @pub fn or(alt: Result[V, E]): Result[V, E] {
    if self.isOk() {
      return self;
    } else {
      return alt;
    }
  }
}

impl[V: Equals, E] Result[V, E] {
  @pub fn contains(rhs: V): Bool {
    if self.isOk() {
      let lhs = self.getOrPanic();
      lhs.equals(rhs)
    } else {
      false
    }
  }
}

impl[V: Equals, E: Equals] Result[V, E] {
  @pub fn equals(rhs: Result[V, E]): Bool {
    if self.isOk() {
      if rhs.isOk() {
        let lhs = self.getOrPanic();
        let rhs = rhs.getOrPanic();
        lhs.equals(rhs)
      } else {
        false
      }
    } else {
      if rhs.isErr() {
        let lhs = self.getErrOrPanic();
        let rhs = rhs.getErrOrPanic();
        lhs.equals(rhs)
      } else {
        false
      }
    }
  }
}

impl[V: Default, E] Result[V, E] {
  @pub fn getOrDefault(): V {
    match self {
      Ok(actual) => actual,
      Err(_) => V::default(),
    }
  }
}

impl[V: Zero, E] Result[V, E] {
  @pub fn getOrZero(): V {
    match self {
      Ok(actual) => actual,
      Err(_) => V::zero(),
    }
  }
}

impl[V, E: Default] Result[V, E] {
  @pub fn getErrOrDefault(): E {
    match self {
      Ok(_) => E::default(),
      Err(actual) => actual,
    }
  }
}

impl[V, E: Zero] Result[V, E] {
  @pub fn getErrOrZero(): E {
    match self {
      Ok(_) => E::zero(),
      Err(actual) => actual,
    }
  }
}
