@pub enum Option[T] {
  Some(T),
  None,
}

import Option::Some;
import Option::None;

impl[T] Option[T] {
  @pub fun isNone(): Bool {
    match self {
      Some(_) => false,
      None => true,
    }
  }

  @pub fun isSome(): Bool {
    match self {
      Some(_) => true,
      None => false,
    }
  }

  @pub fun unwrap(): T {
    match self {
      Some(value) => value,
      None => {
        fatalError("cannot unwrap None.");
        unreachable[T]()
      }
    }
  }

  fun unwrapNone() {
    match self {
      Some(_) => {
        fatalError("cannot unwrap Some.");
      },
      None => (),
    }
  }

  @pub fun unwrapOr(alt: T): T {
    match self {
      Some(value) => value,
      None => alt,
    }
  }

  @pub fun has(val: T): Bool {
    match self {
      Some(actual) => actual === val,
      None => false,
    }
  }
}

impl[T: Equals] Option[T] {
  @pub fun contains(rhs: T): Bool {
    if self.isSome() {
      let lhs = self.unwrap();
      lhs === rhs || lhs.equals(rhs)
    } else {
      false
    }
  }

  @pub fun equals(rhs: Option[T]): Bool {
    if self.isSome() {
      if rhs.isSome() {
        let lhs = self.unwrap();
        let rhs = rhs.unwrap();
        lhs.equals(rhs)
      } else {
        false
      }
    } else {
      rhs.isNone()
    }
  }
}

impl[T: Stringable] Option[T] {
  @pub fun toString(): String {
    match self {
      Some(value) => "Some(${value})",
      None => "None",
    }
  }
}
