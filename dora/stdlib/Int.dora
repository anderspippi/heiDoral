
@internal class Int {
  @internal fun toUInt8() -> UInt8;
  fun toChar() -> Option[Char] {
    if self >= 0 && self <= 0x10FFFF && (self < 0xD800 || self > 0xDFFF) {
      some[Char](self.toCharUnchecked())
    } else {
      none[Char]()
    }
  }
  @internal fun toCharUnchecked() -> Char;
  @internal fun toInt32() -> Int32;
  @internal fun toInt64() -> Int64;
  @internal fun toString() -> String;

  fun toStringBinary() -> String = String::binary(self.toInt64() & 0xFFFFFFFFL);
  fun toStringHex() -> String = String::hex(self.toInt64() & 0xFFFFFFFFL);

  @internal fun toFloat() -> Float;
  @internal fun toDouble() -> Double;

  @internal fun asFloat() -> Float;

  @internal fun equals(rhs: Int) -> Bool;
  @internal fun compareTo(rhs: Int) -> Int32;

  @internal fun plus(rhs: Int) -> Int;
  @internal fun minus(rhs: Int) -> Int;
  @internal fun times(rhs: Int) -> Int;
  @internal fun div(rhs: Int) -> Int;
  @internal fun mod(rhs: Int) -> Int;

  @internal fun bitwiseOr(rhs: Int) -> Int;
  @internal fun bitwiseAnd(rhs: Int) -> Int;
  @internal fun bitwiseXor(rhs: Int) -> Int;

  @internal fun shiftLeft(by: Int32) -> Int;
  @internal fun shiftRightSigned(by: Int32) -> Int;
  @internal fun shiftRight(by: Int32) -> Int;

  @internal fun rotateLeft(by: Int32) -> Int;
  @internal fun rotateRight(by: Int32) -> Int;

  @internal fun unaryPlus() -> Int;
  @internal fun unaryMinus() -> Int;
  @internal fun not() -> Int;

  @internal fun countZeroBits() -> Int = self.not().countOneBits();
  @internal fun countOneBits() -> Int {
    var x = self;
    var c = 0;
    while (x != 0) {
      c = c + 1;
      x = x.bitwiseAnd(x - 1);
    }
    return c;
  }
  @internal fun countZeroBitsLeading() -> Int {
    if self == 0 {
      return Int::bits();
    }
    var t = 1.shiftLeft(Int::bits().toInt32() - 1I);
    var r = 0;
    while (self.bitwiseAnd(t)) == 0 {
      t = t.shiftRight(1I);
      r = r + 1;
    }
    return r;
  }
  @internal fun countOneBitsLeading() -> Int = self.not().countZeroBitsLeading();
  @internal fun countZeroBitsTrailing() -> Int {
    if self == 0 {
      return Int::bits();
    }
    var t = 1;
    var r = 0;
    while (self.bitwiseAnd(t)) == 0 {
      t = t.shiftLeft(1I);
      r = r + 1
    }
    return r;
  }
  @internal fun countOneBitsTrailing() -> Int = self.not().countZeroBitsTrailing();

  fun hash() -> Int32 = self.toInt32();

  fun abs() -> Int = if self >= 0 { self } else { -self };

  @static fun bits() -> Int = 32;
  @static fun bytes() -> Int = 4;

  @static fun maxValue() -> Int = 2147483647;
  @static fun minValue() -> Int = -2147483648;

  @static fun min(lhs: Int, rhs: Int) -> Int = if lhs < rhs { lhs } else { rhs };
  @static fun max(lhs: Int, rhs: Int) -> Int = if lhs < rhs { rhs } else { lhs };
}
