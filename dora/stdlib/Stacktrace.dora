class Stacktrace() {
  var backtrace: Array[Int32] = nil;
  var elements: Array[StacktraceElement] = nil;

  self.retrieveStacktrace();

  fun getStacktrace() -> Array[StacktraceElement] {
    if self.elements !== nil {
      return self.elements;
    }

    if self.backtrace === nil {
      self.elements = arrayEmpty[StacktraceElement]();
      return self.elements;
    }

    var i = 0L;
    let len = self.backtrace.length() / 2L;
    self.elements = Array[StacktraceElement](len.toInt32());

    while i < len {
      self.elements.set(i.toInt32(), self.getStacktraceElement(i.toInt32()));
      i = i + 1L;
    }

    return self.elements;
  }

  fun printStacktrace() {
    let x = self.getStacktrace();
    var i = 0L;

    while i < x.length() {
      println(i.toString() + ": " + x.get(i.toInt32()).toString());
      i = i + 1L;
    }
  }

  @internal fun retrieveStacktrace();
  @internal fun getStacktraceElement(idx: Int32) -> StacktraceElement;
}

class StacktraceElement(let name: String, let line: Int32) {
  fun toString() -> String = self.name + ": " + self.line.toString();
}