class Stacktrace() {
  var backtrace: NewOption[Array[Int32]] = NewOption[Array[Int32]]::None;
  var elements: NewOption[Array[StacktraceElement]] = NewOption[Array[StacktraceElement]]::None;

  self.retrieveStacktrace();

  fun getStacktrace(): Array[StacktraceElement] {
    if self.elements.isSome() {
      return self.elements.unwrap();
    }

    if self.backtrace.isNone() {
      let elements = Array::empty[StacktraceElement]();
      self.elements = NewOption[Array[StacktraceElement]]::Some(elements);
      return elements;
    }

    let backtraceLength = self.backtrace.unwrap().size();
    var i = 0L;
    let len = backtraceLength / 2L;
    let elements = Array::ofSizeUnsafe[StacktraceElement](len);

    while i < len {
      elements.set(i, self.getStacktraceElement(i));
      i = i + 1L;
    }

    self.elements = NewOption[Array[StacktraceElement]]::Some(elements);
    return elements;
  }

  fun printStacktrace() {
    let x = self.getStacktrace();
    var i = 0L;

    while i < x.size() {
      println(i.toString() + ": " + x.get(i).toString());
      i = i + 1L;
    }
  }

  @internal fun retrieveStacktrace();
  @internal fun getStacktraceElement(idx: Int64): StacktraceElement;
}

class StacktraceElement(let name: String, let line: Int32) {
  fun toString(): String = "${self.name}: ${self.line}";
}