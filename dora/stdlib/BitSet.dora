@pub class BitSet(capacity: Int64) {
    var data: Array[Int32] = Array[Int32]::empty();
    var capacity: Int64 = 0i64;

    if capacity > 0i64 {
        let entries = (capacity + 31i64) / 32i64;
        self.data = Array[Int32]::zero(entries);
        self.capacity = capacity;
    }

    @pub fn size(): Int64 {
        self.capacity
    }

    @pub fn contains(idx: Int64): Bool {
        if idx < 0i64 || idx >= self.capacity {
            fatalError("index out of bounds");
        }

        let entry_idx = idx / 32i64;
        let value = self.data.get(entry_idx);
        let value_idx = idx - entry_idx;

        return value & (1i32 << value_idx.toInt32()) != 0i32;
    }

    @pub fn insert(idx: Int64) {
        if idx < 0i64 || idx >= self.capacity {
            fatalError("index out of bounds");
        }

        let entry_idx = idx / 32i64;
        var value = self.data.get(entry_idx);
        let value_idx = idx - entry_idx;

        value = value | (1i32 << value_idx.toInt32());

        self.data.set(entry_idx, value);
    }

    @pub fn remove(idx: Int64) {
        if idx < 0i64 || idx >= self.capacity {
            fatalError("index out of bounds");
        }

        let entry_idx = idx / 32i64;
        var value = self.data.get(entry_idx);
        let value_idx = idx - entry_idx;

        value = value & !(1i32 << value_idx.toInt32());

        self.data.set(entry_idx, value);
    }
}
