class BitSet(capacity: Int64) {
    var data: Array[Int32] = arrayEmpty[Int32]();
    var capacity: Int64 = 0L;

    if capacity > 0L {
        let entries = (capacity + 31L) / 32L;
        self.data = Array[Int32](entries.toInt());
        self.capacity = capacity;
    }

    fun length() -> Int64 {
        self.capacity
    }

    fun contains(idx: Int64) -> Bool {
        if idx < 0L || idx >= self.capacity {
            fatalError("index out of bounds");
        }

        let entry_idx = idx / 32L;
        let value = self.data.get(entry_idx.toInt());
        let value_idx = idx - entry_idx;

        return value & (1I << value_idx.toInt32()) != 0I;
    }

    fun insert(idx: Int64) {
        if idx < 0L || idx >= self.capacity {
            fatalError("index out of bounds");
        }

        let entry_idx = idx / 32L;
        var value = self.data.get(entry_idx.toInt());
        let value_idx = idx - entry_idx;

        value = value | (1I << value_idx.toInt32());

        self.data.set(entry_idx.toInt(), value);
    }

    fun remove(idx: Int64) {
        if idx < 0L || idx >= self.capacity {
            fatalError("index out of bounds");
        }

        let entry_idx = idx / 32L;
        var value = self.data.get(entry_idx.toInt());
        let value_idx = idx - entry_idx;

        value = value & !(1I << value_idx.toInt32());

        self.data.set(entry_idx.toInt(), value);
    }
}
