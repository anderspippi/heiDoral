@internal class Char {
  @internal fun toInt() -> Int;
  @internal fun toInt32() -> Int32;
  @internal fun toInt64() -> Int64;
  @internal fun toString() -> String;

  @internal fun equals(rhs: Char) -> Bool;
  @internal fun compareTo(rhs: Char) -> Int;

  fun hash() -> Int = self.toInt();

  fun encodeUtf8(bytes: Array[UInt8], offset: Int) {
    let val = self.toInt32();

    if val < 0x80I {
      bytes.set(offset, val.toUInt8());
    } else if val < 0x800I {
      bytes.set(offset, (0xC0I | ((val >> 6I) & 0x1FI)).toUInt8());
      bytes.set(offset+1, (0x80I | (val & 0x3FI)).toUInt8());
    } else if val < 0x10000I {
      bytes.set(offset, (0xE0I | ((val >> 12I) & 0x0FI)).toUInt8());
      bytes.set(offset+1, (0x80I | ((val >> 6I) & 0x3FI)).toUInt8());
      bytes.set(offset+2, (0x80I | (val & 0x3FI)).toUInt8());
    } else {
      bytes.set(offset, (0xF0I | ((val >> 18I) & 0x07I)).toUInt8());
      bytes.set(offset+1, (0x80I | ((val >> 12I) & 0x3FI)).toUInt8());
      bytes.set(offset+2, (0x80I | ((val >> 6I) & 0x3FI)).toUInt8());
      bytes.set(offset+3, (0x80I | (val & 0x3FI)).toUInt8());
    }
  }

  fun lenUtf8() -> Int {
    let val = self.toInt();

    if val < 0x80 {
      return 1;
    } else if val < 0x800 {
      return 2;
    } else if val < 0x10000 {
      return 3;
    } else {
      return 4;
    }
  }
}
