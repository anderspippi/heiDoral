@pub @internal struct Char

impl Char {
  @pub @internal fn toInt32(): Int32;
  @pub @internal fn toInt64(): Int64;
  @pub @internal fn toString(): String;

  @pub @internal fn equals(rhs: Char): Bool;
  @pub @internal fn compareTo(rhs: Char): Int32;

  @pub fn hash(): Int32 = self.toInt32();

  @pub fn encodeUtf8(bytes: Array[UInt8], offset: Int64) {
    let val = self.toInt32();

    if val < 0x80i32 {
      bytes.set(offset, val.toUInt8());
    } else if val < 0x800i32 {
      bytes.set(offset, (0xC0i32 | ((val >> 6i32) & 0x1Fi32)).toUInt8());
      bytes.set(offset+1i64, (0x80i32 | (val & 0x3Fi32)).toUInt8());
    } else if val < 0x10000i32 {
      bytes.set(offset, (0xE0i32 | ((val >> 12i32) & 0x0Fi32)).toUInt8());
      bytes.set(offset+1i64, (0x80i32 | ((val >> 6i32) & 0x3Fi32)).toUInt8());
      bytes.set(offset+2i64, (0x80i32 | (val & 0x3Fi32)).toUInt8());
    } else {
      bytes.set(offset, (0xF0i32 | ((val >> 18i32) & 0x07i32)).toUInt8());
      bytes.set(offset+1i64, (0x80i32 | ((val >> 12i32) & 0x3Fi32)).toUInt8());
      bytes.set(offset+2i64, (0x80i32 | ((val >> 6i32) & 0x3Fi32)).toUInt8());
      bytes.set(offset+3i64, (0x80i32 | (val & 0x3Fi32)).toUInt8());
    }
  }

  @pub fn lenUtf8(): Int32 {
    let val = self.toInt32();

    if val < 0x80i32 {
      return 1i32;
    } else if val < 0x800i32 {
      return 2i32;
    } else if val < 0x10000i32 {
      return 3i32;
    } else {
      return 4i32;
    }
  }
}
