@pub @internal class Array[T](values: T...) {

  @internal fun size(): Int64;
  @internal fun get(idx: Int64): T;
  @internal fun set(idx: Int64, val: T);

  fun isEmpty(): Bool = self.size() == 0L;

  fun enumerate(): ArrayEnumerator[T] {
    ArrayEnumerator[T](self)
  }

  @static fun empty(): Array[T] {
    Array[T]::ofSizeUnsafe(0L)
  }

  @static @internal fun ofSizeUnsafe(size: Int64): Array[T];

  @static fun fill(len: Int64, value: T): Array[T] {
    let array = Array[T]::ofSizeUnsafe(len);
    var i = 0L;

    while i < len {
      array(i) = value;
      i = i + 1L;
    }

    return array;
  }

  @static fun copy(src: Array[T], srcPos: Int64, dest: Array[T], destPos: Int64, len: Int64) {
    var i = 0L;

    while i < len {
      dest.set(destPos+i, src.get(srcPos+i));
      i = i + 1L;
    }
  }
}

impl[T: Default] Array[T] {
  @static fun new(len: Int64): Array[T] {
    let array = Array[T]::ofSizeUnsafe(len);
    var i = 0L;
    let value = T::default();

    while i < len {
      array.set(i, value);
      i = i + 1L;
    }

    return array;
  }
}

impl[T: Zero] Array[T] {
  @static fun zero(len: Int64): Array[T] {
    Array[T]::ofSizeUnsafe(len)
  }
}

class ArrayEnumerator[T](let array: Array[T]) {
  var idx: Int64 = 0L;

  fun hasNext(): Bool {
    self.idx < self.array.size()
  }

  fun next(): (Int64, T) {
    let current_idx = self.idx;
    self.idx = self.idx + 1L;
    (current_idx, self.array(current_idx))
  }
}

impl[T: Identity + Equals] Array[T] {
  @pub fun contains(value: T): Bool {
    var i = 0L;

    while i < self.size() {
      let x = self.get(i);
      if x.identicalTo(value) || x.equals(value) {
        return true;
      }
      i = i + 1L;
    }

    return false;
  }
}

impl[T: Identity] Array[T] {
  @pub fun has(value: T): Bool {
    var i = 0L;

    while i < self.size() {
      if self.get(i).identicalTo(value) {
        return true;
      }
      i = i + 1L;
    }

    return false;
  }
}
