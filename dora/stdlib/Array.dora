@pub @internal class Array[T](values: T...) {
  @pub @internal fn size(): Int64;
  @pub @internal fn get(idx: Int64): T;
  @pub @internal fn set(idx: Int64, val: T);

  @pub fn isEmpty(): Bool = self.size() == 0L;

  @pub fn enumerate(): ArrayEnumerator[T] {
    ArrayEnumerator[T](self)
  }

  @pub @static fn empty(): Array[T] {
    Array[T]::unsafeNew(0L)
  }

  @static @internal fn unsafeNew(size: Int64): Array[T];

  @pub @static fn fill(len: Int64, value: T): Array[T] {
    let array = Array[T]::unsafeNew(len);
    var i = 0L;

    while i < len {
      array(i) = value;
      i = i + 1L;
    }

    return array;
  }

  @pub @static fn copy(src: Array[T], srcPos: Int64, dest: Array[T], destPos: Int64, len: Int64) {
    var i = 0L;

    while i < len {
      dest.set(destPos+i, src.get(srcPos+i));
      i = i + 1L;
    }
  }
}

impl[T: Default] Array[T] {
  @pub @static fn new(len: Int64): Array[T] {
    let array = Array[T]::unsafeNew(len);
    var i = 0L;
    let value = T::default();

    while i < len {
      array.set(i, value);
      i = i + 1L;
    }

    return array;
  }
}

impl[T: Zero] Array[T] {
  @pub @static fn zero(len: Int64): Array[T] {
    Array[T]::unsafeNew(len)
  }
}

@pub class ArrayEnumerator[T](let array: Array[T]) {
  var idx: Int64 = 0L;

  @pub fn hasNext(): Bool {
    self.idx < self.array.size()
  }

  @pub fn next(): (Int64, T) {
    let current_idx = self.idx;
    self.idx = self.idx + 1L;
    (current_idx, self.array(current_idx))
  }
}

impl[T: Sortable] Array[T] {
  // a stable in-place sort, currently implemented by insertion sort
  @pub @static
  fn sortStable(array: Array[T]) {
    var i = 1L;
    while i < array.size() {
      var temp: T = array.get(i);
      var j = i;
      while j > 0L && array(j - 1L).sortsAfter(temp) {
        array(j) = array(j - 1L);
        j = j - 1L;
      }
      array(j) = temp;
      i = i + 1L;
    }
  }
}

impl[T: Equals] Array[T] {
  @pub fn equals(other: Array[T]): Bool {
    if self.size() != other.size() {
      return false;
    }
    var i = 0L;
    while i < self.size() {
      if self(i).equals(other(i)).not() {
        return false;
      }
      i = i + 1L;
    }
    return true;
  }

  @pub fn contains(value: T): Bool {
    var i = 0L;

    while i < self.size() {
      let x = self.get(i);
      if x.equals(value) {
        return true;
      }
      i = i + 1L;
    }

    return false;
  }

  @pub @static fn compare(a: Array[T], aPos: Int64, b: Array[T], bPos: Int64, len: Int64): Bool {
    let aSize = a.size() - aPos;
    let bSize = b.size() - bPos;
    if aSize < len || bSize < len {
      fatalError("len ${len} exceeds size of array");
    }
    if aSize < 0L || bSize < 0L {
      return false;
    }

    var i = 0L;

    while i < len {
      if a(aPos+i).equals(b(bPos+i)).not() {
        return false;
      }
      i = i + 1L;
    }

    return true;
  }
}

impl[T: Identity] Array[T] {
  @pub fn has(value: T): Bool {
    var i = 0L;

    while i < self.size() {
      if self.get(i).identicalTo(value) {
        return true;
      }
      i = i + 1L;
    }

    return false;
  }
}

impl[T: Stringable] Array[T] {
  @pub fn toString(): String {
    let sb = StringBuffer();
    sb.append("Array(");
    let size = self.size();
    if size != 0L {
      var i = 0L;
      while i < size - 1L {
        sb.append(self.get(i).toString());
        sb.append(", ");
        i = i + 1L;
      }
      sb.append(self.get(i).toString());
    }
    sb.append(")");
    return sb.toString();
  }
}
