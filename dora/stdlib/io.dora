@internal fn readFileAsString(path: String): Option[String];
@internal fn readFileAsBytes(path: String): Option[Array[UInt8]];
@internal fn writeFileAsString(path: String, content: String): Bool;
@internal fn writeFileAsBytes(path: String, content: Array[UInt8]): Bool;

@pub class File {
    path: String,
}

impl File {
    @pub @static fn new(path: String): File {
        File(path)
    }

    @pub fn readAsString(): Option[String] {
        readFileAsString(self.path)
    }

    @pub fn readAsBytes(): Option[Array[UInt8]] {
        readFileAsBytes(self.path)
    }

    @pub fn writeAsString(content: String): Result[(), ()] {
        if writeFileAsString(self.path, content) {
            Ok[(), ()](())
        } else {
            Err[(), ()](())
        }
    }

    @pub fn writeAsBytes(content: Array[UInt8]): Result[(), ()] {
        if writeFileAsBytes(self.path, content) {
            Ok[(), ()](())
        } else {
            Err[(), ()](())
        }
    }
}

@pub class Directory {
    path: String,
}

impl Directory {
    @pub fn new(path: String): Directory {
        Directory(path)
    }
}

@internal fn socketConnect(addr: String): Int32;
@internal fn socketClose(fd: Int32);
@internal fn socketRead(fd: Int32, array: Array[UInt8], offset: Int64, len: Int64): Int64;
@internal fn socketWrite(fd: Int32, array: Array[UInt8], offset: Int64, len: Int64): Int64;

@pub class Socket {
    fd: Int32,
}

impl Socket {
    @pub @static fn connect(addr: String): Result[Socket, ()] {
        let fd = socketConnect(addr);
        if fd != -1i32 {
            Ok[Socket, ()](Socket(fd))
        } else {
            Err[Socket, ()](())
        }
    }

    @pub fn close() {
        if self.fd != -1i32 {
            socketClose(self.fd);
            self.fd = -1;
        }
    }

    @pub fn read(array: Array[UInt8]): Int64 {
        socketRead(self.fd, array, 0, array.size())
    }

    @pub fn write(array: Array[UInt8]): Int64 {
        socketRead(self.fd, array, 0, array.size())
    }
}
